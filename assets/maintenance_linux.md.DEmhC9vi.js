import{_ as s,o as i,c as a,a8 as l}from"./chunks/framework.CtAXtxNA.js";const n="/assets/SDLybItNSoqoYhxUMGzctXgXnye.DXHQMyqU.png",e="/assets/Sje6bokUWoWOxwxFrKTc53dvnkd.j5H_Clmu.png",t="/assets/LJt1bBBj9ovXwXx4SmvcY0rlnne.7QdTO6pI.png",p="/assets/AuYwbHtIyo5XYVxXLiZc5wXZnvh.BNcoPLW_.png",b=JSON.parse(`{"title":"Linux 基础","description":"","frontmatter":{"head":[["script",{"charset":"UTF-8","id":"LA_COLLECT","src":"//sdk.51.la/js-sdk-pro.min.js"}],["script",{},"typeof LA !== 'undefined' && LA.init({\\"id\\":\\"475303\\",\\"ck\\":\\"3JvYouexrZJnA5FL\\",\\"hashMode\\":true})"]]},"headers":[],"relativePath":"maintenance/linux.md","filePath":"maintenance/linux.md","lastUpdated":1728357169000}`),o={name:"maintenance/linux.md"},h=l('<h1 id="linux-基础" tabindex="-1">Linux 基础 <a class="header-anchor" href="#linux-基础" aria-label="Permalink to &quot;Linux 基础&quot;">​</a></h1><h1 id="linux-发行版" tabindex="-1">Linux 发行版 <a class="header-anchor" href="#linux-发行版" aria-label="Permalink to &quot;Linux 发行版&quot;">​</a></h1><p><img src="'+n+'" alt=""></p><h1 id="目录结构" tabindex="-1">目录结构 <a class="header-anchor" href="#目录结构" aria-label="Permalink to &quot;目录结构&quot;">​</a></h1><p><img src="'+e+'" alt=""></p><p><img src="'+t+'" alt=""><img src="'+p+`" alt=""></p><blockquote><ol><li><strong>/****（根目录）</strong>：整个文件系统的起始点，包含所有其他目录和文件。</li><li><strong>/bin</strong>**（二进制文件）**：包含系统启动和运行时需要的基本命令（如 <code>ls</code>、<code>cp</code>、<code>mv</code> 等）。</li><li><strong>/boot</strong>**（引导文件）**：包含用于系统引导的内核和引导加载程序文件。</li><li><strong>/dev</strong>**（设备文件）**：包含系统中所有设备的文件表示，如硬盘、键盘等。 <ol><li><strong>字符设备文件（Character Devices）</strong>：这些文件以字符为单位进行输入和输出，如终端设备、串口设备等。在 <code>ls -l</code> 命令下，字符设备文件的开头会显示一个 <code>c</code>。</li><li><strong>块设备文件（Block Devices）</strong>：这些文件以块为单位进行输入和输出，如硬盘、USB 设备等。在 <code>ls -l</code> 命令下，块设备文件的开头会显示一个 <code>b</code>。</li></ol><ul><li><code>/dev/sda</code>：表示第一个 SATA 硬盘。</li><li><code>/dev/ttyUSB0</code>：表示 USB 串口设备。</li><li><code>/dev/null</code>：一个特殊的设备，所有写入它的数据都会被丢弃（可认为直接删除）。</li></ul></li><li><strong>/etc</strong>**（配置文件）**：包含系统的配置文件，如网络配置、软件配置等。 <ol><li><code>/etc/apt</code></li><li><code>/etc/ssh</code></li><li><code>/etc/ufw</code></li><li><code>/etc/hosts</code></li><li><code>/etc/docker</code></li><li><code>/etc/crobntab</code></li><li><code>/etc/profile</code></li><li><code>/etc/passwd</code></li></ol></li><li><strong>/home</strong>**（用户主目录）**：包含用户的个人文件和配置文件。</li><li><strong>/lib<strong><strong>和</strong></strong>/lib64</strong>**（库文件）**：包含系统运行时需要的共享库文件。</li><li><strong>/media</strong>**（可移动媒体设备挂载点）**：用于挂载可移动媒体设备，如光盘、USB 设备等。</li><li><strong>/mnt</strong>**（临时挂载点）**：用于临时挂载其他文件系统。</li><li><strong>/opt</strong>**（可选软件包）**：用于安装可选的<u>第三方软件包</u>。</li><li><strong>/proc</strong>**（进程信息）**：包含当前运行进程的信息，是一个虚拟文件系统。</li><li><strong>/root</strong>**（root 用户主目录）**：root 用户的主目录。</li><li><strong>/sbin</strong>**（系统二进制文件）**：包含系统管理员和维护员使用的系统命令。</li><li><strong>/tmp</strong>**（临时文件）**：用于存放临时文件的目录，重启后会被清空。</li><li><strong>/usr</strong>**（用户软件资源）**：包含用户安装的应用程序和文件。 <ol><li><code>/usr/local</code>：用户安装的应用一般放在这里</li></ol></li><li><strong>/var</strong>**（可变数据）**：包含经常变化的文件，如<u>日志文件</u>、缓存文件等。 <ol><li><code>/log</code></li><li><code>/lock</code></li><li><code>/tmp</code></li></ol></li><li><code>srv</code>（服务数据）</li></ol></blockquote><p>特殊路径符</p><ul><li><code>.</code>，表示当前，比如./a.txt，表示当前文件夹内的 <code>a.txt</code> 文件</li><li><code>..</code>，表示上级目录，比如 <code>../</code> 表示上级目录，<code>../../</code> 表示上级的上级目录</li><li><code>~</code>，表示用户的 HOME 目录，比如 <code>cd ~</code>，即可切回用户 HOME 目录</li></ul><p>在文件系统中，路径 <code>./standalone-logs/</code> 和 <code>./standalone-logs</code> 通常指的是同一个目录，<code>.</code> 表示当前目录。</p><ul><li><strong>./standalone-logs</strong>：这是一个相对路径，表示当前目录下的 <code>standalone-logs</code> 文件夹。</li><li><strong>./standalone-logs/</strong>：这同样是当前目录下的 <code>standalone-logs</code> 文件夹，末尾的斜杠 <code>/</code> 表示它是一个目录。</li></ul><p>在大多数操作系统中，包括类 Unix 系统（如 Linux 和 macOS）和 Windows，尝试访问这两个路径时，它们都会指向同一个位置。然而，需要注意的是，在某些上下文或特定的程序中，路径的结尾斜杠可能用于区分目录和文件，尽管在大多数命令行操作中，这种区分并不明显。</p><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p>在类 Unix 系统中，<code>./a</code>、<code>./a/</code>、<code>a</code> 和 <code>a/</code> 这四种表达方式表示的含义如下：</p></div><ol><li><code>./a</code>：表示当前目录下的名为 <code>a</code> 的可执行文件。</li><li><code>./a/</code>：表示当前目录下的名为 <code>a</code> 的文件夹（目录）。</li><li><code>a</code>：如果当前目录下存在名为 <code>a</code> 的可执行文件，则执行该文件；如果不存在，则系统会在 <code>PATH</code> 环境变量指定的路径中查找并执行名为 <code>a</code> 的可执行文件。如果 <code>a</code> 是一个目录，系统会尝试进入该目录。</li><li><code>a/</code>：表示当前目录下的名为 <code>a</code> 的文件夹（目录）。</li></ol><p>根据上述解释，这四种表示方式的区别在于指定的文件或目录类型不同：</p><ul><li><code>./a</code> 和 <code>a</code> 都可能表示可执行文件，但前者明确指定在当前目录下查找，而后者可能在 <code>PATH</code> 中查找。</li><li><code>./a/</code> 和 <code>a/</code> 都表示目录，但前者明确指定在当前目录下查找，而后者默认在当前目录下查找。</li></ul><h1 id="linux-常见文件" tabindex="-1">linux 常见文件 <a class="header-anchor" href="#linux-常见文件" aria-label="Permalink to &quot;linux 常见文件&quot;">​</a></h1><p><code>/etc/docker/daemon.json</code> docker 配置文件</p><p><code>/etc/resolv.conf</code> DNS 配置</p><p><code>/etc/ufw</code> 防火墙规则存放位置中的规则文件（后缀名：.rules）</p><p><code>/etc/sudoers</code> sudo 配置</p><p><code>/etc/profile</code> 是一个系统级别的 shell 配置文件，它包含着系统的默认环境变量和全局配置。当用户登录系统时，系统会自动执行 <code>/etc/profile</code> 文件来设置用户的环境变量和其他设置。这个文件通常用于定义系统范围内的<u>全局环境变量</u>和可执行文件的路径。</p><p><code>/etc/sudoers</code> sudo 配置</p><p><code>/etc/sysctl.conf</code> 设置内核参数。这些参数主要影响内核的行为，比如网络设置、进程管理、内存管理等。通过修改该文件，用户可以持久化一些内核参数配置，以便在系统启动时自动加载。</p><p><code>/etc/cloud/cloud.cfg</code> 是一个配置文件，通常用于配置云服务器上的一些参数和行为。这个文件通常在基于云的虚拟机实例中使用，例如在 AWS EC2、Google Cloud Compute Engine、Azure VM 等上。它包含了一系列的配置选项，用于定义云实例的行为，比如网络配置、主机名设置、用户数据等。</p><p>以下是一些可能包含在 <code>/etc/cloud/cloud.cfg</code> 中的常见配置选项：</p><ol><li>network: 这部分配置网络相关的设置，比如是否配置静态 IP 地址、是否启用 DHCP 等。</li><li>hostname: 定义云实例的主机名。</li><li>users: 这个部分允许你配置系统用户和用户组，以及相关的属性。</li><li>ssh_pwauth: 是否允许使用密码验证 SSH 登录。</li><li>growpart: 这部分用于指定是否自动扩展云磁盘的分区。</li><li>cloud_init_modules: 定义哪些模块将在云初始化时执行。</li><li>cloud_config_modules: 定义哪些模块将在云配置时执行。</li><li>cloud_final_modules: 定义哪些模块将在云初始化结束时执行。</li></ol><p><code>/bin</code> 二进制文件的常规存放位置指向 <code>/usr/bin</code>，通常包含了一些基本的系统命令和工具，如 Bash、Dash 等</p><p>/var/log 系统日志文件</p><p>/proc 进程文件夹，里面的 pid 对应不同进程，cwd 对应的是启动路径</p><blockquote><p>在 Linux 系统中，<code>/proc</code> 目录是一个特殊的虚拟文件系统，提供了对系统和进程信息的访问。其中，<code>/proc/&lt;PID&gt;/fd</code> 目录包含了进程的文件描述符信息。</p><p>具体来说，<code>/proc/1</code> 表示进程 ID 为 1 的进程，通常是 init 进程或 systemd 进程，也就是系统的第一个用户空间进程。在 Linux 系统中，这个进程是系统启动的第一个进程，负责初始化系统并启动其他进程。</p><p>在 <code>/proc/1/fd</code> 目录下，包含了进程 1 的文件描述符信息。每个文件描述符都是一个符号链接，指向进程打开的文件或设备。其中，<code>/proc/1/fd/1</code> 表示进程 1 的文件描述符 1，即标准输出（stdout），<code>/proc/1/fd/2</code> 表示进程 1 的文件描述符 2，即标准错误输出（stderr）。</p><p>通过将输出重定向到 <code>/proc/1/fd/1</code> 和 <code>/proc/1/fd/2</code>，可以将容器中的输出信息和错误信息发送到主机的标准输出和标准错误输出，方便进行日志记录和监控。这种方式可以让容器的输出信息与宿主机的输出流进行交互。</p></blockquote><h1 id="中断信号" tabindex="-1">中断信号 <a class="header-anchor" href="#中断信号" aria-label="Permalink to &quot;中断信号&quot;">​</a></h1><ol><li><strong>SIGINT</strong>** (2)【INT】**：由终端按下 <code>Ctrl + C</code> 时发送给前台进程，通常用于中断（Interrupt）进程的执行。</li><li><strong>SIGKILL (9)</strong>：用于强制终止进程，进程无法捕获或忽略这个信号。</li><li><strong>SIGTERM (15)</strong>：请求进程终止（Terminate）的信号，通常用于优雅地终止进程。</li><li><strong>SIGHUP (1)</strong>：通常表示终端连接断开，通常会让进程重新加载配置或重启。</li><li><strong>SIGSTOP (19)</strong>：暂停（Stop）进程的执行，进程会被挂起而不会被终止。</li><li><strong>SIGCONT (18)</strong>：恢复（Continue）之前被暂停的进程。</li><li><strong>SIGUSR1 (10)</strong> 和 <strong>SIGUSR2 (12)</strong>：用户自定义的信号，可以被应用程序自定义使用。</li><li><strong>SIGSEGV (11)</strong>：表示进程访问了无效的内存地址，通常是段错误（Segmentation Fault）。</li></ol><p>退出状态码（exit status code）</p><ul><li>退出状态码为 0 表示命令成功执行，没有发生错误。</li><li>非零的退出状态码通常表示命令执行过程中出现了某种问题或错误，具体的非零值通常会有不同的含义，可以根据具体的命令或程序来解释。</li></ul><p>因此，当你看到命令输出 <code>0|1</code>，这可能表示命令的退出状态码为 0 或 1，其中 0 表示成功，1 可能表示某种错误或异常情况。要了解确切的含义，需要查看命令的文档或上下文来解释这些退出状态码的含义。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">：表示程序成功执行并正常退出。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">1-125</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">：通常用于表示程序执行过程中发生了某种错误或异常情况，具体含义可以根据程序的设计而有所不同。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 一般性未知错误</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 不适用的shell或语法错误</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">126</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">：表示无法执行程序，可能是因为程序文件不可执行。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">127</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">：表示找不到要执行的命令，或者命令不可执行。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">128</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">：通常用于表示程序因为收到了信号而退出，退出状态码为 128 加上信号编号。无效退出参数 例如，如果程序因收到 SIGINT 信号而退出，退出状态码为 128 + 2 = 130。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">130</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">：通常表示程序被用户中断（例如通过 Ctrl + C）。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">255</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">：表示退出状态码超出了合法范围。</span></span></code></pre></div><h1 id="常用快捷键" tabindex="-1">常用快捷键 <a class="header-anchor" href="#常用快捷键" aria-label="Permalink to &quot;常用快捷键&quot;">​</a></h1><ol><li><p><strong>基本操作快捷键</strong>：</p><ul><li><code>Ctrl + C</code>：中断当前程序的执行。</li><li><code>Ctrl + Z</code>：将当前程序挂起（暂停），并放入后台运行。</li><li><code>Ctrl + D</code>：表示输入结束，通常用于退出终端或结束输入流。结束键盘输入(End Of File，EOF</li><li><code>Ctrl + L</code>：清屏，相当于执行 <code>clear</code> 命令。</li></ul></li><li><p><strong>光标移动快捷键</strong>：</p><ul><li><code>Ctrl + A</code> 或 <code>Home</code>：将光标移动到行首。</li><li><code>Ctrl + E</code> 或 <code>End</code>：将光标移动到行尾。</li><li><code>Ctrl + U</code>：删除光标之前的所有内容。</li><li><code>Ctrl + K</code>：删除光标之后的所有内容。</li></ul></li><li><p><strong>历史记录和命令补全快捷键</strong>：</p><ul><li><code>Ctrl + R</code>：在历史记录中搜索命令。</li><li><code>Tab</code>：自动补全命令或文件名。</li><li><code>Ctrl + P</code> 或 向上箭头：查看上一个历史命令。</li><li><code>Ctrl + N</code> 或 向下箭头：查看下一个历史命令。</li></ul></li><li><p><strong>其他常用快捷键</strong>：</p><ul><li><code>Ctrl + S</code>：暂停屏幕输出。</li><li><code>Ctrl + Q</code>：恢复屏幕输出。</li><li><code>Ctrl + T</code>：交换当前字符和前一个字符的位置。</li><li><code>Ctrl + W</code>：删除光标前的一个单词。</li></ul></li></ol><h1 id="环境变量-path" tabindex="-1">环境变量 PATH <a class="header-anchor" href="#环境变量-path" aria-label="Permalink to &quot;环境变量 PATH&quot;">​</a></h1><p>全局环境变量</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printenv</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $PATH</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin</span></span></code></pre></div><p>设置 PATH 变量：将 PATH 变量设置为 <code>/usr/bin</code> 和 <code>/bin</code> 两个目录的列表。这意味着当你运行一个命令时，系统会先检查 <code>/usr/bin</code> 目录，如果在那里找不到，再检查 <code>/bin</code> 目录。这两个目录通常包含许多常用的命令和工具。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/usr/bin:/bin</span></span></code></pre></div><p>然而，通常情况下，PATH 变量在系统启动时就已经通过配置文件（如 <code>~/.bashrc</code>、<code>~/.profile</code> 或 <code>/etc/environment</code>）被设置好了，并且包含了多个目录，而不仅仅是/usr/bin 和/bin。因此，直接将其设置为只包含这两个目录可能会导致一些命令不可用，因为它们可能位于其他默认不在 PATH 中的目录中。在实际使用中，你可能会看到类似这样的命令来添加目录到 PATH：</p><p><code>export PATH=$PATH:/new/directory</code></p><blockquote><p><code>/etc/profile</code> 为全局环境变量</p></blockquote><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># /etc/profile: system-wide .profile file for the Bourne shell (sh(1))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># and Bourne compatible shells (bash(1), ksh(1), ash(1), ...).</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># /etc/profile 是 Bourne shell 及其兼容 shell 的系统范围的 .profile 文件。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PS1-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 检查是否存在 PS1 变量。PS1 是提示符变量，如果存在并且非空，说明当前是一个交互式 shell。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BASH-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ] &amp;&amp; [ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$BASH</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/bin/sh&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 检查 BASH 变量是否存在且不等于 /bin/sh，以确定是否运行的是 Bash shell，而不是其他 shell。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # The file bash.bashrc already sets the default PS1.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # PS1=&#39;\\h:\\w\\$ &#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # bash.bashrc 文件已经设置了默认的 PS1 提示符样式。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /etc/bash.bashrc ]; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      .</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/bash.bashrc</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 如果 /etc/bash.bashrc 文件存在，则通过 . /etc/bash.bashrc 命令执行该文件。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 这个文件通常包含 Bash 的默认配置和提示符设置。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fi</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  else</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">id</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -eq</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      PS1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;# &#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 如果不是 Bash shell，则根据当前用户是否为 root 用户设置提示符。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # id -u 命令返回用户的 UID，如果 UID 为 0，表示是 root 用户，提示符设置为 # 。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      PS1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;$ &#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 否则设置为普通用户的提示符 $ 。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fi</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  fi</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fi</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /etc/profile.d ]; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 检查 /etc/profile.d 目录是否存在。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/profile.d/*.sh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-r</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $i ]; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      .</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $i</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 遍历 /etc/profile.d 目录下所有以 .sh 结尾的脚本文件，并执行每一个可读的脚本文件（通过 . $i 命令）。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fi</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  done</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  unset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 用 unset i 清除变量 i，以防止污染环境变量。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fi</span></span></code></pre></div><ol><li><strong>临时配置环境变量</strong>：在命令行中直接设置环境变量，这种设置<u>只在当前会话中有效</u>。例如，要设置环境变量 <code>MY_VARIABLE</code> 为 <code>my_value</code>，可以执行以下命令：</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MY_VARIABLE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">my_value</span></span></code></pre></div><ol><li><strong>永久配置用户级环境变量</strong>：编辑当前用户的配置文件，如 <code>~/.bashrc</code> 或 <code>~/.bash_profile</code>，并在其中添加您的环境变量设置。编辑完成后，使用 <code>source</code> 命令使更改生效，例如：</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.bashrc</span></span></code></pre></div><ol><li><strong>永久配置系统级环境变量</strong>： 设置全局的环境变量，可以编辑 <code>/etc/environment</code> 文件，并在其中添加您的环境变量设置。这会影响系统中所有用户的环境变量。</li><li><strong>使用<strong><strong>export</strong></strong>命令</strong>： 使用 <code>export</code> 命令将环境变量设置为全局变量。例如：</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> export</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MY_VARIABLE=my_value</span></span></code></pre></div><p>使用 <code>echo $MY_VARIABLE</code> 来检查它是否已正确设置。</p>`,55),d=[h];function c(k,r,g,E,u,y){return i(),a("div",{"data-pagefind-body":!0},d)}const A=s(o,[["render",c]]);export{b as __pageData,A as default};
