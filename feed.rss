<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Mblog - 沐风的个人博客</title>
        <link>https://www.imufeng.cn</link>
        <description>但愿岁月如客，来去皆从容。（后端开发技术交流）</description>
        <lastBuildDate>Sat, 05 Oct 2024 13:13:31 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>zh-cn</language>
        <image>
            <title>Mblog - 沐风的个人博客</title>
            <url>https://www.imufeng.cn/logo.svg</url>
            <link>https://www.imufeng.cn</link>
        </image>
        <copyright>Mblog © 2021-2024 Created by 沐风</copyright>
        <item>
            <title><![CDATA[关于本站]]></title>
            <link>https://www.imufeng.cn/about/</link>
            <guid>https://www.imufeng.cn/about/</guid>
            <pubDate>Sat, 05 Oct 2024 12:44:16 GMT</pubDate>
            <description><![CDATA[关于本站
::: tip 版权声明
除特殊说明，本站文章皆为原创，著作权归作者所有。依据 CC BY-NC-SA 4.0  许可证进行授权。
本站源码开源于 Github ，采用 GPLv3 开源协议]]></description>
            <content:encoded><![CDATA[<h1 id="关于本站" tabindex="-1">关于本站 <a class="header-anchor" href="#关于本站" aria-label="Permalink to &quot;关于本站&quot;"></a></h1>
<div class="tip custom-block"><p class="custom-block-title">版权声明</p>
<p>除特殊说明，本站文章皆为原创，著作权归作者所有。依据 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh-hans" target="_blank" rel="noreferrer">CC BY-NC-SA 4.0 </a> 许可证进行授权。</p>
<p>本站源码开源于 <a href="https://github.com/i-mufeng/mblog" target="_blank" rel="noreferrer">Github</a> ，采用 <a href="https://www.gnu.org/licenses/gpl-3.0.md" target="_blank" rel="noreferrer">GPLv3</a> 开源协议。</p>
</div>
<details class="details custom-block"><summary>站点信息</summary>
<ul>
<li>
<p><strong>博主：</strong> Mufeng</p>
</li>
<li>
<p><strong>头像：</strong> <a href="https://cn.gravatar.com/avatar/f1dcdc8fa782b81824df5d67022e4d4a" target="_blank" rel="noreferrer">Gavatar-CN</a></p>
</li>
<li>
<p><strong>站点名称：</strong> 沐风的小站</p>
</li>
<li>
<p><strong>站点域名：</strong> <code>imufeng.cn</code></p>
</li>
<li>
<p><strong>E-mail：</strong> <a href="mailto:admin@imufeng.cn" target="_blank" rel="noreferrer">admin@imufeng.cn</a></p>
</li>
</ul>
</details>
<h3 id="关于-mufeng" tabindex="-1">关于 MUFENG <a class="header-anchor" href="#关于-mufeng" aria-label="Permalink to &quot;关于 MUFENG&quot;"></a></h3>
<p>博主是一名萌新程序猿，学计算机纯属热爱，毕业也顺利的踏进了开发这条不归路。目前工作一年，状态良好。喜欢音乐，喜静不喜动。</p>
<p><code>沐风</code>，取如沐春风之意，指不断的熏陶，静静的成长。是我比较追求的一个状态，更贴合我佛系、随遇而安的性格。也希望自己能够达到那种终生学习、不断完善自己的境界。</p>
<h3 id="关于-imufeng-cn" tabindex="-1">关于 IMUFENG.CN <a class="header-anchor" href="#关于-imufeng-cn" aria-label="Permalink to &quot;关于 IMUFENG.CN&quot;"></a></h3>
<p>搭建本站是为了整理自己最近的所得，并写写自己的所思。我之前的一些博文会发布到 <code>CSDN</code>、<code>博客园</code> 等平台，但是自由度会受到很大限制，且某些平台吃相难看，认真做内容的平台不断被打压。所以我认为自己搭建一个站点还是有必要的。</p>
<p>之前也尝试过一些开源博客，以及 <code>Wordpress</code> ，虽然但是，总还是觉得用着不舒服，所以最终还是选择了 <code>VitePress</code>。</p>
<h3 id="建站历程" tabindex="-1">建站历程 <a class="header-anchor" href="#建站历程" aria-label="Permalink to &quot;建站历程&quot;"></a></h3>
<br>
<div class='timeline-dot'><span class='timeline-dot-title'>2019年</span>
<ul>
<li>在自学过程中，了解到基本的建站知识。</li>
<li>购买了一台云主机以及 mangoling.top 的域名。</li>
<li>尝试为自己的域名备案。</li>
</ul>
</div>
<div class='timeline-dot'><span class='timeline-dot-title'>2020年</span>
<ul>
<li>由于疫情被封，一直自学 Linux 及开发相关知识。</li>
</ul>
</div>
<div class='timeline-dot'><span class='timeline-dot-title'>2021 年</span>
<ul>
<li>学习 HTTPS 相关知识，为域名绑定https证书。</li>
<li>通过 Typora 将 markdown 笔记导出为 HTML 并发布，向同学分享。</li>
<li>入手 imufeng.cn 域名，购买了第一台云服务器。</li>
</ul>
</div>
<div class='timeline-dot'><span class='timeline-dot-title'>2022年</span>
<ul>
<li>找到一款基于SpringBoot + Vue 的个人博客系统，学习并完善。</li>
<li>学习 Docker 等知识，使用其搭建了 LNMP 架构的服务器并部署了自己的博客。</li>
</ul>
</div>
<div class='timeline-dot'><span class='timeline-dot-title'>2023年</span>
<ul>
<li>为博客的后续寻找方向，尝试过 WordPress 以及自己开发，最终选择了 Vitepress。</li>
<li>逐步完善 Vitepress，接入百度统计站，学习 SEO 优化等相关知识，</li>
</ul>
</div>
<div class='timeline-dot'><span class='timeline-dot-title'>将继续完善</span>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[膜拜大佬]]></title>
            <link>https://www.imufeng.cn/friend-link-list/</link>
            <guid>https://www.imufeng.cn/friend-link-list/</guid>
            <pubDate>Sat, 05 Oct 2024 12:44:16 GMT</pubDate>
            <description><![CDATA[::: details 友链申请格式
- 站点名称： `沐风的小站`
- 站点地址： `https://imufeng.cn`
- 一句话： `但愿岁月如客，来去皆从容。`
- 头像链接： `http]]></description>
            <content:encoded><![CDATA[<details class="details custom-block"><summary>友链申请格式</summary>
<ul>
<li>
<p><strong>站点名称：</strong> <code>沐风的小站</code></p>
</li>
<li>
<p><strong>站点地址：</strong> <code>https://imufeng.cn</code></p>
</li>
<li>
<p><strong>一句话：</strong> <code>但愿岁月如客，来去皆从容。</code></p>
</li>
<li>
<p><strong>头像链接：</strong> <code>https://cravatar.cn/avatar/f1dcdc8fa782b81824df5d67022e4d4a</code></p>
</li>
<li>
<p><strong>其他平台：</strong> <code>[Github/Twitter...](link)</code></p>
</li>
</ul>
</details>
<h3 id="膜拜大佬" tabindex="-1">膜拜大佬 <a class="header-anchor" href="#膜拜大佬" aria-label="Permalink to &quot;膜拜大佬&quot;"></a></h3>
<VPTeamMembers size="medium" :members="authoritys" /><h3 id="友链" tabindex="-1">友链 <a class="header-anchor" href="#友链" aria-label="Permalink to &quot;友链&quot;"></a></h3>
<VPTeamMembers size="small" :members="friends" />]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[一、后端技术分享]]></title>
            <link>https://www.imufeng.cn/full-stack/</link>
            <guid>https://www.imufeng.cn/full-stack/</guid>
            <pubDate>Sat, 05 Oct 2024 12:44:16 GMT</pubDate>
            <description><![CDATA[一、后端技术分享
 二、前端技术分享
 三、系统运维交流]]></description>
            <content:encoded><![CDATA[<h2 id="一、后端技术分享" tabindex="-1">一、后端技术分享 <a class="header-anchor" href="#一、后端技术分享" aria-label="Permalink to &quot;一、后端技术分享&quot;"></a></h2>
<h2 id="二、前端技术分享" tabindex="-1">二、前端技术分享 <a class="header-anchor" href="#二、前端技术分享" aria-label="Permalink to &quot;二、前端技术分享&quot;"></a></h2>
<h2 id="三、系统运维交流" tabindex="-1">三、系统运维交流 <a class="header-anchor" href="#三、系统运维交流" aria-label="Permalink to &quot;三、系统运维交流&quot;"></a></h2>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[算法和数据结构]]></title>
            <link>https://www.imufeng.cn/computer-basics/data-structure/</link>
            <guid>https://www.imufeng.cn/computer-basics/data-structure/</guid>
            <pubDate>Sat, 05 Oct 2024 12:44:16 GMT</pubDate>
            <description><![CDATA[算法和数据结构
 目录]]></description>
            <content:encoded><![CDATA[<h1 id="算法和数据结构" tabindex="-1">算法和数据结构 <a class="header-anchor" href="#算法和数据结构" aria-label="Permalink to &quot;算法和数据结构&quot;"></a></h1>
<h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;"></a></h2>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[计算机网络]]></title>
            <link>https://www.imufeng.cn/computer-basics/network/</link>
            <guid>https://www.imufeng.cn/computer-basics/network/</guid>
            <pubDate>Sat, 05 Oct 2024 12:44:16 GMT</pubDate>
            <description><![CDATA[计算机网络
 目录]]></description>
            <content:encoded><![CDATA[<h1 id="计算机网络" tabindex="-1">计算机网络 <a class="header-anchor" href="#计算机网络" aria-label="Permalink to &quot;计算机网络&quot;"></a></h1>
<h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;"></a></h2>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[操作系统]]></title>
            <link>https://www.imufeng.cn/computer-basics/operating-system/</link>
            <guid>https://www.imufeng.cn/computer-basics/operating-system/</guid>
            <pubDate>Sat, 05 Oct 2024 12:44:16 GMT</pubDate>
            <description><![CDATA[操作系统
 目录]]></description>
            <content:encoded><![CDATA[<h1 id="操作系统" tabindex="-1">操作系统 <a class="header-anchor" href="#操作系统" aria-label="Permalink to &quot;操作系统&quot;"></a></h1>
<h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;"></a></h2>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[数据库]]></title>
            <link>https://www.imufeng.cn/full-stack/database/</link>
            <guid>https://www.imufeng.cn/full-stack/database/</guid>
            <pubDate>Sat, 05 Oct 2024 12:44:16 GMT</pubDate>
            <description><![CDATA[数据库
 目录]]></description>
            <content:encoded><![CDATA[<h1 id="数据库" tabindex="-1">数据库 <a class="header-anchor" href="#数据库" aria-label="Permalink to &quot;数据库&quot;"></a></h1>
<h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;"></a></h2>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[浅学 Flex 流式布局]]></title>
            <link>https://www.imufeng.cn/full-stack/front-end/flex.html</link>
            <guid>https://www.imufeng.cn/full-stack/front-end/flex.html</guid>
            <pubDate>Sat, 05 Oct 2024 12:44:16 GMT</pubDate>
            <description><![CDATA[Flex（Flexible Box）弹性布局，用于为盒装模型提供较大的灵活性。能够灵活，充分利用浏览器的空间，减少了多端适配的难度和成本。]]></description>
            <content:encoded><![CDATA[<h1 id="浅学-flex-流式布局" tabindex="-1">浅学 Flex 流式布局 <a class="header-anchor" href="#浅学-flex-流式布局" aria-label="Permalink to &quot;浅学 Flex 流式布局&quot;"></a></h1>
<p>Flex（Flexible Box）流式布局，用于为盒装模型提供较大的灵活性。任何容器都可以被指定为 flex 布局：<code>display: flex</code> 或 <code>display:inline-flex</code>。本文主要参考<a href="https://www.runoob.com/w3cnote/flex-grammar.html" target="_blank" rel="noreferrer">菜鸟教程</a>及<a href="https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noreferrer">阮一峰老师的FLEX教程</a>。</p>
<h2 id="一、简介" tabindex="-1">一、简介 <a class="header-anchor" href="#一、简介" aria-label="Permalink to &quot;一、简介&quot;"></a></h2>
<h3 id="基本概念" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念" aria-label="Permalink to &quot;基本概念&quot;"></a></h3>
<p>采用 Flex 布局的元素被称为 Flex 容器（container），它的所有元素会自动成为容器成员，成为 Flex 项目（item）。容器中默认存在两根轴：水平主轴（main axis）和垂直的交叉轴（cross axis），主轴开始的位置叫做 <code>main start</code>，结束的位置叫做 <code>main end</code>；交叉轴类似。项目默认沿主轴排列，单个 item 占据的主轴空间叫做 <code>mian size</code> ，占据的交叉轴空间叫做 <code>cross size</code>；</p>
<h3 id="容器属性" tabindex="-1">容器属性 <a class="header-anchor" href="#容器属性" aria-label="Permalink to &quot;容器属性&quot;"></a></h3>
<p>flex 容器可以已配置以下六个属性<code>flex-direction</code>、<code>flex-wrap</code>、<code>flex-flow</code>、<code>justify-content</code>、<code>align-items</code>、<code>align-content</code>。</p>
<ul>
<li><code>flex-direction</code> 决定主轴的方向
<ul>
<li><code>row</code> 水平向右</li>
<li><code>row-reverse</code> 水平向左</li>
<li><code>column</code> 垂直向下</li>
<li><code>column-reverse</code> 垂直向上</li>
</ul>
</li>
<li><code>flex-wrap</code> 决定 item 的换行方式
<ul>
<li><code>nowrap</code> 不换行</li>
<li><code>wrap</code> 向下换行</li>
<li><code>wrap-reverse</code> 向上换行</li>
</ul>
</li>
<li><code>flex-flow</code>  <code>flex-direction</code> 和 <code>flex-wrap</code> 结合
<ul>
<li>默认：<code> flex-flow: row nowrap</code></li>
</ul>
</li>
<li><code>justify-content</code> item 基于主轴的对齐方式
<ul>
<li><code>flex-start</code>（默认值）：左对齐</li>
<li><code>flex-end</code>：右对齐</li>
<li><code>center</code>： 居中</li>
<li><code>space-between</code>：两端对齐，项目之间的间隔都相等。</li>
<li><code>space-around</code>：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li>
</ul>
</li>
<li><code>align-items</code> item 基于交叉轴的对齐方式
<ul>
<li><code>flex-start</code>：交叉轴的起点对齐。</li>
<li><code>flex-end</code>：交叉轴的终点对齐。</li>
<li><code>center</code>：交叉轴的中点对齐。</li>
<li><code>baseline</code>: 项目的第一行文字的基线对齐。</li>
<li><code>stretch</code>（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li>
</ul>
</li>
<li><code>align-content</code> 多根轴线的对齐方式
<ul>
<li><code>flex-start</code>：与交叉轴的起点对齐。</li>
<li><code>flex-end</code>：与交叉轴的终点对齐。</li>
<li><code>center</code>：与交叉轴的中点对齐。</li>
<li><code>space-between</code>：与交叉轴两端对齐，轴线之间的间隔平均分布。</li>
<li><code>space-around</code>：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li>
<li><code>stretch</code>（默认值）：轴线占满整个交叉轴。</li>
</ul>
</li>
</ul>
<h3 id="项目属性" tabindex="-1">项目属性 <a class="header-anchor" href="#项目属性" aria-label="Permalink to &quot;项目属性&quot;"></a></h3>
<p>以下六个属性设置在 item：<code>order</code>、<code>flex-grow</code>、<code>flex-shrink</code>、<code>flex-basis</code>、<code>flex</code>、<code>align-self</code>。</p>
<ul>
<li>
<p><code>order</code> 定义项目的排列顺序，越小越靠前，默认为0。</p>
</li>
<li>
<p><code>flex-grow</code> 定义项目的放大比例，默认为0</p>
</li>
<li>
<p><code>flex-shrink</code> 定义项目的缩小比例，默认为1</p>
<blockquote>
<p>如果所有项目的<code>flex-shrink</code>属性都为1，当空间不足时，都将等比例缩小。如果一个项目的<code>flex-shrink</code>属性为0，其他项目都为1，则空间不足时，前者不缩小。</p>
</blockquote>
</li>
<li>
<p><code>flex-basis</code> 定义在分配多余空间之前，项目占据的主轴空间（main size）</p>
<blockquote>
<p>它可以设为跟<code>width</code>或<code>height</code>属性一样的值（比如350px），则项目将占据固定空间。</p>
</blockquote>
</li>
<li>
<p><code>flex</code>属性是<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>。</p>
<blockquote>
<p>该属性有两个快捷值：<code>auto</code> (<code>1 1 auto</code>) 和 none (<code>0 0 auto</code>)。</p>
<p>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p>
</blockquote>
</li>
<li>
<p><code>align-self</code> 允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性。默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code>。</p>
</li>
</ul>
<h2 id="二、实战" tabindex="-1">二、实战 <a class="header-anchor" href="#二、实战" aria-label="Permalink to &quot;二、实战&quot;"></a></h2>
<p>类似于骰子的布局，它的一面最多可以放九个点，该案例将会实现1-6的点数。</p>
<p><img src="https://cdn.imufeng.cn/mblog/399147ab4258f7a73aa7a57ac3469a26.png" alt="image-20240325110603932"></p>
<h3 id="准备" tabindex="-1">准备 <a class="header-anchor" href="#准备" aria-label="Permalink to &quot;准备&quot;"></a></h3>
<p>开始准备工作，如下方部分 HTML 代码，container为主体部分，<code>face-n</code> 代表数字 n 的骰子，pip 为一个点。</p>
<div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"container"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"face-1"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">span</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"pip"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"face-4"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    &#x3C;!-- 4、6 需要分为两列，5需要分为三列--></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"colum"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">span</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"pip"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">span</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"pip"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"colum"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">span</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"pip"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">span</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"pip"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><p>然后，我们为这些基本元素编写样式：</p>
<div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    margin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    justify-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">space-around</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    flex-wrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">wrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.pip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">24</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">24</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    border-radius</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    margin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">#333</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    box-shadow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">inset</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> #111</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">inset</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> #555</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">^=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"face"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">] {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    margin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">16</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">#e7e7e7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">104</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">104</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    object-fit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">contain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    box-shadow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">inset</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> white</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    inset</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> #bbb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    inset</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> #d7d7d7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    inset</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> #d7d7d7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    border-radius</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>在浏览器中运行，我们便可以得到如下效果：</p>
<p><img src="https://cdn.imufeng.cn/mblog/596d698ec729b9d6684cfdb25583d0d2.png" alt="image-20240325141728459"></p>
<h3 id="实现" tabindex="-1">实现 <a class="header-anchor" href="#实现" aria-label="Permalink to &quot;实现&quot;"></a></h3>
<div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.face-1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    justify-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    align-items</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.face-2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    justify-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">space-between</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">pip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:nth-of-type(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        align-self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">flex-end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.face-3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    justify-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">space-between</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">pip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:nth-of-type(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        align-self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    .pip:nth-of-type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        align-self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">flex-end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.face-4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    justify-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">space-between</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    flex-direction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">colum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        justify-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">space-between</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.face-5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    justify-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">space-between</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    flex-direction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">colum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        justify-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">space-between</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    .colum:nth-of-type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        justify-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.face-6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    justify-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">space-between</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">colum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        justify-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">space-between</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        flex-direction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>效果如下</p>
<p><img src="https://cdn.imufeng.cn/mblog/75537b8811f22a858e299cbfd6cc6b12.png" alt="image-20240325142121252"></p>
<p>项目源码可以在 <a href="https://codepen.io/imufeng/pen/LYvLZmW" target="_blank" rel="noreferrer">A Pen by mufeng (codepen.io)</a> 看到，感谢您的支持。</p>
]]></content:encoded>
            <enclosure url="https://cdn.imufeng.cn/mblog/6175e8bcd0a48acaa01a9b31ce7b0695.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[前端笔记]]></title>
            <link>https://www.imufeng.cn/full-stack/front-end/</link>
            <guid>https://www.imufeng.cn/full-stack/front-end/</guid>
            <pubDate>Sat, 05 Oct 2024 12:44:16 GMT</pubDate>
            <description><![CDATA[前端笔记
 目录
 css布局篇
- 浅学 Flex 流式布局
 前端复习笔记
- CSS 复习]]></description>
            <content:encoded><![CDATA[<h1 id="前端笔记" tabindex="-1">前端笔记 <a class="header-anchor" href="#前端笔记" aria-label="Permalink to &quot;前端笔记&quot;"></a></h1>
<h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;"></a></h2>
<h3 id="css布局篇" tabindex="-1">css布局篇 <a class="header-anchor" href="#css布局篇" aria-label="Permalink to &quot;css布局篇&quot;"></a></h3>
<ul>
<li><a href="./flex.html">浅学 Flex 流式布局</a></li>
</ul>
<h3 id="前端复习笔记" tabindex="-1">前端复习笔记 <a class="header-anchor" href="#前端复习笔记" aria-label="Permalink to &quot;前端复习笔记&quot;"></a></h3>
<ul>
<li><a href="./review/">CSS 复习</a></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Java]]></title>
            <link>https://www.imufeng.cn/full-stack/java/</link>
            <guid>https://www.imufeng.cn/full-stack/java/</guid>
            <pubDate>Sat, 05 Oct 2024 12:44:16 GMT</pubDate>
            <description><![CDATA[Java
 目录
 面向对象
- 抽象类和抽象方法
 重学 JAVA 设计模式
- 重学 JAVA 设计模式
 JAVA 特性分享
- Java8新特性详解]]></description>
            <content:encoded><![CDATA[<h1 id="java" tabindex="-1">Java <a class="header-anchor" href="#java" aria-label="Permalink to &quot;Java&quot;"></a></h1>
<h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;"></a></h2>
<h3 id="面向对象" tabindex="-1">面向对象 <a class="header-anchor" href="#面向对象" aria-label="Permalink to &quot;面向对象&quot;"></a></h3>
<ul>
<li><a href="./oop/abstract.html">抽象类和抽象方法</a></li>
</ul>
<h3 id="重学-java-设计模式" tabindex="-1">重学 JAVA 设计模式 <a class="header-anchor" href="#重学-java-设计模式" aria-label="Permalink to &quot;重学 JAVA 设计模式&quot;"></a></h3>
<ul>
<li><a href="./design-patterns/">重学 JAVA 设计模式</a></li>
</ul>
<h3 id="java-特性分享" tabindex="-1">JAVA 特性分享 <a class="header-anchor" href="#java-特性分享" aria-label="Permalink to &quot;JAVA 特性分享&quot;"></a></h3>
<ul>
<li><a href="./characteristic/functional.html">Java8新特性详解</a></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[其他]]></title>
            <link>https://www.imufeng.cn/full-stack/other/</link>
            <guid>https://www.imufeng.cn/full-stack/other/</guid>
            <pubDate>Sat, 05 Oct 2024 12:44:16 GMT</pubDate>
            <description><![CDATA[其他
 目录
- XPATH 学习笔记
- Redis 自学笔记]]></description>
            <content:encoded><![CDATA[<h1 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;"></a></h1>
<h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;"></a></h2>
<ul>
<li><a href="./xpath.html">XPATH 学习笔记</a></li>
<li><a href="./redis.html">Redis 自学笔记</a></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Redis 自学笔记]]></title>
            <link>https://www.imufeng.cn/full-stack/other/redis.html</link>
            <guid>https://www.imufeng.cn/full-stack/other/redis.html</guid>
            <pubDate>Sat, 05 Oct 2024 12:44:16 GMT</pubDate>
            <description><![CDATA[Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。]]></description>
            <content:encoded><![CDATA[<h1 id="redis-自学笔记" tabindex="-1">Redis 自学笔记 <a class="header-anchor" href="#redis-自学笔记" aria-label="Permalink to &quot;Redis 自学笔记&quot;"></a></h1>
<h2 id="一、redis" tabindex="-1">一、Redis <a class="header-anchor" href="#一、redis" aria-label="Permalink to &quot;一、Redis&quot;"></a></h2>
<blockquote>
<p>Redis官方网站：<a href="https://redis.io/" target="_blank" rel="noreferrer">https://redis.io/</a></p>
</blockquote>
<h3 id="_1-1-redis简介" tabindex="-1">1.1 Redis简介 <a class="header-anchor" href="#_1-1-redis简介" aria-label="Permalink to &quot;1.1 Redis简介&quot;"></a></h3>
<p>Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 它支持多种类型的数据结构，如 字符串（strings）， 散列（hashes）， 列表（lists）， 集合（sets）， 有序集合（sorted sets） 与范围查询， bitmaps， hyperloglogs 和 地理空间（geospatial） 索引半径查询。 Redis 内置了 复制（replication），LUA脚本（Lua scripting）， LRU驱动事件（LRU eviction），事务（transactions） 和不同级别的 磁盘持久化（persistence）， 并通过 Redis哨兵（Sentinel）和自动分区（Cluster）提供高可用性（high availability）。</p>
<h3 id="_1-2、redis下载" tabindex="-1">1.2、Redis下载 <a class="header-anchor" href="#_1-2、redis下载" aria-label="Permalink to &quot;1.2、Redis下载&quot;"></a></h3>
<blockquote>
<p>下载地址：<a href="https://download.redis.io/releases/redis-6.2.5.tar.gz" target="_blank" rel="noreferrer">https://download.redis.io/releases/redis-6.2.5.tar.gz</a></p>
</blockquote>
<p>Linux端下载：</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">wget</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> https://download.redis.io/releases/redis-6.2.5.tar.gz</span></span></code></pre>
</div><h2 id="二、redis安装" tabindex="-1">二、Redis安装 <a class="header-anchor" href="#二、redis安装" aria-label="Permalink to &quot;二、Redis安装&quot;"></a></h2>
<ol>
<li>
<p>解压</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">tar</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -zxvf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> redis-6.2.5.tar.gz</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -C</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> /usr/src</span></span></code></pre>
</div><ul>
<li>tar：Linux打包为tar的命令（-zxvf为解压tar.gz文件）</li>
<li>-C：指定解压目录（编译安装时习惯上源码都解压到<code>/usr/src</code>）</li>
</ul>
</li>
<li>
<p>编译安装</p>
<blockquote>
<p>在源码编译过程中，需要用到make命令，还需要安装c语言环境</p>
</blockquote>
<p>安装make和c语言环境：</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">yum</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> gcc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> gcc-c++</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> make</span></span></code></pre>
</div><p>转到源码所在的目录</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> /usr/src/redis-6.2.5</span></span></code></pre>
</div><p>编译安装</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> PREFIX=/usr/local/redis</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> install</span></span></code></pre>
</div><ul>
<li>make：编译</li>
<li>PREFIX：指定安装目录（编译安装过程中，一般将软件安装到<code>/usr/local</code>目录下）</li>
<li>install：安装</li>
</ul>
</li>
</ol>
<blockquote>
<p>编译安装完成后，源码在<code>/usr/src/redis-6.2.5</code>目录下，安装在<code>/usr/local/redis</code>目录下
如果安装过程中出错，显示找不到某某某.h的文件，可能是你的环境缺少，这时在你安装了环境后重新编译时，可能会报错。</p>
<p>你需要使用<code>make distclean</code>清除之前编译安装生成的文件的重新开始编译安装</p>
</blockquote>
<h2 id="三、配置redis" tabindex="-1">三、配置Redis <a class="header-anchor" href="#三、配置redis" aria-label="Permalink to &quot;三、配置Redis&quot;"></a></h2>
<ol>
<li>
<p>在<code>/usr/local/redis</code>目录下，新建一个etc目录用于存放配置文件<code>redis.conf</code></p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> /usr/local/redis/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> etc</span></span></code></pre>
</div></li>
<li>
<p>将<code>redis.conf</code>拷贝到刚才新建的目录下</p>
<blockquote>
<p>这里可以将原配置文件中的注释和空行全都过滤掉</p>
</blockquote>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> /usr/src/redis-6.2.5/redis.conf</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> grep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> '#'</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> grep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> '^$'</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> ></span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> /usr/local/redis/etc/redis.conf</span></span></code></pre>
</div></li>
<li>
<p>配置Redis使其在启动后后台运行</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> etc/redis.conf</span></span></code></pre>
</div><p>找到<code>daemonize</code>选项将其设置为yes</p>
</li>
</ol>
<h2 id="四、测试redis" tabindex="-1">四、测试Redis <a class="header-anchor" href="#四、测试redis" aria-label="Permalink to &quot;四、测试Redis&quot;"></a></h2>
<h3 id="_4-1-启动redis" tabindex="-1">4.1 启动Redis <a class="header-anchor" href="#_4-1-启动redis" aria-label="Permalink to &quot;4.1 启动Redis&quot;"></a></h3>
<p>在目录下输入./bin/redis-server来使用默认配置启动</p>
<p>如果报错端口被占用</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>Could not create server TCP listening socket *:6379: bind: Address already in use</span></span></code></pre>
</div><p>可以使用<code>lsof -i:6379</code>来查看6379端口的占用情况，在得到程序相关的<code>PID号</code>之后，可以使用<code>kill -9 PID</code>来杀死进程</p>
<p>使用配置文件启动</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">./bin/redis-server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> ./etc/redis.conf</span></span></code></pre>
</div><h3 id="_4-2-连接redis" tabindex="-1">4.2 连接Redis <a class="header-anchor" href="#_4-2-连接redis" aria-label="Permalink to &quot;4.2 连接Redis&quot;"></a></h3>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">./bin/redis-cli</span></span></code></pre>
</div><p>测试：</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">127.0.0.1:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">> </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">ping</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">PONG</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">127.0.0.1:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">> </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">ping</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> mufeng</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">"mufeng"</span></span></code></pre>
</div><blockquote>
<p>至此，Redis的基础安装结束</p>
</blockquote>
<h2 id="五、redis特性" tabindex="-1">五、Redis特性 <a class="header-anchor" href="#五、redis特性" aria-label="Permalink to &quot;五、Redis特性&quot;"></a></h2>
<h3 id="_5-1-redis远程管理软件" tabindex="-1">5.1 Redis远程管理软件 <a class="header-anchor" href="#_5-1-redis远程管理软件" aria-label="Permalink to &quot;5.1 Redis远程管理软件&quot;"></a></h3>
<p>链接地址：<a href="https://github.com/qishibo/AnotherRedisDesktopManager/releases" target="_blank" rel="noreferrer">https://github.com/qishibo/AnotherRedisDesktopManager/releases</a></p>
<p>配置文件修改：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>bind 0.0.0.0		#允许所有网段远程访问，如需多个网段访问，可以用空格隔开</span></span>
<span class="line"><span>protected-mode no	#关闭安全模式</span></span></code></pre>
</div><blockquote>
<p>需要开放防火墙端口</p>
</blockquote>
<h3 id="_5-2-redis配置文件解析" tabindex="-1">5.2 Redis配置文件解析 <a class="header-anchor" href="#_5-2-redis配置文件解析" aria-label="Permalink to &quot;5.2 Redis配置文件解析&quot;"></a></h3>
<p>配置文件解析：<a href="https://www.runoob.com/redis/redis-conf.html" target="_blank" rel="noreferrer">https://www.runoob.com/redis/redis-conf.html</a></p>
<p>基础配置：</p>
<ul>
<li><code>bind 0.0.0.0</code>    允许访问的地址</li>
<li><code>protected-mode no</code>    安全模式，默认打开</li>
<li><code>daemonize yes</code>    是否后台启动，默认为no，为前台启动</li>
<li><code>loglevel notice</code>    日志等级，有四个等级</li>
<li><code>logfile &quot;&quot;</code>     日志文件存储位置，默认在前台运行会输出到控制台，在后台运行会输出到<code>/dev/null</code></li>
<li><code>databases 16</code>    默认有16个数据库，在Redis中，数据库并非严格隔离</li>
<li><code>port 6379</code>    Redis服务的默认端口号为6379</li>
<li><code>requirepass</code></li>
</ul>
<p>tail -f</p>
<h3 id="_5-3-redis持久化策略" tabindex="-1">5.3 Redis持久化策略 <a class="header-anchor" href="#_5-3-redis持久化策略" aria-label="Permalink to &quot;5.3 Redis持久化策略&quot;"></a></h3>
<p>Redis持久化策略可以分为两种</p>
<ul>
<li>RDB快照</li>
<li>AOF策略</li>
</ul>
<h4 id="_5-3-1-rdb内存快照" tabindex="-1">5.3.1 RDB内存快照 <a class="header-anchor" href="#_5-3-1-rdb内存快照" aria-label="Permalink to &quot;5.3.1 RDB内存快照&quot;"></a></h4>
<p>全量快照  会备份全部的数据，但是比较费时</p>
<p>触发方式：</p>
<ol>
<li>
<p><code>save</code>命令    在主线程中使用，不建议使用，会造成阻塞</p>
<p>save会生成一个<code>dump.rdb</code>，下次启动会调取该文件</p>
</li>
<li>
<p><code>bgsave</code>命令    后台创建（folk）一个子进程，专门用于写入rdb文件，避免主线程的阻塞</p>
<p>一般情况下，该命令较快，但是有可能会造成save一样的问题</p>
</li>
<li>
<p>自动触发</p>
</li>
</ol>
<div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>save 3600 1		#在3600秒内有一个key发生变化，则触发一次快照</span></span>
<span class="line"><span>save 300 100	#在300秒内有100个key发生变化，则触发一次快照</span></span>
<span class="line"><span>save 60 1000	#在60秒内有1000个key发生变化，则触发一次快照</span></span></code></pre>
</div><p><code>rdbcompression yes</code> 改配置一定要打开，代表生成RDB文件的时候，会压缩</p>
<h4 id="_5-3-2-aof-append-only-file-策略" tabindex="-1">5.3.2 AOF（Append-only-file）策略 <a class="header-anchor" href="#_5-3-2-aof-append-only-file-策略" aria-label="Permalink to &quot;5.3.2 AOF（Append-only-file）策略&quot;"></a></h4>
<p>这个持久化策略类似于实时日志
在Redis写入数据到数据区之后，会同步将日志（执行的命令）写入到磁盘文件中，生成一个AOF文件
如果服务器挂掉，就会读取这些日志文件，执行所有的历史命令，还原数据</p>
<blockquote>
<p>拓展：传统的数据库（mysql等）生成的日志都是redo（重做）日志</p>
</blockquote>
<p>好处：不会造成阻塞</p>
<p>坏处：</p>
<ol>
<li>在写入数据之后如果服务器挂掉，最后一条执行的命令会丢失</li>
<li>如果一个命令非常长，可能会造成下一个操作阻塞的风险</li>
</ol>
<p>配置：</p>
<ul>
<li>
<p><code>appendonly no</code> AOF策略，默认为关闭</p>
</li>
<li>
<p><code>appendfilename</code> AOF存储路径</p>
</li>
<li>
<p><code>appendfsync everysec</code>  写回策略，默认每一秒写回一次缓冲区的数据</p>
<p>Redis提供了三种写回策略<code>fsync</code>：always，eyerysec，no</p>
<ul>
<li>always  同步写回，每次命令执行完立刻同步。慢速的落盘操作</li>
<li>eyerysec  每一秒写回一次，每个命令执行完毕会将执行的命令写入内存缓冲区</li>
<li>no  并非不写回，而是由操作系统来决定什么时候将缓冲区的内容写回</li>
</ul>
<blockquote>
<p>同步写回可以基本不丢失，但它是慢速的落盘操作，会很大的影响Redis的性能</p>
<p>每秒写回避免了性能开销，但是如果宕机，会造成一秒内的数据丢失</p>
<p>操作系统写回落盘的时机不归Redis的管理，存在极端的情况</p>
</blockquote>
<p><code>综上，一般会选择每秒写回，平衡性能和风险</code></p>
</li>
</ul>
<p><strong>AOF重写机制</strong>（rewrite）：</p>
<p>重写机制可以通过优化，将一些闭环的操作和批量的操作，进行删除和‘多变一’</p>
<p>AOF的重写机制和RDB的写回策略不同，重写机制实际是由主线程folk出的<code>bgrewriteaof</code>子进程进行的</p>
<p><code>“一个拷贝、两处日志”</code></p>
<p><strong>一个拷贝</strong>：每次执行重写时，主线程会folk出子进程，此时folk会把主线程的内存拷贝一份给子进程。然后该子进程就可以在不阻塞主线程的情况下逐一写入重写的日志中</p>
<p><strong>两处日志</strong>：一个是主线程正在操作的AOF文件；另一个是子进程重写的日志文件</p>
<h4 id="_5-3-3-两种持久化策略对比" tabindex="-1">5.3.3 两种持久化策略对比 <a class="header-anchor" href="#_5-3-3-两种持久化策略对比" aria-label="Permalink to &quot;5.3.3 两种持久化策略对比&quot;"></a></h4>
<ol>
<li>
<p>如果同时开启RDB和AOF，那么AOF的<strong>优先级</strong>比较高</p>
</li>
<li>
<p>如果关闭了RDB，在单体的Redis环境中，只会按照AOF的策略进行持久化，但是在集群环境中，哪怕关闭了RDB，在第一次主从数据复制的时候，实际上主从节点会通过一次BGSAVE的全量复制来生成RDB给从节点复制</p>
</li>
<li>
<p>RGB和AOF<strong>优劣对比</strong></p>
<ul>
<li>
<p>恢复速度：RDB存储数据并且经过压缩，所以快于AOF</p>
</li>
<li>
<p>数据安全：</p>
<p>RDB可能会丢失这一次的数据，数据量不一定</p>
<p>AOF是根据写回策略来定义的</p>
</li>
<li>
<p>量级：RDB是一刀切，比较重；AOF是一个追加日志的操作，较为轻量</p>
</li>
</ul>
</li>
</ol>
<h3 id="_5-4-redis的内存回收-淘汰机制" tabindex="-1">5.4 Redis的内存回收/淘汰机制 <a class="header-anchor" href="#_5-4-redis的内存回收-淘汰机制" aria-label="Permalink to &quot;5.4 Redis的内存回收/淘汰机制&quot;"></a></h3>
<h4 id="_5-4-1-内存回收策略" tabindex="-1">5.4.1 内存回收策略 <a class="header-anchor" href="#_5-4-1-内存回收策略" aria-label="Permalink to &quot;5.4.1 内存回收策略&quot;"></a></h4>
<table tabindex="0">
<thead>
<tr>
<th>策略名</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>noevication</td>
<td>默认开启，当内存的使用量达到阈值时，所有的关于内存申请的命令都会直接报错</td>
</tr>
<tr>
<td>allkeys-lru</td>
<td>一种lru算法，从所有的数据集中选取最近最少使用的进行淘汰</td>
</tr>
<tr>
<td>allkeys-random</td>
<td>从所有的数据集中随机选取key删除</td>
</tr>
<tr>
<td>volatile-random</td>
<td>从设置了过期时间的数据集中随机删除一个key</td>
</tr>
<tr>
<td>volatile-ttl</td>
<td>从即将过期的数据中淘汰</td>
</tr>
<tr>
<td>volatile-lru</td>
<td>从已经设置了过期时间的数据集中选取最近最少使用的KV进行淘汰</td>
</tr>
</tbody>
</table>
<h2 id="六、redis常用命令" tabindex="-1">六、Redis常用命令 <a class="header-anchor" href="#六、redis常用命令" aria-label="Permalink to &quot;六、Redis常用命令&quot;"></a></h2>
<p><a href="https://redis.io/commands" target="_blank" rel="noreferrer">https://redis.io/commands</a></p>
<p>Redis主要支持五种数据类型</p>
<ul>
<li>string</li>
<li>list</li>
<li>hash</li>
<li>set</li>
<li>sorted set (zset)</li>
</ul>
<h3 id="_6-1-redis通用指令" tabindex="-1">6.1 Redis通用指令 <a class="header-anchor" href="#_6-1-redis通用指令" aria-label="Permalink to &quot;6.1 Redis通用指令&quot;"></a></h3>
<table tabindex="0">
<thead>
<tr>
<th style="text-align:left">指令</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">DBSIZE</td>
<td style="text-align:left">返回当前库KV数量</td>
</tr>
<tr>
<td style="text-align:left">SET key value</td>
<td style="text-align:left">添加或修改KV</td>
</tr>
<tr>
<td style="text-align:left">GET key</td>
<td style="text-align:left">获取key对应的value</td>
</tr>
<tr>
<td style="text-align:left">DEL key <em>[key ...]</em></td>
<td style="text-align:left">批量删除key</td>
</tr>
<tr>
<td style="text-align:left">TYPE key</td>
<td style="text-align:left">获取key的类型</td>
</tr>
<tr>
<td style="text-align:left">EXISTS key <em>[key ...]</em></td>
<td style="text-align:left">判断key是否存在</td>
</tr>
<tr>
<td style="text-align:left">EXPIRE key seconds</td>
<td style="text-align:left">设置过期时间（单位：秒）</td>
</tr>
<tr>
<td style="text-align:left">TTL key</td>
<td style="text-align:left">查看指定key的过期时间</td>
</tr>
<tr>
<td style="text-align:left">SETNX key value</td>
<td style="text-align:left">典型的<code>乐观锁</code>  将key设置为value<br />    如果key不存在，等用于SET，返回1<br />    如果key存在，就不做操作，返回0</td>
</tr>
<tr>
<td style="text-align:left">SELECT index(0-15)</td>
<td style="text-align:left">选择数据库</td>
</tr>
<tr>
<td style="text-align:left">FLUSHDB <em>[ASYNC/SYNC]</em></td>
<td style="text-align:left">清空本数据库所有的key，选择同步和异步</td>
</tr>
<tr>
<td style="text-align:left">FLUSHALL <em>[ASYNC/SYNC]</em></td>
<td style="text-align:left">清空所有数据库的所有的key，可选同步或异步，默认异步</td>
</tr>
<tr>
<td style="text-align:left">MOVE key db</td>
<td style="text-align:left">移动key到其他DB，如果有相同的key就不会移动</td>
</tr>
<tr>
<td style="text-align:left">RENAME key newkey</td>
<td style="text-align:left">重命名key，如果新key存在，则会删除之前的key</td>
</tr>
<tr>
<td style="text-align:left">RENAMENX key newkey</td>
<td style="text-align:left">重命名，如果存在，则不作操作</td>
</tr>
<tr>
<td style="text-align:left">KEYS pattern</td>
<td style="text-align:left">使用通配符匹配key</td>
</tr>
</tbody>
</table>
<h3 id="_6-2-string类型" tabindex="-1">6.2 String类型 <a class="header-anchor" href="#_6-2-string类型" aria-label="Permalink to &quot;6.2 String类型&quot;"></a></h3>
<p>String类型在Redis中有两种存储方式</p>
<p>String通过int，SDS（Simple Dynamic Static）作为数据结构（支持自增自减）</p>
<p>redis在上<code>sds.h</code>里定义了五种string类型，目的为了节约内存。</p>
<pre><code>sdshdr5（没有被使用），sdshdr8（默认），sdshdr16等
</code></pre>
<p>建议：单个K-V虽然可以支持64位的长度（512M），但是实际项目中最好不要超过100k</p>
<h4 id="相关命令" tabindex="-1">相关命令 <a class="header-anchor" href="#相关命令" aria-label="Permalink to &quot;相关命令&quot;"></a></h4>
<table tabindex="0">
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>APPEND key value</td>
<td>追加到key，返回追加后的长度</td>
</tr>
<tr>
<td>MSET key value <em>[key value ...]</em></td>
<td>通过Redis管道批量写入数据</td>
</tr>
<tr>
<td>MGET key <em>[key ...]</em></td>
<td>通过Redis管道批量读取数据</td>
</tr>
<tr>
<td>INCR key</td>
<td>自增</td>
</tr>
<tr>
<td>DECR key</td>
<td>自减</td>
</tr>
<tr>
<td>INCRBY key increment</td>
<td>以指定步长自增</td>
</tr>
<tr>
<td>DECRBY key increment</td>
<td>以指定步长自减</td>
</tr>
<tr>
<td>INCRBYFLOAT key increment</td>
<td>以指定步长（可以为浮点数）自增 <code>不存在以浮点数自减</code></td>
</tr>
<tr>
<td>STRLEN key</td>
<td>获取key对应的字符串长度</td>
</tr>
<tr>
<td>GETRANGE key start end</td>
<td>以闭区间截取key对应的字符串</td>
</tr>
<tr>
<td>SETRANGE key offset value</td>
<td>把某个区间内的值替换</td>
</tr>
<tr>
<td>SETEX key seconds value</td>
<td>设置key、过期时间、value</td>
</tr>
</tbody>
</table>
<h3 id="_6-3-list类型" tabindex="-1">6.3 List类型 <a class="header-anchor" href="#_6-3-list类型" aria-label="Permalink to &quot;6.3 List类型&quot;"></a></h3>
<p>有序、可重复的列表 <code>QuickList</code> 是一种双向链表，每一个元素都是压缩列表类型</p>
<pre><code>在3.X版本之前使用双向链表`LinkedList`、`ZipList`存数据
</code></pre>
<p>当列表元素个数比较多或单个值比较大时，就不用zipList</p>
<h4 id="相关命令-1" tabindex="-1">相关命令 <a class="header-anchor" href="#相关命令-1" aria-label="Permalink to &quot;相关命令&quot;"></a></h4>
<table tabindex="0">
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>LPUSH key element <em>[element ...]</em></td>
<td>从左压入list，后进的id更小</td>
</tr>
<tr>
<td>RPUSH key element <em>[element ...]</em></td>
<td>从右压入list，先入的di更小</td>
</tr>
<tr>
<td>LPOP key <em>[count]</em></td>
<td>从左弹出list元素，count指定弹出的元素个数</td>
</tr>
<tr>
<td>RPOP key <em>[count]</em></td>
<td>从右弹出list元素，count指定弹出的元素个数</td>
</tr>
<tr>
<td>LINDEX key index</td>
<td>通过索引获取key的值（Lindex代表list的索引，并非left）</td>
</tr>
<tr>
<td>LLEN key</td>
<td>获取list长度</td>
</tr>
<tr>
<td>LRANGE key start stop</td>
<td>区间遍历list（-1代表最后一个元素）</td>
</tr>
<tr>
<td>LSET key index element</td>
<td>通过下标修改元素</td>
</tr>
</tbody>
</table>
<h3 id="_6-4-hash类型" tabindex="-1">6.4 Hash类型 <a class="header-anchor" href="#_6-4-hash类型" aria-label="Permalink to &quot;6.4 Hash类型&quot;"></a></h3>
<p>Filed-value相当于对象的属性名和属性值</p>
<p>在数据结构上Redis提供了两种数据结构</p>
<ol>
<li>数据量较小：ZibList</li>
<li>HashTable</li>
</ol>
<p>在Redis中，Hash表分为三层：<code>dictEntry</code>，<code>dictht</code>，<code>dict</code></p>
<p>先通过<code>murmur</code>算法计算key对应的<code>HashCode</code>，然后根据HashCode取模得到值，对应应该插入到哈希表（Hash Bucket）的位置</p>
<h4 id="相关命令-2" tabindex="-1">相关命令 <a class="header-anchor" href="#相关命令-2" aria-label="Permalink to &quot;相关命令&quot;"></a></h4>
<table tabindex="0">
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>HSET key field value <em>[field value ...]</em></td>
<td>设置hash表中的属性和值，返回新增的个数，如果是修改返回0</td>
</tr>
<tr>
<td>HMSET key field value <em>[field value ...]</em></td>
<td>同上（4.0版本之前不同）</td>
</tr>
<tr>
<td>HGET key field <em>[field ...]</em></td>
<td>获取hash表中属性对应的值</td>
</tr>
<tr>
<td>HMGET key field <em>[field ...]</em></td>
<td>获取hash表中多个属性对应的值</td>
</tr>
<tr>
<td>HLEN key</td>
<td>获取属性的个数</td>
</tr>
<tr>
<td>HGETALL key</td>
<td>获取所有的属性名</td>
</tr>
<tr>
<td>HEXISTS key field</td>
<td>判断某属性是否存在</td>
</tr>
<tr>
<td>HDEL key field <em>[field ...]</em></td>
<td>删除某一个（些）属性，删除所有的属性会删除key</td>
</tr>
<tr>
<td>HKEYS key</td>
<td>返回所有的属性名</td>
</tr>
<tr>
<td>HVALS key</td>
<td>返回所有的属性值</td>
</tr>
<tr>
<td>HINCRBY key field increment</td>
<td>自增某一个属性值（给负数则为自减）</td>
</tr>
<tr>
<td>HSETNX key field value</td>
<td>类比SETNX</td>
</tr>
</tbody>
</table>
<p>如果存储的对象需要经常修改，则建议存储为hash</p>
<p>如果只是存储，建议存储json字符串String</p>
<h3 id="_6-5-set类型" tabindex="-1">6.5 Set类型 <a class="header-anchor" href="#_6-5-set类型" aria-label="Permalink to &quot;6.5 Set类型&quot;"></a></h3>
<p><strong>set</strong>：无序、不重复的集合</p>
<p>单个set最多存储值的上限为2^32-1，在Redis内部使用散列表（hashtable）和intset（数值类型）</p>
<p><strong>散列表中的key永远都是null</strong></p>
<h4 id="相关命令-3" tabindex="-1">相关命令 <a class="header-anchor" href="#相关命令-3" aria-label="Permalink to &quot;相关命令&quot;"></a></h4>
<table tabindex="0">
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>SADD key member <em>[member ...]</em></td>
<td>向集合中批量添加成员</td>
</tr>
<tr>
<td>SREM key member <em>[member ...]</em></td>
<td>批量删除成员</td>
</tr>
<tr>
<td>SMEMBERS key</td>
<td>获取所有的成员</td>
</tr>
<tr>
<td>SPOP key <em>[count]</em></td>
<td>弹出一个成员</td>
</tr>
<tr>
<td>SMOVE source destination member</td>
<td>移动一个成员到其他集合</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="_6-6-sorted-set-zset-类型" tabindex="-1">6.6 sorted set (zset)类型 <a class="header-anchor" href="#_6-6-sorted-set-zset-类型" aria-label="Permalink to &quot;6.6 sorted set (zset)类型&quot;"></a></h3>
<p>底层数据结构：ziplist或者skipList+HashTable</p>
<p>有序集合（ZSet）没有下标，不能重复。它和set区别只是将无序变成了有序。</p>
<h4 id="相关命令-4" tabindex="-1">相关命令 <a class="header-anchor" href="#相关命令-4" aria-label="Permalink to &quot;相关命令&quot;"></a></h4>
<table tabindex="0">
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>ZADD key score member <em>[score member ...]</em></td>
<td>将具有指定分数的所有指定成员添加到一个zset中，也可以修改分数值，返回新增的成员个数</td>
</tr>
<tr>
<td>ZRANGE key min max</td>
<td>返回存储在 的有序集合中指定范围的元素。<br /><code>&lt;min&gt;</code>和<code>&lt;max&gt;</code>参数表示基于零的索引，-1代表最后一个<br /><code>-inf</code>和<code>+inf</code>，分别表示负无穷大和正无穷大</td>
</tr>
<tr>
<td>ZRANGEBYSCORE key min max</td>
<td>这里的<code>&lt;min&gt;</code>和<code>&lt;max&gt;</code>参数表示分数值<br />需使用<code>-inf</code>和<code>+inf</code><br />后边如果跟<code>[WITHSCORES]</code>可以返回分数值</td>
</tr>
<tr>
<td>ZREVRANGE key start stop <em>[WITHSCORES]</em></td>
<td>从大到小排列，rev表示翻转<br />Redis中默认都是从小到大排序，rev表示从大到小排序</td>
</tr>
<tr>
<td>ZREVRANGEBYScore key max min <em>[WITHSCORES]</em></td>
<td>从大到小排序，类比<code>ZRANGEBYSCORE</code>，注意这里是max-min</td>
</tr>
<tr>
<td>ZCARD key</td>
<td>获取有序集合中的成员数量</td>
</tr>
<tr>
<td>ZCOUNT key min max</td>
<td>获取有序集合介于某一范围的成员数量</td>
</tr>
<tr>
<td>ZREM key member <em>[member ...]</em></td>
<td>根据成员名删除成员</td>
</tr>
</tbody>
</table>
<h3 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;"></a></h3>
<ul>
<li>
<p>redis事务</p>
</li>
<li>
<p>发布订阅：不支持消息积累</p>
<p>PUBLISH channel message	发布消息</p>
<p>SUBSCRIBE channel [channel ...]	订阅频道</p>
</li>
<li>
<p>GEO</p>
</li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[XPATH自学笔记]]></title>
            <link>https://www.imufeng.cn/full-stack/other/xpath.html</link>
            <guid>https://www.imufeng.cn/full-stack/other/xpath.html</guid>
            <pubDate>Sat, 05 Oct 2024 12:44:16 GMT</pubDate>
            <description><![CDATA[XPath 是一门在 XML 文档中查找信息的语言，用于在 XML 文档中通过元素和属性进行导航。]]></description>
            <content:encoded><![CDATA[<h1 id="xpath自学笔记" tabindex="-1">XPATH自学笔记 <a class="header-anchor" href="#xpath自学笔记" aria-label="Permalink to &quot;XPATH自学笔记&quot;"></a></h1>
<h2 id="一、xpath简介" tabindex="-1">一、XPath简介 <a class="header-anchor" href="#一、xpath简介" aria-label="Permalink to &quot;一、XPath简介&quot;"></a></h2>
<blockquote>
<p>XPath 是一门在 XML 文档中查找信息的语言。XPath 用于在 XML 文档中通过元素和属性进行导航。</p>
</blockquote>
<ul>
<li>XPath 使用路径表达式在 XML 文档中进行导航</li>
<li>XPath 包含一个标准函数库</li>
<li>XPath 是 XSLT 中的主要元素</li>
<li>XPath 是一个 W3C 标准</li>
</ul>
<h2 id="二、xpath节点" tabindex="-1">二、xpath节点 <a class="header-anchor" href="#二、xpath节点" aria-label="Permalink to &quot;二、xpath节点&quot;"></a></h2>
<blockquote>
<p>在 XPath 中，有七种类型的节点：元素、属性、文本、命名空间、处理指令、注释以及文档节点（或称为根节点）。</p>
<p>xpath文档是被视为节点树来对待的</p>
</blockquote>
<h3 id="_2-1-xpath术语" tabindex="-1">2.1 xpath术语 <a class="header-anchor" href="#_2-1-xpath术语" aria-label="Permalink to &quot;2.1 xpath术语&quot;"></a></h3>
<h4 id="节点-node" tabindex="-1">节点（node） <a class="header-anchor" href="#节点-node" aria-label="Permalink to &quot;节点（node）&quot;"></a></h4>
<div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;?</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">xml</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"1.0"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> encoding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"ISO-8859-1"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">?></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">bookstore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">book</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">title</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"en"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>Harry Potter&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">author</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>J K. Rowling&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">author</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">year</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>2005&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">year</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">price</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>29.99&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">price</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">book</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">bookstore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><p>上面xml文档中的节点示例：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>&#x3C;bookstore> （文档节点）</span></span>
<span class="line"><span>&#x3C;author>J K. Rowling&#x3C;/author> （元素节点）</span></span>
<span class="line"><span>lang="en" （属性节点）</span></span></code></pre>
</div><h4 id="基本值-或称原子值-atomic-value" tabindex="-1">基本值（或称原子值，Atomic value） <a class="header-anchor" href="#基本值-或称原子值-atomic-value" aria-label="Permalink to &quot;基本值（或称原子值，Atomic value）&quot;"></a></h4>
<blockquote>
<p>基本值是无父或无子的节点</p>
</blockquote>
<p>基本值的例子：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>J K. Rowling</span></span>
<span class="line"><span>"en"</span></span></code></pre>
</div><h4 id="项目-item" tabindex="-1">项目（Item） <a class="header-anchor" href="#项目-item" aria-label="Permalink to &quot;项目（Item）&quot;"></a></h4>
<p>项目是基本值或者节点。</p>
<h3 id="_2-2-节点关系" tabindex="-1">2.2 节点关系 <a class="header-anchor" href="#_2-2-节点关系" aria-label="Permalink to &quot;2.2 节点关系&quot;"></a></h3>
<h4 id="父-parent" tabindex="-1">父（Parent） <a class="header-anchor" href="#父-parent" aria-label="Permalink to &quot;父（Parent）&quot;"></a></h4>
<p>每个元素以及属性都有一个父。</p>
<p>在下面的例子中，book 元素是 title、author、year 以及 price 元素的父：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>&#x3C;book></span></span>
<span class="line"><span>  &#x3C;title>Harry Potter&#x3C;/title></span></span>
<span class="line"><span>  &#x3C;author>J K. Rowling&#x3C;/author></span></span>
<span class="line"><span>  &#x3C;year>2005&#x3C;/year></span></span>
<span class="line"><span>  &#x3C;price>29.99&#x3C;/price></span></span>
<span class="line"><span>&#x3C;/book></span></span></code></pre>
</div><h4 id="子-children" tabindex="-1">子（Children） <a class="header-anchor" href="#子-children" aria-label="Permalink to &quot;子（Children）&quot;"></a></h4>
<p>元素节点可有零个、一个或多个子。</p>
<p>在下面的例子中，title、author、year 以及 price 元素都是 book 元素的子：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>&#x3C;book></span></span>
<span class="line"><span>  &#x3C;title>Harry Potter&#x3C;/title></span></span>
<span class="line"><span>  &#x3C;author>J K. Rowling&#x3C;/author></span></span>
<span class="line"><span>  &#x3C;year>2005&#x3C;/year></span></span>
<span class="line"><span>  &#x3C;price>29.99&#x3C;/price></span></span>
<span class="line"><span>&#x3C;/book></span></span></code></pre>
</div><h4 id="同胞-sibling" tabindex="-1">同胞（Sibling） <a class="header-anchor" href="#同胞-sibling" aria-label="Permalink to &quot;同胞（Sibling）&quot;"></a></h4>
<p>拥有相同的父的节点</p>
<p>在下面的例子中，title、author、year 以及 price 元素都是同胞：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>&#x3C;book></span></span>
<span class="line"><span>  &#x3C;title>Harry Potter&#x3C;/title></span></span>
<span class="line"><span>  &#x3C;author>J K. Rowling&#x3C;/author></span></span>
<span class="line"><span>  &#x3C;year>2005&#x3C;/year></span></span>
<span class="line"><span>  &#x3C;price>29.99&#x3C;/price></span></span>
<span class="line"><span>&#x3C;/book></span></span></code></pre>
</div><h4 id="先辈-ancestor" tabindex="-1">先辈（Ancestor） <a class="header-anchor" href="#先辈-ancestor" aria-label="Permalink to &quot;先辈（Ancestor）&quot;"></a></h4>
<p>某节点的父、父的父，等等。</p>
<p>在下面的例子中，title 元素的先辈是 book 元素和 bookstore 元素：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>&#x3C;bookstore></span></span>
<span class="line"><span></span></span>
<span class="line"><span>&#x3C;book></span></span>
<span class="line"><span>  &#x3C;title>Harry Potter&#x3C;/title></span></span>
<span class="line"><span>  &#x3C;author>J K. Rowling&#x3C;/author></span></span>
<span class="line"><span>  &#x3C;year>2005&#x3C;/year></span></span>
<span class="line"><span>  &#x3C;price>29.99&#x3C;/price></span></span>
<span class="line"><span>&#x3C;/book></span></span>
<span class="line"><span></span></span>
<span class="line"><span>&#x3C;/bookstore></span></span></code></pre>
</div><h4 id="后代-descendant" tabindex="-1">后代（Descendant） <a class="header-anchor" href="#后代-descendant" aria-label="Permalink to &quot;后代（Descendant）&quot;"></a></h4>
<p>某个节点的子，子的子，等等。</p>
<p>在下面的例子中，bookstore 的后代是 book、title、author、year 以及 price 元素：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>&#x3C;bookstore></span></span>
<span class="line"><span></span></span>
<span class="line"><span>&#x3C;book></span></span>
<span class="line"><span>  &#x3C;title>Harry Potter&#x3C;/title></span></span>
<span class="line"><span>  &#x3C;author>J K. Rowling&#x3C;/author></span></span>
<span class="line"><span>  &#x3C;year>2005&#x3C;/year></span></span>
<span class="line"><span>  &#x3C;price>29.99&#x3C;/price></span></span>
<span class="line"><span>&#x3C;/book></span></span>
<span class="line"><span></span></span>
<span class="line"><span>&#x3C;/bookstore></span></span></code></pre>
</div><h2 id="三、xpath语法" tabindex="-1">三、xpath语法 <a class="header-anchor" href="#三、xpath语法" aria-label="Permalink to &quot;三、xpath语法&quot;"></a></h2>
<blockquote>
<p>xpath使用路径表达式来选取xml文档中的子节点或节点集，节点是通过沿着路径 (path) 或者步 (steps) 来选取的。</p>
</blockquote>
<h3 id="xml-实例文档" tabindex="-1">XML 实例文档 <a class="header-anchor" href="#xml-实例文档" aria-label="Permalink to &quot;XML 实例文档&quot;"></a></h3>
<p>我们将在下面的例子中使用这个 XML 文档。</p>
<div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;?</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">xml</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"1.0"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> encoding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"ISO-8859-1"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">?></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">bookstore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">book</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">title</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"eng"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>Harry Potter&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">price</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>29.99&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">price</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">book</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">book</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">title</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"eng"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>Learning XML&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">price</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>39.95&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">price</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">book</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">bookstore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><h3 id="_3-1-选取节点" tabindex="-1">3.1 选取节点 <a class="header-anchor" href="#_3-1-选取节点" aria-label="Permalink to &quot;3.1 选取节点&quot;"></a></h3>
<p>XPath 使用路径表达式在 XML 文档中选取节点。节点是通过沿着路径或者 step 来选取的。</p>
<h4 id="下面列出了最有用的路径表达式" tabindex="-1">下面列出了最有用的路径表达式： <a class="header-anchor" href="#下面列出了最有用的路径表达式" aria-label="Permalink to &quot;下面列出了最有用的路径表达式：&quot;"></a></h4>
<table tabindex="0">
<thead>
<tr>
<th style="text-align:center">表达式</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">nodename</td>
<td style="text-align:left">选取此节点的所有子节点。</td>
</tr>
<tr>
<td style="text-align:center">/</td>
<td style="text-align:left">从根节点选取。</td>
</tr>
<tr>
<td style="text-align:center">//</td>
<td style="text-align:left">从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置。</td>
</tr>
<tr>
<td style="text-align:center">.</td>
<td style="text-align:left">选取当前节点。</td>
</tr>
<tr>
<td style="text-align:center">..</td>
<td style="text-align:left">选取当前节点的父节点。</td>
</tr>
<tr>
<td style="text-align:center">@</td>
<td style="text-align:left">选取属性。</td>
</tr>
</tbody>
</table>
<h4 id="实例" tabindex="-1">实例 <a class="header-anchor" href="#实例" aria-label="Permalink to &quot;实例&quot;"></a></h4>
<p>在下面的表格中，我们已列出了一些路径表达式以及表达式的结果：</p>
<table tabindex="0">
<thead>
<tr>
<th style="text-align:center">路径表达式</th>
<th style="text-align:left">结果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">bookstore</td>
<td style="text-align:left">选取 bookstore 元素的所有子节点。</td>
</tr>
<tr>
<td style="text-align:center">/bookstore</td>
<td style="text-align:left">选取根元素 bookstore。注释：假如路径起始于正斜杠( / )，则此路径始终代表到某元素的绝对路径！</td>
</tr>
<tr>
<td style="text-align:center">bookstore/book</td>
<td style="text-align:left">选取属于 bookstore 的子元素的所有 book 元素。</td>
</tr>
<tr>
<td style="text-align:center">//book</td>
<td style="text-align:left">选取所有 book 子元素，而不管它们在文档中的位置。</td>
</tr>
<tr>
<td style="text-align:center">bookstore//book</td>
<td style="text-align:left">选择属于 bookstore 元素的后代的所有 book 元素，而不管它们位于 bookstore 之下的什么位置。</td>
</tr>
<tr>
<td style="text-align:center">//@lang</td>
<td style="text-align:left">选取名为 lang 的所有属性。</td>
</tr>
</tbody>
</table>
<h3 id="_3-2-谓语-predicates" tabindex="-1">3.2 谓语（Predicates） <a class="header-anchor" href="#_3-2-谓语-predicates" aria-label="Permalink to &quot;3.2 谓语（Predicates）&quot;"></a></h3>
<p>谓语用来查找某个特定的节点或者包含某个指定的值的节点。</p>
<p>谓语被嵌在方括号中。</p>
<h4 id="实例-1" tabindex="-1">实例 <a class="header-anchor" href="#实例-1" aria-label="Permalink to &quot;实例&quot;"></a></h4>
<p>在下面的表格中，我们列出了带有谓语的一些路径表达式，以及表达式的结果：</p>
<table tabindex="0">
<thead>
<tr>
<th style="text-align:center">路径表达式</th>
<th style="text-align:left">结果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">/bookstore/book[1]</td>
<td style="text-align:left">选取属于 bookstore 子元素的第一个 book 元素。</td>
</tr>
<tr>
<td style="text-align:center">/bookstore/book[last()]</td>
<td style="text-align:left">选取属于 bookstore 子元素的最后一个 book 元素。</td>
</tr>
<tr>
<td style="text-align:center">/bookstore/book[last()-1]</td>
<td style="text-align:left">选取属于 bookstore 子元素的倒数第二个 book 元素。</td>
</tr>
<tr>
<td style="text-align:center">/bookstore/book[position()❤️]</td>
<td style="text-align:left">选取最前面的两个属于 bookstore 元素的子元素的 book 元素。</td>
</tr>
<tr>
<td style="text-align:center">//title[@lang]</td>
<td style="text-align:left">选取所有拥有名为 lang 的属性的 title 元素。</td>
</tr>
<tr>
<td style="text-align:center">//title[@lang='eng']</td>
<td style="text-align:left">选取所有 title 元素，且这些元素拥有值为 eng 的 lang 属性。</td>
</tr>
<tr>
<td style="text-align:center">/bookstore/book[price&gt;35.00]</td>
<td style="text-align:left">选取 bookstore 元素的所有 book 元素，且其中的 price 元素的值须大于 35.00。</td>
</tr>
<tr>
<td style="text-align:center">/bookstore/book[price&gt;35.00]/title</td>
<td style="text-align:left">选取 bookstore 元素中的 book 元素的所有 title 元素，且其中的 price 元素的值须大于 35.00。</td>
</tr>
</tbody>
</table>
<h3 id="_3-3-选取未知节点" tabindex="-1">3.3 选取未知节点 <a class="header-anchor" href="#_3-3-选取未知节点" aria-label="Permalink to &quot;3.3 选取未知节点&quot;"></a></h3>
<p>XPath 通配符可用来选取未知的 XML 元素。</p>
<table tabindex="0">
<thead>
<tr>
<th style="text-align:left">通配符</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">*</td>
<td style="text-align:left">匹配任何元素节点。</td>
</tr>
<tr>
<td style="text-align:left">@*</td>
<td style="text-align:left">匹配任何属性节点。</td>
</tr>
<tr>
<td style="text-align:left">node()</td>
<td style="text-align:left">匹配任何类型的节点。</td>
</tr>
</tbody>
</table>
<h4 id="实例-2" tabindex="-1">实例 <a class="header-anchor" href="#实例-2" aria-label="Permalink to &quot;实例&quot;"></a></h4>
<p>在下面的表格中，我们列出了一些路径表达式，以及这些表达式的结果：</p>
<table tabindex="0">
<thead>
<tr>
<th style="text-align:left">路径表达式</th>
<th style="text-align:left">结果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">/bookstore/*</td>
<td style="text-align:left">选取 bookstore 元素的所有子元素。</td>
</tr>
<tr>
<td style="text-align:left">//*</td>
<td style="text-align:left">选取文档中的所有元素。</td>
</tr>
<tr>
<td style="text-align:left">//title[@*]</td>
<td style="text-align:left">选取所有带有属性的 title 元素。</td>
</tr>
</tbody>
</table>
<h3 id="_3-4-选取若干路径" tabindex="-1">3.4 选取若干路径 <a class="header-anchor" href="#_3-4-选取若干路径" aria-label="Permalink to &quot;3.4 选取若干路径&quot;"></a></h3>
<p>通过在路径表达式中使用“|”运算符，您可以选取若干个路径。</p>
<h4 id="实例-3" tabindex="-1">实例 <a class="header-anchor" href="#实例-3" aria-label="Permalink to &quot;实例&quot;"></a></h4>
<p>在下面的表格中，我们列出了一些路径表达式，以及这些表达式的结果：</p>
<table tabindex="0">
<thead>
<tr>
<th style="text-align:left">路径表达式</th>
<th style="text-align:left">结果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">//book/title | //book/price</td>
<td style="text-align:left">选取 book 元素的所有 title 和 price 元素。</td>
</tr>
<tr>
<td style="text-align:left">//title | //price</td>
<td style="text-align:left">选取文档中的所有 title 和 price 元素。</td>
</tr>
<tr>
<td style="text-align:left">/bookstore/book/title | //price</td>
<td style="text-align:left">选取属于 bookstore 元素的 book 元素的所有 title 元素，以及文档中所有的 price 元素。</td>
</tr>
</tbody>
</table>
<h2 id="四、xpath-axes-轴" tabindex="-1">四、XPath Axes（轴） <a class="header-anchor" href="#四、xpath-axes-轴" aria-label="Permalink to &quot;四、XPath Axes（轴）&quot;"></a></h2>
<h3 id="xml-实例文档-1" tabindex="-1">XML 实例文档 <a class="header-anchor" href="#xml-实例文档-1" aria-label="Permalink to &quot;XML 实例文档&quot;"></a></h3>
<blockquote>
<p>我们将在下面的例子中使用此 XML 文档：</p>
</blockquote>
<div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;?</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">xml</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"1.0"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> encoding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"ISO-8859-1"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">?></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">bookstore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">book</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">title</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"eng"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>Harry Potter&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">price</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>29.99&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">price</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">book</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">book</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">title</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"eng"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>Learning XML&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">price</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>39.95&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">price</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">book</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">bookstore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><h3 id="xpath-轴" tabindex="-1">XPath 轴 <a class="header-anchor" href="#xpath-轴" aria-label="Permalink to &quot;XPath 轴&quot;"></a></h3>
<blockquote>
<p>轴可定义相对于当前节点的节点集。</p>
</blockquote>
<table tabindex="0">
<thead>
<tr>
<th style="text-align:center">轴名称</th>
<th style="text-align:left">结果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">ancestor</td>
<td style="text-align:left">选取当前节点的所有先辈（父、祖父等）。</td>
</tr>
<tr>
<td style="text-align:center">ancestor-or-self</td>
<td style="text-align:left">选取当前节点的所有先辈（父、祖父等）以及当前节点本身。</td>
</tr>
<tr>
<td style="text-align:center">attribute</td>
<td style="text-align:left">选取当前节点的所有属性。</td>
</tr>
<tr>
<td style="text-align:center">child</td>
<td style="text-align:left">选取当前节点的所有子元素。</td>
</tr>
<tr>
<td style="text-align:center">descendant</td>
<td style="text-align:left">选取当前节点的所有后代元素（子、孙等）。</td>
</tr>
<tr>
<td style="text-align:center">descendant-or-self</td>
<td style="text-align:left">选取当前节点的所有后代元素（子、孙等）以及当前节点本身。</td>
</tr>
<tr>
<td style="text-align:center">following</td>
<td style="text-align:left">选取文档中当前节点的结束标签之后的所有节点。</td>
</tr>
<tr>
<td style="text-align:center">namespace</td>
<td style="text-align:left">选取当前节点的所有命名空间节点。</td>
</tr>
<tr>
<td style="text-align:center">parent</td>
<td style="text-align:left">选取当前节点的父节点。</td>
</tr>
<tr>
<td style="text-align:center">preceding</td>
<td style="text-align:left">选取文档中当前节点的开始标签之前的所有节点。</td>
</tr>
<tr>
<td style="text-align:center">preceding-sibling</td>
<td style="text-align:left">选取当前节点之前的所有同级节点。</td>
</tr>
<tr>
<td style="text-align:center">self</td>
<td style="text-align:left">选取当前节点。</td>
</tr>
</tbody>
</table>
<h3 id="位置路径表达式" tabindex="-1">位置路径表达式 <a class="header-anchor" href="#位置路径表达式" aria-label="Permalink to &quot;位置路径表达式&quot;"></a></h3>
<p>位置路径可以是绝对的，也可以是相对的。</p>
<p>绝对路径起始于正斜杠( / )，而相对路径不会这样。在两种情况中，位置路径均包括一个或多个步，每个步均被斜杠分割：</p>
<h4 id="绝对位置路径" tabindex="-1">绝对位置路径： <a class="header-anchor" href="#绝对位置路径" aria-label="Permalink to &quot;绝对位置路径：&quot;"></a></h4>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>/step/step/...</span></span></code></pre>
</div><h4 id="相对位置路径" tabindex="-1">相对位置路径： <a class="header-anchor" href="#相对位置路径" aria-label="Permalink to &quot;相对位置路径：&quot;"></a></h4>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>step/step/...</span></span></code></pre>
</div><p>每个步均根据当前节点集之中的节点来进行计算。</p>
<h4 id="步-step-包括" tabindex="-1">步（step）包括： <a class="header-anchor" href="#步-step-包括" aria-label="Permalink to &quot;步（step）包括：&quot;"></a></h4>
<ul>
<li>
<p>轴（axis）</p>
<blockquote>
<p>定义所选节点与当前节点之间的树关系</p>
</blockquote>
</li>
<li>
<p>节点测试（node-test）</p>
<blockquote>
<p>识别某个轴内部的节点</p>
</blockquote>
</li>
<li>
<p>零个或者更多谓语（predicate）</p>
<blockquote>
<p>更深入地提炼所选的节点集</p>
</blockquote>
</li>
</ul>
<h4 id="步的语法" tabindex="-1">步的语法： <a class="header-anchor" href="#步的语法" aria-label="Permalink to &quot;步的语法：&quot;"></a></h4>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>轴名称::节点测试[谓语]</span></span></code></pre>
</div><h4 id="实例-4" tabindex="-1">实例 <a class="header-anchor" href="#实例-4" aria-label="Permalink to &quot;实例&quot;"></a></h4>
<table tabindex="0">
<thead>
<tr>
<th style="text-align:center">例子</th>
<th style="text-align:left">结果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">child::book</td>
<td style="text-align:left">选取所有属于当前节点的子元素的 book 节点。</td>
</tr>
<tr>
<td style="text-align:center">attribute::lang</td>
<td style="text-align:left">选取当前节点的 lang 属性。</td>
</tr>
<tr>
<td style="text-align:center">child:😗</td>
<td style="text-align:left">选取当前节点的所有子元素。</td>
</tr>
<tr>
<td style="text-align:center">attribute:😗</td>
<td style="text-align:left">选取当前节点的所有属性。</td>
</tr>
<tr>
<td style="text-align:center">child::text()</td>
<td style="text-align:left">选取当前节点的所有文本子节点。</td>
</tr>
<tr>
<td style="text-align:center">child::node()</td>
<td style="text-align:left">选取当前节点的所有子节点。</td>
</tr>
<tr>
<td style="text-align:center">descendant::book</td>
<td style="text-align:left">选取当前节点的所有 book 后代。</td>
</tr>
<tr>
<td style="text-align:center">ancestor::book</td>
<td style="text-align:left">选择当前节点的所有 book 先辈。</td>
</tr>
<tr>
<td style="text-align:center">ancestor-or-self::book</td>
<td style="text-align:left">选取当前节点的所有 book 先辈以及当前节点（如果此节点是 book 节点）</td>
</tr>
<tr>
<td style="text-align:center">child:😗/child::price</td>
<td style="text-align:left">选取当前节点的所有 price 孙节点。</td>
</tr>
</tbody>
</table>
<h2 id="五、xpath-运算符" tabindex="-1">五、XPath 运算符 <a class="header-anchor" href="#五、xpath-运算符" aria-label="Permalink to &quot;五、XPath 运算符&quot;"></a></h2>
<blockquote>
<p>XPath 表达式可返回节点集、字符串、逻辑值以及数字。</p>
</blockquote>
<h3 id="xpath-运算符" tabindex="-1">XPath 运算符 <a class="header-anchor" href="#xpath-运算符" aria-label="Permalink to &quot;XPath 运算符&quot;"></a></h3>
<blockquote>
<p>下面列出了可用在 XPath 表达式中的运算符：</p>
</blockquote>
<table tabindex="0">
<thead>
<tr>
<th style="text-align:left">运算符</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">实例</th>
<th style="text-align:left">返回值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">|</td>
<td style="text-align:left">计算两个节点集</td>
<td style="text-align:left">//book | //cd</td>
<td style="text-align:left">返回所有拥有 book 和 cd 元素的节点集</td>
</tr>
<tr>
<td style="text-align:left">+</td>
<td style="text-align:left">加法</td>
<td style="text-align:left">6 + 4</td>
<td style="text-align:left">10</td>
</tr>
<tr>
<td style="text-align:left">-</td>
<td style="text-align:left">减法</td>
<td style="text-align:left">6 - 4</td>
<td style="text-align:left">2</td>
</tr>
<tr>
<td style="text-align:left">*</td>
<td style="text-align:left">乘法</td>
<td style="text-align:left">6 * 4</td>
<td style="text-align:left">24</td>
</tr>
<tr>
<td style="text-align:left">div</td>
<td style="text-align:left">除法</td>
<td style="text-align:left">8 div 4</td>
<td style="text-align:left">2</td>
</tr>
<tr>
<td style="text-align:left">=</td>
<td style="text-align:left">等于</td>
<td style="text-align:left">price=9.80</td>
<td style="text-align:left">如果 price 是 9.80，则返回 true。如果 price 是 9.90，则返回 false。</td>
</tr>
<tr>
<td style="text-align:left">!=</td>
<td style="text-align:left">不等于</td>
<td style="text-align:left">price!=9.80</td>
<td style="text-align:left">如果 price 是 9.90，则返回 true。如果 price 是 9.80，则返回 false。</td>
</tr>
<tr>
<td style="text-align:left">&lt;</td>
<td style="text-align:left">小于</td>
<td style="text-align:left">price&lt;9.80</td>
<td style="text-align:left">如果 price 是 9.00，则返回 true。如果 price 是 9.90，则返回 false。</td>
</tr>
<tr>
<td style="text-align:left">&lt;=</td>
<td style="text-align:left">小于或等于</td>
<td style="text-align:left">price&lt;=9.80</td>
<td style="text-align:left">如果 price 是 9.00，则返回 true。如果 price 是 9.90，则返回 false。</td>
</tr>
<tr>
<td style="text-align:left">&gt;</td>
<td style="text-align:left">大于</td>
<td style="text-align:left">price&gt;9.80</td>
<td style="text-align:left">如果 price 是 9.90，则返回 true。如果 price 是 9.80，则返回 false。</td>
</tr>
<tr>
<td style="text-align:left">&gt;=</td>
<td style="text-align:left">大于或等于</td>
<td style="text-align:left">price&gt;=9.80</td>
<td style="text-align:left">如果 price 是 9.90，则返回 true。如果 price 是 9.70，则返回 false。</td>
</tr>
<tr>
<td style="text-align:left">or</td>
<td style="text-align:left">或</td>
<td style="text-align:left">price=9.80 or price=9.70</td>
<td style="text-align:left">如果 price 是 9.80，则返回 true。如果 price 是 9.50，则返回 false。</td>
</tr>
<tr>
<td style="text-align:left">and</td>
<td style="text-align:left">与</td>
<td style="text-align:left">price&gt;9.00 and price&lt;9.90</td>
<td style="text-align:left">如果 price 是 9.80，则返回 true。如果 price 是 8.50，则返回 false。</td>
</tr>
<tr>
<td style="text-align:left">mod</td>
<td style="text-align:left">计算除法的余数</td>
<td style="text-align:left">5 mod 2</td>
<td style="text-align:left">1</td>
</tr>
</tbody>
</table>
<h2 id="六、xpath-实例" tabindex="-1">六、XPath 实例 <a class="header-anchor" href="#六、xpath-实例" aria-label="Permalink to &quot;六、XPath 实例&quot;"></a></h2>
<p><strong>在本节，让我们通过实例来学习一些基础的 XPath 语法。</strong></p>
<h3 id="xml实例文档" tabindex="-1">XML实例文档 <a class="header-anchor" href="#xml实例文档" aria-label="Permalink to &quot;XML实例文档&quot;"></a></h3>
<blockquote>
<p>我们将在下面的例子中使用这个 XML 文档：</p>
</blockquote>
<h4 id="books-xml" tabindex="-1">&quot;books.xml&quot; : <a class="header-anchor" href="#books-xml" aria-label="Permalink to &quot;&quot;books.xml&quot; :&quot;"></a></h4>
<div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;?</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">xml</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"1.0"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> encoding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"ISO-8859-1"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">?></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">bookstore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">book</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> category</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"COOKING"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">title</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"en"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>Everyday Italian&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">author</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>Giada De Laurentiis&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">author</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">year</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>2005&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">year</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">price</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>30.00&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">price</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">book</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">book</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> category</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"CHILDREN"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">title</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"en"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>Harry Potter&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">author</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>J K. Rowling&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">author</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">year</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>2005&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">year</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">price</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>29.99&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">price</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">book</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">book</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> category</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"WEB"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">title</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"en"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>XQuery Kick Start&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">author</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>James McGovern&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">author</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">author</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>Per Bothner&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">author</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">author</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>Kurt Cagle&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">author</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">author</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>James Linn&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">author</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">author</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>Vaidyanathan Nagarajan&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">author</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">year</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>2003&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">year</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">price</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>49.99&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">price</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">book</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">book</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> category</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"WEB"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">title</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"en"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>Learning XML&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">author</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>Erik T. Ray&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">author</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">year</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>2003&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">year</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">price</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>39.95&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">price</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">book</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">bookstore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><h3 id="加载-xml-文档" tabindex="-1">加载 XML 文档 <a class="header-anchor" href="#加载-xml-文档" aria-label="Permalink to &quot;加载 XML 文档&quot;"></a></h3>
<p>所有现代浏览器都支持使用 XMLHttpRequest 来加载 XML 文档的方法。</p>
<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> xmlhttp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> XMLHttpRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span></code></pre>
</div><h3 id="选取节点" tabindex="-1">选取节点 <a class="header-anchor" href="#选取节点" aria-label="Permalink to &quot;选取节点&quot;"></a></h3>
<p>主流浏览器都支持使用 evaluate() 方法从 XML 文档中选取节点：</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">xmlDoc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">evaluate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(xpath, xmlDoc, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, XPathResult.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">ANY_TYPE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span></code></pre>
</div><h3 id="选取所有-title" tabindex="-1">选取所有 title <a class="header-anchor" href="#选取所有-title" aria-label="Permalink to &quot;选取所有 title&quot;"></a></h3>
<p>下面的例子选取所有 title 节点：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>/bookstore/book/title</span></span></code></pre>
</div><h3 id="选取第一个-book-的-title" tabindex="-1">选取第一个 book 的 title <a class="header-anchor" href="#选取第一个-book-的-title" aria-label="Permalink to &quot;选取第一个 book 的 title&quot;"></a></h3>
<p>下面的例子选取 bookstore 元素下面的第一个 book 节点的 title：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>/bookstore/book[1]/title</span></span></code></pre>
</div><h3 id="选取所有价格" tabindex="-1">选取所有价格 <a class="header-anchor" href="#选取所有价格" aria-label="Permalink to &quot;选取所有价格&quot;"></a></h3>
<p>下面的例子选取 price 节点中的所有文本：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>/bookstore/book/price/text()</span></span></code></pre>
</div><h3 id="选取价格高于-35-的-price-节点" tabindex="-1">选取价格高于 35 的 price 节点 <a class="header-anchor" href="#选取价格高于-35-的-price-节点" aria-label="Permalink to &quot;选取价格高于 35 的 price 节点&quot;"></a></h3>
<p>下面的例子选取价格高于 35 的所有 price 节点：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>/bookstore/book[price>35]/price</span></span></code></pre>
</div><h3 id="选取价格高于-35-的-title-节点" tabindex="-1">选取价格高于 35 的 title 节点 <a class="header-anchor" href="#选取价格高于-35-的-title-节点" aria-label="Permalink to &quot;选取价格高于 35 的 title 节点&quot;"></a></h3>
<p>下面的例子选取价格高于 35 的所有 title 节点：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>/bookstore/book[price>35]/title</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Rust]]></title>
            <link>https://www.imufeng.cn/full-stack/rust/</link>
            <guid>https://www.imufeng.cn/full-stack/rust/</guid>
            <pubDate>Sat, 05 Oct 2024 12:44:16 GMT</pubDate>
            <description><![CDATA[Rust
 目录]]></description>
            <content:encoded><![CDATA[<h1 id="rust" tabindex="-1">Rust <a class="header-anchor" href="#rust" aria-label="Permalink to &quot;Rust&quot;"></a></h1>
<h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;"></a></h2>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[每日一题]]></title>
            <link>https://www.imufeng.cn/interview/question-by-day/</link>
            <guid>https://www.imufeng.cn/interview/question-by-day/</guid>
            <pubDate>Sat, 05 Oct 2024 12:44:16 GMT</pubDate>
            <description><![CDATA[每天至少一道全栈题目分享，范围不限。]]></description>
            <content:encoded><![CDATA[<h1 id="每日一题" tabindex="-1">每日一题 <a class="header-anchor" href="#每日一题" aria-label="Permalink to &quot;每日一题&quot;"></a></h1>
<blockquote>
<p>每日一题从 <code>2023年09月27日</code> 开始记录，不限分类，欢迎留言监督。</p>
</blockquote>
<ul>
<li><a href="./2023/">2023</a></li>
<li><a href="./2024/">2024</a></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[目录]]></title>
            <link>https://www.imufeng.cn/interview/skills/</link>
            <guid>https://www.imufeng.cn/interview/skills/</guid>
            <pubDate>Sat, 05 Oct 2024 12:44:16 GMT</pubDate>
            <description><![CDATA[目录]]></description>
            <content:encoded><![CDATA[<h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;"></a></h2>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[生活随笔]]></title>
            <link>https://www.imufeng.cn/notes/life-notes/</link>
            <guid>https://www.imufeng.cn/notes/life-notes/</guid>
            <pubDate>Sat, 05 Oct 2024 12:44:16 GMT</pubDate>
            <description><![CDATA[生活随笔
 目录]]></description>
            <content:encoded><![CDATA[<h1 id="生活随笔" tabindex="-1">生活随笔 <a class="header-anchor" href="#生活随笔" aria-label="Permalink to &quot;生活随笔&quot;"></a></h1>
<h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;"></a></h2>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[读书笔记]]></title>
            <link>https://www.imufeng.cn/notes/reading-notes/</link>
            <guid>https://www.imufeng.cn/notes/reading-notes/</guid>
            <pubDate>Sat, 05 Oct 2024 12:44:16 GMT</pubDate>
            <description><![CDATA[读书笔记
 目录]]></description>
            <content:encoded><![CDATA[<h1 id="读书笔记" tabindex="-1">读书笔记 <a class="header-anchor" href="#读书笔记" aria-label="Permalink to &quot;读书笔记&quot;"></a></h1>
<h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;"></a></h2>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[科技周报]]></title>
            <link>https://www.imufeng.cn/notes/technology-weekly/</link>
            <guid>https://www.imufeng.cn/notes/technology-weekly/</guid>
            <pubDate>Sat, 05 Oct 2024 12:44:16 GMT</pubDate>
            <description><![CDATA[科技周报
 目录]]></description>
            <content:encoded><![CDATA[<h1 id="科技周报" tabindex="-1">科技周报 <a class="header-anchor" href="#科技周报" aria-label="Permalink to &quot;科技周报&quot;"></a></h1>
<h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;"></a></h2>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[泛域名证书申请以及部署]]></title>
            <link>https://www.imufeng.cn/training/linux/acme-sh.html</link>
            <guid>https://www.imufeng.cn/training/linux/acme-sh.html</guid>
            <pubDate>Sat, 05 Oct 2024 12:44:16 GMT</pubDate>
            <description><![CDATA[使用 acme.sh 部署 Let's Encrypt 泛域名证书。]]></description>
            <content:encoded><![CDATA[<h1 id="泛域名证书申请以及部署" tabindex="-1">泛域名证书申请以及部署 <a class="header-anchor" href="#泛域名证书申请以及部署" aria-label="Permalink to &quot;泛域名证书申请以及部署&quot;"></a></h1>
<blockquote>
<p>由于目前所有的域名服务商对于免费CA证书仅提供由<code>digicert</code>机构颁发的，只允许有20个子域名且不支持泛子域名。故使用 <code>Let's Encrypt</code> 的SSL证书</p>
</blockquote>
<p>Let’s Encrypt 是一个证书颁发机构，向 Let’s Encrypt 申请证书是免费的。Let's Encrypt 支持泛域名证书，不需要为每个子域名单独申请证书。</p>
<h2 id="一、acme-sh部署工具" tabindex="-1">一、<code>acme.sh</code>部署工具 <a class="header-anchor" href="#一、acme-sh部署工具" aria-label="Permalink to &quot;一、`acme.sh`部署工具&quot;"></a></h2>
<p>根据 <code>acme.sh</code> [中文说明](<a href="https://github.com/acmesh-official/acme.sh/wiki/%E8%AF%B4%E6%98%8E" target="_blank" rel="noreferrer">说明 · acmesh-official/acme.sh Wiki (github.com)</a>)，<code>acme.sh</code> 实现了 <code>acme</code> 协议, 可以从 <code>let‘s encrypt</code> 生成免费的证书。</p>
<ol>
<li>
<p>其安装只需要执行以下命令，所有用户均可安装：</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">curl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> https://get.acme.sh</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> email=my@example.com</span></span></code></pre>
</div></li>
<li>
<p>该工具将会安装在 <code>~/.acme.sh/</code>  目录下。</p>
</li>
</ol>
<h2 id="二、生成证书" tabindex="-1">二、生成证书 <a class="header-anchor" href="#二、生成证书" aria-label="Permalink to &quot;二、生成证书&quot;"></a></h2>
<p><code>acme.sh</code> 实现了 <strong><code>acme</code></strong> 协议支持的所有验证协议. 一般有两种方式验证: http 和 dns 验证.</p>
<h3 id="_2-1-http-方式" tabindex="-1">2.1 http 方式 <a class="header-anchor" href="#_2-1-http-方式" aria-label="Permalink to &quot;2.1 http 方式&quot;"></a></h3>
<p>http方式需要在该网站根目录放置一个文件来验证域名所有权。</p>
<p>可以执行以下命令生成：</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">acme.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> --issue</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> mydomain.com</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> www.mydomain.com</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> --webroot</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> /home/wwwroot/mydomain.com/</span></span></code></pre>
</div><p>如果你使用apache或者nginx服务，执行以下命令会自动识别并完成验证，完成后还将为你删除文件，做到用户无感验证。</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">acme.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> --issue</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> mydomain.com</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> --apache/nginx</span></span></code></pre>
</div><p>如果你的服务器80端口是空闲的，<code>acme.sh</code>还将自动配置一个webserver，监听80端口并自动完成配置。</p>
<h3 id="_2-2-dns-方式" tabindex="-1">2.2 DNS 方式 <a class="header-anchor" href="#_2-2-dns-方式" aria-label="Permalink to &quot;2.2 DNS 方式&quot;"></a></h3>
<p>DNS方式只需要在配置DNS解析记录即可，且TXT的解析记录对你的服务不会产生影响。</p>
<p>执行以下命令，按照提示配置DNS解析记录即可：</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">acme.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> --issue</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> --dns</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> mydomain.com</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> \</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> --yes-I-know-dns-manual-mode-enough-go-ahead-please</span></span></code></pre>
</div><p>解析完成后，执行以下命令来完成验证并重新生成证书：</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">acme.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> --renew</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> mydomain.com</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> \</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  --yes-I-know-dns-manual-mode-enough-go-ahead-please</span></span></code></pre>
</div><blockquote>
<p>注意：若没有配置Automatic DNS API，该方法将无法自动更新你的域名证书。</p>
</blockquote>
<h3 id="_2-3-dns进阶版" tabindex="-1">2.3 DNS进阶版 <a class="header-anchor" href="#_2-3-dns进阶版" aria-label="Permalink to &quot;2.3 DNS进阶版&quot;"></a></h3>
<p>DNS方式还支持使用域名解析商提供的接口自动进行配置。以阿里云为例：</p>
<p>首先将阿里云的阿里云 API 的密钥以以下格式配置到环境变量：</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"># 腾讯云dnspod</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> DP_Id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"XXXXXXXXXX"</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> DP_Key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"XXXXXXXXXX"</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"># 阿里云</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Ali_Key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"XXXXXXXXXX"</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Ali_Secret</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"XXXXXXXXXX“</span></span></code></pre>
</div><p>然后就可以通过以下命令生成证书：</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"># 腾讯云</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">acme.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> --issue</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> --dns</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> dns_dp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> example.com</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> *</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">.example.com</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"># 阿里云</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">acme.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> --issue</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> --dns</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> dns_ali</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> example.com</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> *</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">.example.com</span></span></code></pre>
</div><h2 id="三、安装配置证书" tabindex="-1">三、安装配置证书 <a class="header-anchor" href="#三、安装配置证书" aria-label="Permalink to &quot;三、安装配置证书&quot;"></a></h2>
<p>此处以Podman Nginx容器配置证书举例。</p>
<h3 id="_3-1-生成nginx配置" tabindex="-1">3.1 生成Nginx配置 <a class="header-anchor" href="#_3-1-生成nginx配置" aria-label="Permalink to &quot;3.1 生成Nginx配置&quot;"></a></h3>
<p>NGINX配置文件可以使用[NGINXCONF.IO](<a href="https://www.digitalocean.com/community/tools/nginx?global.app.lang=zhCN" target="_blank" rel="noreferrer">NGINXConfig | DigitalOcean</a>)配置。页面为中文且较为友好。</p>
<h3 id="_3-2-生成-dhparam-pem" tabindex="-1">3.2 生成 dhparam.pem <a class="header-anchor" href="#_3-2-生成-dhparam-pem" aria-label="Permalink to &quot;3.2 生成 dhparam.pem&quot;"></a></h3>
<p>openssl dhparam用于生成和管理dh文件。dh(Diffie-Hellman)是著名的密钥交换协议，或称为密钥协商协议，它可以保证通信双方安全地交换密钥。但注意，它不是加密算法，所以不提供加密功能，仅仅只是保护密钥交换的过程。在openvpn中就使用了该交换协议。</p>
<p>执行以下命令即可生成：</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> dhparam</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -out</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> ~/dhparam.pem</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 2048</span></span></code></pre>
</div><p>如果你使用上面提供的NGINXCONFIG.IO生成了配置文件，此处配置在nginx.conf文件中：</p>
<div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"># Diffie-Hellman parameter for DHE ciphersuites                                         </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">ssl_dhparam /etc/nginx/dhparam.pem</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">;</span></span></code></pre>
</div><h3 id="_3-3-自动更新证书" tabindex="-1">3.3 自动更新证书 <a class="header-anchor" href="#_3-3-自动更新证书" aria-label="Permalink to &quot;3.3 自动更新证书&quot;"></a></h3>
<p>以下为podman Nginx容器自动更新证书的命令：</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">/.acme.sh/acme.sh --install-cert </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\ </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">-d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> example.com</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> \ </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">--key-file</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> /etc/nginx/ssl/example.com.key</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> \ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">#</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 私钥地址</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">--fullchain-file</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> /etc/nginx/ssl/example.com.cer</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  \ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">#</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 公钥地址</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">--reloadcmd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "podman exec -it nginx nginx force-reload"</span></span></code></pre>
</div><blockquote>
<p>注意：<code>nginx reload</code> 命令并不会更新证书，需要使用 <code>nginx force-reload</code></p>
</blockquote>
<h2 id="四、查看已安装证书信息" tabindex="-1">四、查看已安装证书信息 <a class="header-anchor" href="#四、查看已安装证书信息" aria-label="Permalink to &quot;四、查看已安装证书信息&quot;"></a></h2>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">acme.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> --info</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> example.com</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"># 会输出如下内容：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">DOMAIN_CONF</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">/root/.acme.sh/example.com/example.com.conf</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Le_Domain</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">example.com</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Le_Alt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">no</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Le_Webroot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">dns_ali</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Le_PreHook</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Le_PostHook</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Le_RenewHook</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Le_API</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">https://acme-v02.api.letsencrypt.org/directory</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Le_Keylength</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Le_OrderFinalize</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">https://acme-v02.api.letsencrypt.org/acme/finalize/23xxxx150/781xxxx4310</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Le_LinkOrder</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">https://acme-v02.api.letsencrypt.org/acme/order/233xxx150/781xxxx4310</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Le_LinkCert</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">https://acme-v02.api.letsencrypt.org/acme/cert/04cbd28xxxxxx349ecaea8d07</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Le_CertCreateTime</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">1649358725</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Le_CertCreateTimeStr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">Thu</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Apr</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  7</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 19:12:05</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> UTC</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 2022</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Le_NextRenewTimeStr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">Mon</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Jun</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  6</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 19:12:05</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> UTC</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 2022</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Le_NextRenewTime</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">1654456325</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Le_RealCertPath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Le_RealCACertPath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Le_RealKeyPath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">/etc/acme/example.com/privkey.pem</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Le_ReloadCmd</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">service</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> nginx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> force-reload</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Le_RealFullChainPath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">/etc/acme/example.com/chain.pem</span></span></code></pre>
</div><h2 id="五、更新证书" tabindex="-1">五、更新证书 <a class="header-anchor" href="#五、更新证书" aria-label="Permalink to &quot;五、更新证书&quot;"></a></h2>
<p>目前证书在 60 天以后会自动更新，使用crontab 工具。无需任何操作。</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">crontab</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  -l</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">56</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> *</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "/root/.acme.sh"/acme.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> --cron</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> --home</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "/root/.acme.sh"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> ></span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> /dev/null</span></span></code></pre>
</div><h2 id="六、修改reloadcmd" tabindex="-1">六、修改ReloadCmd <a class="header-anchor" href="#六、修改reloadcmd" aria-label="Permalink to &quot;六、修改ReloadCmd&quot;"></a></h2>
<p>根据官网的说法，不建议直接修改<code>example.conf</code>文件来达到修改ReloadCmd的目的，且目前修改<code>ReloadCmd</code>没有专门的命令，可以通过重新安装证书来修改。</p>
<h2 id="七、更新-acme-sh" tabindex="-1">七、更新 acme.sh <a class="header-anchor" href="#七、更新-acme-sh" aria-label="Permalink to &quot;七、更新 acme.sh&quot;"></a></h2>
<p>升级 acme.sh 到最新版 :</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">acme.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> --upgrade</span></span></code></pre>
</div><p>如果你不想手动升级, 可以开启自动升级:</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">acme.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> --upgrade</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> --auto-upgrade</span></span></code></pre>
</div><p>之后, acme.sh 就会自动保持更新了.</p>
<p>你也可以随时关闭自动更新:</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">acme.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> --upgrade</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> --auto-upgrade</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  0</span></span></code></pre>
</div><h2 id="参考链接" tabindex="-1">参考链接 <a class="header-anchor" href="#参考链接" aria-label="Permalink to &quot;参考链接&quot;"></a></h2>
<ul>
<li>
<p><a href="https://github.com/acmesh-official/acme.sh/wiki/%E8%AF%B4%E6%98%8E" target="_blank" rel="noreferrer">acme.sh中文文档  (github.com)</a></p>
</li>
<li>
<p><a href="https://zhuanlan.zhihu.com/p/445852299" target="_blank" rel="noreferrer">Let's Encrypt SSL 泛域名证书申请和配置 - 知乎 (zhihu.com)</a></p>
</li>
<li>
<p><a href="https://github.com/acmesh-official/acme.sh/issues/1439" target="_blank" rel="noreferrer">acme.sh · Issue #1439 · (github.com)</a></p>
</li>
<li>
<p><a href="https://www.digitalocean.com/community/tools/nginx?global.app.lang=zhCN" target="_blank" rel="noreferrer">NGINXConfig | DigitalOcean</a></p>
</li>
<li>
<p><a href="https://www.cnblogs.com/f-ck-need-u/p/7103791.html" target="_blank" rel="noreferrer">openssl dhparam(密钥交换) - 骏马金龙 - 博客园 (cnblogs.com)</a></p>
</li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Linux 企业级运维]]></title>
            <link>https://www.imufeng.cn/training/linux/</link>
            <guid>https://www.imufeng.cn/training/linux/</guid>
            <pubDate>Sat, 05 Oct 2024 12:44:16 GMT</pubDate>
            <description><![CDATA[Linux 企业级运维
 工具部署
使用 `acme.sh` 部署泛域名证书
LAMP 架构的编译安装
WordPress 容器化部署
 Linux 企业级运维
【专栏】LAMP 架构的编译安装
【专]]></description>
            <content:encoded><![CDATA[<h1 id="linux-企业级运维" tabindex="-1">Linux 企业级运维 <a class="header-anchor" href="#linux-企业级运维" aria-label="Permalink to &quot;Linux 企业级运维&quot;"></a></h1>
<h3 id="工具部署" tabindex="-1">工具部署 <a class="header-anchor" href="#工具部署" aria-label="Permalink to &quot;工具部署&quot;"></a></h3>
<p><a href="./acme-sh.html">使用 <code>acme.sh</code> 部署泛域名证书</a></p>
<p><a href="./linux-lamp/">LAMP 架构的编译安装</a></p>
<p><a href="./wordpress-by-docker-compose.html">WordPress 容器化部署</a></p>
<h3 id="linux-企业级运维-1" tabindex="-1">Linux 企业级运维 <a class="header-anchor" href="#linux-企业级运维-1" aria-label="Permalink to &quot;Linux 企业级运维&quot;"></a></h3>
<p>【专栏】<a href="./linux-lamp/">LAMP 架构的编译安装</a></p>
<p>【专栏】<a href="./springboot-app-launch/">SpringBoot 项目上线部署流程</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[基于DockerCompose的WordPress环境部署（附配置优化）]]></title>
            <link>https://www.imufeng.cn/training/linux/wordpress-by-docker-compose.html</link>
            <guid>https://www.imufeng.cn/training/linux/wordpress-by-docker-compose.html</guid>
            <pubDate>Sat, 05 Oct 2024 12:44:16 GMT</pubDate>
            <description><![CDATA[本文将带你快速了解 docker compose 安装部署 WordPress。]]></description>
            <content:encoded><![CDATA[<h1 id="基于dockercompose的wordpress环境部署-附配置优化" tabindex="-1">基于DockerCompose的WordPress环境部署（附配置优化） <a class="header-anchor" href="#基于dockercompose的wordpress环境部署-附配置优化" aria-label="Permalink to &quot;基于DockerCompose的WordPress环境部署（附配置优化）&quot;"></a></h1>
<blockquote>
<p>观前提醒：通过本文安装<code>WordPress</code>，需要你有一定的Linux基础，并且安装了最新版的<code>Docker</code>。</p>
</blockquote>
<h2 id="一、为什么是dockercompose" tabindex="-1">一、为什么是DockerCompose <a class="header-anchor" href="#一、为什么是dockercompose" aria-label="Permalink to &quot;一、为什么是DockerCompose&quot;"></a></h2>
<p>回答：<strong>因为懒</strong></p>
<p>之前在跟其他人沟通的时候，看到我使用Docker Compose部署 WordPress，都有些嗤之以鼻，觉得没有必要,也不够高大上。但是问他们用什么？其实很多都是第三方托管，或者干脆自己从零搭建环境，而像我这种对Linux环境稍微有点了解，并且做过一些LAMP/LNMP架构定制化编译安装的，也并不认为靠第三方托管的方式有多么便携又高大上，或者编译安装一套LNMP架构有多么优雅。</p>
<h2 id="二、怎么用dockercompose" tabindex="-1">二、怎么用DockerCompose <a class="header-anchor" href="#二、怎么用dockercompose" aria-label="Permalink to &quot;二、怎么用DockerCompose&quot;"></a></h2>
<p>Docker的使用已经成为运维人员的必修课，而使用Docker能够极大地简化环境部署，减少大部分重复性的手动操作。这里先介绍DockerCompose搭建环境的一个基本流程，至于Docker的安装那些，也比较简单，我后边慢慢写。</p>
<blockquote>
<p>顺便说一下，现在Docker已经自带<code>compose</code>了，不需要单独安装 <code>docker-compose</code></p>
</blockquote>
<p>DockerCompose部署环境只需要一个文件，<code>docker-compose.yaml</code> 所有的配置都在这个文件中。DockerCompose常用命令如下：</p>
<table tabindex="0">
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>docker compose up &lt;-d&gt;</td>
<td>启动yaml文件中定义的所有服务。<br />-d表示后台启动</td>
</tr>
<tr>
<td>docker compose down</td>
<td>停止并删除所有容器</td>
</tr>
<tr>
<td>docker compose ps</td>
<td>查看服务运行状态</td>
</tr>
<tr>
<td>docker compose restart</td>
<td>重新启动所有服务</td>
</tr>
<tr>
<td>docker compose logs</td>
<td>查看所有日志</td>
</tr>
</tbody>
</table>
<blockquote>
<p>上述命令在后边跟上yaml文件中定义的ServiceName，则可以操作单独的服务</p>
</blockquote>
<h2 id="三、开始部署" tabindex="-1">三、开始部署 <a class="header-anchor" href="#三、开始部署" aria-label="Permalink to &quot;三、开始部署&quot;"></a></h2>
<h3 id="_3-1-yaml文件示例" tabindex="-1">3.1 YAML文件示例 <a class="header-anchor" href="#_3-1-yaml文件示例" aria-label="Permalink to &quot;3.1 YAML文件示例&quot;"></a></h3>
<blockquote>
<p>YAML文件需要放在特定的文件夹，最好单独建立文件夹，容器启动时会以当前<code>目录的名称-服务名称-序号</code>命名。</p>
</blockquote>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> ~/wordpress</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> ~/wordpress</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> docker-compose.yaml</span></span></code></pre>
</div><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'3.3'</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"># 服务</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">services</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  # 数据库服务</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">  db</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">mysql:5.7</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">    volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">./db_data:/var/lib/mysql</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">    restart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">always</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">    environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">      MYSQL_ROOT_PASSWORD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">wordpress</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">      MYSQL_DATABASE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">wordpress</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">      MYSQL_USER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">wordpress</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">      MYSQL_PASSWORD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">wordpress</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  # Redis缓存服务</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">  cache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">redis:latest</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">    restart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">always</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">    ports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      - </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">6379</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  # WordPress服务</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">  wordpress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">    depends_on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">db</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">cache</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">wordpress:php8.2</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">    ports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"8080:80"</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">    restart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">always</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">    environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">      WORDPRESS_DB_HOST</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">db:3306</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">      WORDPRESS_DB_USER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">wordpress</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">      WORDPRESS_DB_PASSWORD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">wordpress</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">      WORDPRESS_DB_NAME</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">wordpress</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">    volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">./wp_data:/var/www/html</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">./php_config/php.ini-production:/usr/local/etc/php/php.ini-production</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"># 网络划分</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">networks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">    wordpress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">        driver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">bridge</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">        external</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">true</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">        ipam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">            config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">subnet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">10.10.1.0/24</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">gateway</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">10.10.1.10</span></span></code></pre>
</div><p>在上面的示例中，规定了当前 <code>docker-compose.yaml</code>遵循3.3版本规范，共涉及三个服务：数据库、缓存以及WordPress。并使用了三个卷，将数据库文件、WordPress服务文件以及PHP配置文件挂载到本地。</p>
<p>在该文件编写完成后，可以在当前目录使用 <code>docker compose up</code> 命令安装，首次安装需要下载镜像，会比较慢，之后再安装则不需要。</p>
<p>安装完之后，你就可以在使用<code>ip:8080</code>的方式访问你的 WordPress 站点了。如果你需要配置域名访问，在Nginx中添加如下配置后再去安装你的 WordPress 。</p>
<blockquote>
<p>你需要将 <code>blog-wp.imufeng.cn</code> 替换为你自己的域名。至于泛域名证书的配置参见我的其他博客。</p>
</blockquote>
<div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    listen </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">             443</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ssl http2;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    listen </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">             [::]:443 ssl http2;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    server_name </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        blog-wp.imufeng.cn;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    # SSL</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    ssl_certificate </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    /etc/nginx/ssl/imufeng.cn.cer;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    ssl_certificate_key </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">/etc/nginx/ssl/imufeng.cn.key;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    # security</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    include </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            nginxconfig.io/security.conf;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    # logging</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    access_log </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">         /var/log/nginx/blog-wp.imufeng.cn.log combined buffer=512k flush=5m;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    error_log </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">          /var/log/nginx/blog-wp.imufeng.error.log </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> / </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        proxy_pass </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">http://127.0.0.1:8080/;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        proxy_set_header </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Host $host;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        proxy_set_header </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">X-Real-IP $remote_addr;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        proxy_set_header </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">X-Forwarded-For $proxy_add_x_forwarded_for;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        proxy_set_header </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">X-Forwarded-Proto $scheme;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        add_header </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Content-Security-Policy </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"default-src 'self' 'unsafe-inline' 'unsafe-eval' https: ws: wss: data: blob:"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>至此，一个简单的WordPress就搭建完成了。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[软件工具分享]]></title>
            <link>https://www.imufeng.cn/training/software/</link>
            <guid>https://www.imufeng.cn/training/software/</guid>
            <pubDate>Sat, 05 Oct 2024 12:44:16 GMT</pubDate>
            <description><![CDATA[软件工具分享
 目录
1. Mysql for Windows 安装及初始化]]></description>
            <content:encoded><![CDATA[<h1 id="软件工具分享" tabindex="-1">软件工具分享 <a class="header-anchor" href="#软件工具分享" aria-label="Permalink to &quot;软件工具分享&quot;"></a></h1>
<h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;"></a></h2>
<ol>
<li><a href="./mysql-for-win-install.html">Mysql for Windows 安装及初始化</a></li>
</ol>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Mysql for Windows 安装及初始化]]></title>
            <link>https://www.imufeng.cn/training/software/mysql-for-win-install.html</link>
            <guid>https://www.imufeng.cn/training/software/mysql-for-win-install.html</guid>
            <pubDate>Sat, 05 Oct 2024 12:44:16 GMT</pubDate>
            <description><![CDATA[Mysql for Windows 安装及初始化。]]></description>
            <content:encoded><![CDATA[<h1 id="mysql-for-windows-安装及初始化" tabindex="-1">Mysql for Windows 安装及初始化 <a class="header-anchor" href="#mysql-for-windows-安装及初始化" aria-label="Permalink to &quot;Mysql for Windows 安装及初始化&quot;"></a></h1>
<h2 id="一、简介" tabindex="-1">一、简介 <a class="header-anchor" href="#一、简介" aria-label="Permalink to &quot;一、简介&quot;"></a></h2>
<p>Windows 安装 Mysql 主要还是为了本地调试的方便。8.x 的版本和 5.7 的版本安装过程大差不差，这里以 8.0.35（8.2版本发布前的最新版）举例。</p>
<h2 id="二、下载安装" tabindex="-1">二、下载安装 <a class="header-anchor" href="#二、下载安装" aria-label="Permalink to &quot;二、下载安装&quot;"></a></h2>
<p>Windows 端 Mysql 只需要在 <a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noreferrer">MySQL :: Download MySQL Community Server</a> 页面选择对应版本下载 mysql-xxx-winx64.zip，该压缩包为编译后文件，并非源码， 可以直接运行。</p>
<p>目录结构如下：</p>
<div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>Directory: D:\Element\mysql-8.0.35</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Mode                 LastWriteTime         Length Name</span></span>
<span class="line"><span>----                 -------------         ------ ----</span></span>
<span class="line"><span>da---            2024/1/4    15:00                bin</span></span>
<span class="line"><span>da---            2024/1/4    15:00                docs</span></span>
<span class="line"><span>da---            2024/1/4    15:00                include</span></span>
<span class="line"><span>da---            2024/1/4    15:00                lib</span></span>
<span class="line"><span>da---            2024/1/4    15:00                share</span></span>
<span class="line"><span>-a---          2023/10/12    19:45         279355 LICENSE</span></span>
<span class="line"><span>-a---          2023/10/12    19:45            666 README</span></span></code></pre>
</div><h2 id="四、配置" tabindex="-1">四、配置 <a class="header-anchor" href="#四、配置" aria-label="Permalink to &quot;四、配置&quot;"></a></h2>
<h3 id="配置环境变量" tabindex="-1">配置环境变量 <a class="header-anchor" href="#配置环境变量" aria-label="Permalink to &quot;配置环境变量&quot;"></a></h3>
<p>为方便 Mysql 服务的使用和管理，可以在 PATH 中加入 Mysql 的 bin 目录。</p>
<h3 id="修改配置文件" tabindex="-1">修改配置文件 <a class="header-anchor" href="#修改配置文件" aria-label="Permalink to &quot;修改配置文件&quot;"></a></h3>
<p>Mysql 配置默认读取自安装目录下 <code>my.ini</code>，如没有需要创建一个，Mysql 默认有一套配置，如端口默认为 3306 等，<code>my.ini</code> 并非必须，只需要在其中写明需要的配置即可，如下：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>[mysqld]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>lower_case_table_names=2</span></span></code></pre>
</div><blockquote>
<p>注意：此处 lower_case_table_names 有三种取值：</p>
<ul>
<li>0：表示表名区分大小写。</li>
<li>1：表示将表名转换为小写，但在比较时仍然区分大小写。</li>
<li>2：表示将表名转换为小写，并且在比较时也不区分大小写。</li>
</ul>
</blockquote>
<h3 id="初始化" tabindex="-1">初始化 <a class="header-anchor" href="#初始化" aria-label="Permalink to &quot;初始化&quot;"></a></h3>
<p>初始化 Mysql 需要管理员权限，需要管理员权限运行 Powershell 或 CMD。执行 <code>mysqld --initialize  --console</code> 既可初始化并在控制台显示密码。</p>
<p><code>Mysqld</code> 服务初始化过程如下：</p>
<div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>PS D:\Element\mysql-8.0.35> ./bin/mysqld --initialize  --console</span></span>
<span class="line"><span>2024-01-04T07:08:20.705336Z 0 [System] [MY-013169] [Server] D:\Element\mysql-8.0.35\bin\mysqld.exe (mysqld 8.0.35) initializing of server in progress as process 3008</span></span>
<span class="line"><span>2024-01-04T07:08:20.730739Z 1 [System] [MY-013576] [InnoDB] InnoDB initialization has started.</span></span>
<span class="line"><span>2024-01-04T07:08:21.033652Z 1 [System] [MY-013577] [InnoDB] InnoDB initialization has ended.</span></span>
<span class="line"><span>2024-01-04T07:08:22.291288Z 6 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: /YlA-/3M_yny</span></span></code></pre>
</div><p>初始化完成后，会在 Mysql 安装目录生成一个 <code>data</code> 目录，即为 Mysql 数据存储目录。初始化日志最后一行显示的即为初始化的随机密码，权限为 <code>root@localhost</code>。</p>
<h3 id="安装服务" tabindex="-1">安装服务 <a class="header-anchor" href="#安装服务" aria-label="Permalink to &quot;安装服务&quot;"></a></h3>
<p>运行 <code>mysqld install</code> 即可在 Windows 系统中安装 Mysql 服务。</p>
<div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>PS D:\Element\mysql-8.0.35> .\bin\mysqld install</span></span>
<span class="line"><span>Service successfully installed.</span></span></code></pre>
</div><h3 id="启动服务" tabindex="-1">启动服务 <a class="header-anchor" href="#启动服务" aria-label="Permalink to &quot;启动服务&quot;"></a></h3>
<p>可以使用 <code>net start mysql</code> 命令启动 Mysql 服务，如出现如下内容，即为启动成功：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>PS C:\Users\mufeng> net start mysql</span></span>
<span class="line"><span>MySQL 服务正在启动 .</span></span>
<span class="line"><span>MySQL 服务已经启动成功。</span></span></code></pre>
</div><h3 id="测试" tabindex="-1">测试 <a class="header-anchor" href="#测试" aria-label="Permalink to &quot;测试&quot;"></a></h3>
<p>服务启动之后，即可连接 Mysql：</p>
<div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>PS C:\Users\mufeng> mysql -uroot -p</span></span>
<span class="line"><span>Enter password: ************</span></span>
<span class="line"><span>Welcome to the MySQL monitor.  Commands end with ; or \g.</span></span>
<span class="line"><span>Your MySQL connection id is 8</span></span>
<span class="line"><span>Server version: 8.0.35</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Copyright (c) 2000, 2023, Oracle and/or its affiliates.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Oracle is a registered trademark of Oracle Corporation and/or its</span></span>
<span class="line"><span>affiliates. Other names may be trademarks of their respective</span></span>
<span class="line"><span>owners.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>mysql></span></span></code></pre>
</div><h3 id="修改-mysql-默认密码" tabindex="-1">修改 Mysql 默认密码 <a class="header-anchor" href="#修改-mysql-默认密码" aria-label="Permalink to &quot;修改 Mysql 默认密码&quot;"></a></h3>
<p>Mysql 权限管理是基于 <code>域 + 用户 + 权限</code> 的方式，本地对安全性要求不高，此处修改 root 用户随处可以登录。</p>
<p>如下：</p>
<div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>mysql> ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'root';</span></span>
<span class="line"><span>Query OK, 0 rows affected (0.01 sec)</span></span>
<span class="line"><span>mysql> use mysql;</span></span>
<span class="line"><span>Database changed</span></span>
<span class="line"><span>mysql> update user set host = '%' where host = 'localhost' and user = 'root';</span></span>
<span class="line"><span>Query OK, 1 row affected (0.00 sec)</span></span>
<span class="line"><span>Rows matched: 1  Changed: 1  Warnings: 0</span></span></code></pre>
</div><p>测试：</p>
<div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>PS C:\Users\mufeng> mysql -uroot -proot</span></span>
<span class="line"><span>mysql: [Warning] Using a password on the command line interface can be insecure.</span></span>
<span class="line"><span>Welcome to the MySQL monitor.  Commands end with ; or \g.</span></span>
<span class="line"><span>Your MySQL connection id is 10</span></span>
<span class="line"><span>Server version: 8.0.35 MySQL Community Server - GPL</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Copyright (c) 2000, 2023, Oracle and/or its affiliates.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Oracle is a registered trademark of Oracle Corporation and/or its</span></span>
<span class="line"><span>affiliates. Other names may be trademarks of their respective</span></span>
<span class="line"><span>owners.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>mysql></span></span></code></pre>
</div><p>登录成功！至此，Mysql For Windows 安装完成。</p>
<h2 id="五、其他" tabindex="-1">五、其他 <a class="header-anchor" href="#五、其他" aria-label="Permalink to &quot;五、其他&quot;"></a></h2>
<h3 id="mysql-服务无法启动" tabindex="-1">Mysql 服务无法启动 <a class="header-anchor" href="#mysql-服务无法启动" aria-label="Permalink to &quot;Mysql 服务无法启动&quot;"></a></h3>
<p>Mysql 初始化顺序为先修改配置文件，再初始化，如果先初始化，然后修改了诸如忽略大小写等与现有数据冲突的配置，可能会造成无法启动。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[前端 复习笔记]]></title>
            <link>https://www.imufeng.cn/full-stack/front-end/review/</link>
            <guid>https://www.imufeng.cn/full-stack/front-end/review/</guid>
            <pubDate>Sat, 05 Oct 2024 12:44:16 GMT</pubDate>
            <description><![CDATA[前端 复习笔记
 基础复习
CSS 复习]]></description>
            <content:encoded><![CDATA[<h1 id="前端-复习笔记" tabindex="-1">前端 复习笔记 <a class="header-anchor" href="#前端-复习笔记" aria-label="Permalink to &quot;前端 复习笔记&quot;"></a></h1>
<h3 id="基础复习" tabindex="-1">基础复习 <a class="header-anchor" href="#基础复习" aria-label="Permalink to &quot;基础复习&quot;"></a></h3>
<p><a href="./css.html">CSS 复习</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Java8 新特性详解]]></title>
            <link>https://www.imufeng.cn/full-stack/java/characteristic/functional.html</link>
            <guid>https://www.imufeng.cn/full-stack/java/characteristic/functional.html</guid>
            <pubDate>Sat, 05 Oct 2024 12:44:16 GMT</pubDate>
            <description><![CDATA[Lambda 表达式、Stream 流、Optional 类操作分享。]]></description>
            <content:encoded><![CDATA[<h1 id="java8-新特性详解" tabindex="-1">Java8 新特性详解 <a class="header-anchor" href="#java8-新特性详解" aria-label="Permalink to &quot;Java8 新特性详解&quot;"></a></h1>
<blockquote>
<p>Lambda 表达式、Stream 流、Optional 类操作分享。</p>
</blockquote>
<h2 id="一、lambda表达式" tabindex="-1">一、Lambda表达式 <a class="header-anchor" href="#一、lambda表达式" aria-label="Permalink to &quot;一、Lambda表达式&quot;"></a></h2>
<p>Lambda表达式可以让你简洁的表示一个行为或传递代码。Lambda表达式可以理解为简洁的表示可传递匿名函数的一种方式：它没有名称，但是有参数列表、函数主体、返回类型</p>
<ul>
<li><strong>匿名：</strong> 没有名称</li>
<li><strong>函数：</strong> Lambda函数不像方法那样属于特定的类。但是和方法一样，有参数列表、函数体以及返回类型 。也可以抛出异常。</li>
<li><strong>传递：</strong> Lambda表达式可以作为参数传递给方法或存储在变量中。</li>
<li><strong>简介：</strong> 无需像匿名类那样写很多模板代码。</li>
</ul>
<p><strong>示例：</strong></p>
<div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 不使用Lambda</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Comparator&#x3C;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Apple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">> byWeight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Comparator&#x3C;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Apple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">	public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> compare</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(Apple </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">a1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, Apple </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">a2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">		return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> a1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getWeidht</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">compareTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(a2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getWeight</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 使用Lambda表达式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Comparator&#x3C;Apple> byWeight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    (Apple a1, Apple a2) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> a1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getWeight</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">compareTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(a2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getWeight</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">());</span></span></code></pre>
</div><p><img src="https://cdn.imufeng.cn/imufeng/epub_26211813_42" alt="img"></p>
<h2 id="二、stream流" tabindex="-1">二、Stream流 <a class="header-anchor" href="#二、stream流" aria-label="Permalink to &quot;二、Stream流&quot;"></a></h2>
<blockquote>
<p><code>Stream流</code> 是 Java8 提供对集合或数组进行链状流式操作的函数式编程模式。</p>
</blockquote>
<h3 id="_2-1-中间操作" tabindex="-1">2.1 中间操作 <a class="header-anchor" href="#_2-1-中间操作" aria-label="Permalink to &quot;2.1 中间操作&quot;"></a></h3>
<ul>
<li>
<p><strong>filter：</strong> 过滤</p>
</li>
<li>
<p><strong>map：</strong> 计算或转换</p>
</li>
<li>
<p><strong>distinct：</strong> 去除重复对象（equals 方法）</p>
</li>
<li>
<p><strong>sorted：</strong> 排序，可以实现 Comparator 接口重写 compareTo 方法进行排序</p>
</li>
<li>
<p><strong>limit：</strong> 设置流的最大长度</p>
</li>
<li>
<p><strong>skip：</strong> 跳过前n个元素</p>
</li>
<li>
<p><strong>flatMap：</strong> 将一个对象转换为多个对象作为流中的元素</p>
</li>
</ul>
<h3 id="_2-2-终结操作" tabindex="-1">2.2 终结操作 <a class="header-anchor" href="#_2-2-终结操作" aria-label="Permalink to &quot;2.2 终结操作&quot;"></a></h3>
<div class="danger custom-block"><p class="custom-block-title">注意</p>
<p>如果没有终结操作，中间操作不会执行</p>
</div>
<h4 id="常规操作" tabindex="-1">常规操作 <a class="header-anchor" href="#常规操作" aria-label="Permalink to &quot;常规操作&quot;"></a></h4>
<ul>
<li>
<p><strong>forEach：</strong> 遍历</p>
</li>
<li>
<p><strong>count：</strong> 计数</p>
</li>
<li>
<p><strong>max&amp;min：</strong> 求最值 需要指定比较最大值的规则 返回 Optional</p>
</li>
<li>
<p><strong>collect：</strong> 将流转换为集合</p>
</li>
</ul>
<h4 id="查找与匹配" tabindex="-1">查找与匹配 <a class="header-anchor" href="#查找与匹配" aria-label="Permalink to &quot;查找与匹配&quot;"></a></h4>
<ul>
<li>
<p><strong>anyMatch：</strong> 判断是否存在能够符合匹配条件的元素</p>
</li>
<li>
<p><strong>allMatch：</strong> 判断是否全部匹配条件</p>
</li>
<li>
<p><strong>noneMatch：</strong> 是否都不符合条件</p>
</li>
<li>
<p><strong>findAny：</strong> 获取任意一个符合条件元素（不一定是第一个）</p>
</li>
<li>
<p><strong>findFirst：</strong> 获取第一个符合条件的元素</p>
</li>
</ul>
<h4 id="reduce归并" tabindex="-1">reduce归并 <a class="header-anchor" href="#reduce归并" aria-label="Permalink to &quot;reduce归并&quot;"></a></h4>
<p>对流中的数据按照你指定的计算方式计算出一个结果 （缩减操作）</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(people.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">distinct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(People</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">getAge)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">reduce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, (o1, o2) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> o1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> o2));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(people.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">distinct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(People</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">getAge)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">reduce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, Integer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">sum));</span></span></code></pre>
</div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(people.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">distinct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(People</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">getAge)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">reduce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(Integer.MIN_VALUE, Integer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">max));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(people.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">distinct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(People</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">getAge)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">reduce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(Integer.MAX_VALUE, Integer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">min));</span></span></code></pre>
</div><h2 id="三、optional" tabindex="-1">三、Optional <a class="header-anchor" href="#三、optional" aria-label="Permalink to &quot;三、Optional&quot;"></a></h2>
<blockquote>
<p>使用 Optional 可以写出更优雅的代码来避免空指针异常</p>
<p>Optional 类似于包装类，将具体的数据封装到Optional对象内部。我们可以使用Optional中封装好的方法操作封装的数据。优雅的避免空指针异常</p>
</blockquote>
<h3 id="创建对象" tabindex="-1">创建对象 <a class="header-anchor" href="#创建对象" aria-label="Permalink to &quot;创建对象&quot;"></a></h3>
<p><code>ofNullAble()</code> 方法会将其封装为一个Optional对象</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">People people </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> People</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Optional&#x3C;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">People</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">> people1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Optional.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">ofNullable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(people);</span></span></code></pre>
</div><p>如果能够保证传入的对象非空，则可以使用of()方法封装</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">People people </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> People</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">people.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">setName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"mufeng"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">people.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">setAge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">13</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Optional&#x3C;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">People</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">> people1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Optional.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(people);</span></span></code></pre>
</div><p>如果需要一个空值，使用 emepy() 方法</p>
<h3 id="安全获取值" tabindex="-1">安全获取值 <a class="header-anchor" href="#安全获取值" aria-label="Permalink to &quot;安全获取值&quot;"></a></h3>
<p><code>orElseGet()</code>	如果非空则返回，如果为空则给默认值</p>
<p><code>orElseThrow()</code> 获取数据，为空则抛出异常</p>
<h3 id="其他方法" tabindex="-1">其他方法 <a class="header-anchor" href="#其他方法" aria-label="Permalink to &quot;其他方法&quot;"></a></h3>
<p><code>filter()</code> 类似于Stream流中的filter方法</p>
<p><code>isPeresent（）</code> 进行是否存在值的判断（更推荐使用<code>ifPeresent()</code>方法）</p>
<p><code>map()</code> 数据转换。类似于Stream流中的map方法</p>
<h2 id="四、函数式接口" tabindex="-1">四、函数式接口 <a class="header-anchor" href="#四、函数式接口" aria-label="Permalink to &quot;四、函数式接口&quot;"></a></h2>
<blockquote>
<p><strong>只有一个抽象方法的接口称为函数式接口</strong></p>
<p>JDK的函数式接口都加上了<code>@FunctionalInterface</code>进行标识。但是加不加都无所谓。</p>
</blockquote>
<h3 id="常用的函数式接口" tabindex="-1">常用的函数式接口 <a class="header-anchor" href="#常用的函数式接口" aria-label="Permalink to &quot;常用的函数式接口&quot;"></a></h3>
<p><code>Consumer</code>	消费接口</p>
<p><code>Function</code>	计算转换接口</p>
<p><code>Predicate</code>	判断接口</p>
<p><code>Supplier</code>	生产型接口</p>
<h3 id="常用的默认方法" tabindex="-1">常用的默认方法 <a class="header-anchor" href="#常用的默认方法" aria-label="Permalink to &quot;常用的默认方法&quot;"></a></h3>
<p><code>and</code>	判断条件的并集</p>
<p><code>or</code>	判断条件的交集</p>
<p><code>negate</code>	判断条件取反</p>
<h3 id="方法引用" tabindex="-1">方法引用 <a class="header-anchor" href="#方法引用" aria-label="Permalink to &quot;方法引用&quot;"></a></h3>
<p><code>类名/对象名::方法名</code></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[设计模式七大原则]]></title>
            <link>https://www.imufeng.cn/full-stack/java/design-patterns/principle.html</link>
            <guid>https://www.imufeng.cn/full-stack/java/design-patterns/principle.html</guid>
            <pubDate>Sat, 05 Oct 2024 12:44:16 GMT</pubDate>
            <description><![CDATA[设计模式有七大原则，它体现的是开发过程中的优雅，是一种艺术。遵循这些原则，就能写出更加优雅、灵活的代码结构。]]></description>
            <content:encoded><![CDATA[<h1 id="设计模式七大原则" tabindex="-1">设计模式七大原则 <a class="header-anchor" href="#设计模式七大原则" aria-label="Permalink to &quot;设计模式七大原则&quot;"></a></h1>
<h2 id="一、简介" tabindex="-1">一、简介 <a class="header-anchor" href="#一、简介" aria-label="Permalink to &quot;一、简介&quot;"></a></h2>
<p>设计模式一般遵循七种原则：</p>
<ol>
<li>单一职责原则 (Single Responsibility Principle)</li>
<li>开放-封闭原则 (Open-Closed Principle)</li>
<li>里氏替换原则 (Liskov Substitution Principle)</li>
<li>依赖倒置原则 (Dependence Inversion Principle)</li>
<li>接口隔离原则 (Interface Segregation Principle)</li>
<li>迪米特法则（Law Of Demeter）</li>
<li>组合/合成复用原则 (Composite/Aggregate Reuse Principle)</li>
</ol>
<p>这些原则首字母可以组合成 <code>SOLID</code> （稳定的），代表遵循这些原则就可以建立稳定、灵活、健壮的系统。</p>
<h2 id="二、单一职责原则" tabindex="-1">二、单一职责原则 <a class="header-anchor" href="#二、单一职责原则" aria-label="Permalink to &quot;二、单一职责原则&quot;"></a></h2>
<p>单一职责原则 （Single Responsibility Principle，SRP）指一个类应该只有一个引起变化的原因，即一个类（Class/Interface/Method）应该只负责一项职责。</p>
<h3 id="核心思想" tabindex="-1">核心思想 <a class="header-anchor" href="#核心思想" aria-label="Permalink to &quot;核心思想&quot;"></a></h3>
<p>Class / Interface / Method 应该只负责一项职责</p>
<h3 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;"></a></h3>
<p>遵循该原则，可以降低类的复杂度，提高类的可读性、可维护性，降低变更风险。修改一个功能时可以以显著降低对其他功能的影响。</p>
<h3 id="实例" tabindex="-1">实例 <a class="header-anchor" href="#实例" aria-label="Permalink to &quot;实例&quot;"></a></h3>
<p>以下员工类是一个违反单一职责原则的例子：</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> String name;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> String employeeId;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> salary;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 计算工资的方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> calculateSalary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        // 计算工资的逻辑</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> salary;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 存储员工信息的方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> saveEmployee</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        // 存储员工信息的逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>在上面的例子中，<code>Employee</code> 类同时负责两个职责：计算工资和存储员工信息。这违反了单一职责原则，因为一个类应该只负责一个单一的功能。为了遵循单一职责原则，我们可以将这两个职责分开成两个类：</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 员工信息类，负责存储员工信息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> String name;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> String employeeId;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 计算工资类，负责计算员工工资</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> SalaryCalculator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 计算工资的方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> calculateSalary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(Employee </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">employee</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        // 计算工资的逻辑</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> employee.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getSalary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>在这个修正后的例子中，<code>Employee</code> 类负责存储员工信息，而 <code>SalaryCalculator</code> 类负责计算员工的工资。</p>
<h2 id="三、开放-封闭原则" tabindex="-1">三、开放-封闭原则 <a class="header-anchor" href="#三、开放-封闭原则" aria-label="Permalink to &quot;三、开放-封闭原则&quot;"></a></h2>
<p>开放封闭原则（Open-Closed Principle, OCP）简称开闭原则，指软件实体（类、模块、函数等）应该对拓展开放，对修改关闭。可以通过添加新的代码来扩展系统的功能，而不是修改已有的代码。</p>
<h3 id="核心思想-1" tabindex="-1">核心思想 <a class="header-anchor" href="#核心思想-1" aria-label="Permalink to &quot;核心思想&quot;"></a></h3>
<p>抽象，面向抽象编程。</p>
<h3 id="优点-1" tabindex="-1">优点 <a class="header-anchor" href="#优点-1" aria-label="Permalink to &quot;优点&quot;"></a></h3>
<p>可以提高代码的可复用性和可维护性。对于已有的软件系统，可以很快的进行拓展，不需要修改其底层。</p>
<h3 id="实例-1" tabindex="-1">实例 <a class="header-anchor" href="#实例-1" aria-label="Permalink to &quot;实例&quot;"></a></h3>
<p>假设有一个应用程序，用于处理不同类型的形状（如圆形、矩形等），并计算它们的面积。现在我们希望向应用程序添加一个新的形状：三角形。</p>
<p>首先，我们定义一个抽象的形状接口 <code>Shape</code>：</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 形状接口</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Shape</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> calculateArea</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>然后，我们创建具体的形状类，如圆形（<code>Circle</code>）和矩形（<code>Rectangle</code>），并实现 <code>Shape</code> 接口：</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 圆形类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Circle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Shape</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> radius;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Circle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">double</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70"> radius</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.radius </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> radius;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> calculateArea</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Math.PI </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> radius </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> radius;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 矩形类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Rectangle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Shape</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> width;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> height;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Rectangle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">double</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70"> width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">double</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70"> height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> width;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> height;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> calculateArea</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> height;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>现在，我们想要添加一个新的形状：三角形。我们不需要修改已有的 <code>Circle</code> 和 <code>Rectangle</code> 类，而是创建一个新的类 <code>Triangle</code>，并实现 <code>Shape</code> 接口：</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 三角形类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Triangle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Shape</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> base;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> height;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Triangle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">double</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70"> base</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">double</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70"> height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.base </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> base;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> height;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> calculateArea</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0.5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> base </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> height;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>通过这种方式，我们通过扩展而不是修改现有的代码来添加新的功能，遵循了开放封闭原则。现有的代码对于新增的 <code>Triangle</code> 类是关闭的，但对于新增形状的扩展是开放的。</p>
<h2 id="四、里氏替换原则" tabindex="-1">四、里氏替换原则 <a class="header-anchor" href="#四、里氏替换原则" aria-label="Permalink to &quot;四、里氏替换原则&quot;"></a></h2>
<p>里氏替换原则（Liskov Substitution Principle，LSP）是指子类对象应该能够替换掉父类对象并且不影响程序的正确性。即父类能出现的地方子类也能出现，而且替换为子类也不会产生任何异常或错误。</p>
<p>子类可以拓展父类的功能，但是不能覆写父类已有的功能。</p>
<h3 id="核心思想-2" tabindex="-1">核心思想 <a class="header-anchor" href="#核心思想-2" aria-label="Permalink to &quot;核心思想&quot;"></a></h3>
<p>使用的基类可以在任何地方使用继承的子类，完美的替换基类。</p>
<h3 id="优点-2" tabindex="-1">优点 <a class="header-anchor" href="#优点-2" aria-label="Permalink to &quot;优点&quot;"></a></h3>
<p>里氏替换原则可以约束继承的泛滥，是开闭原则的一种体现，也是开闭原则实现的重要方式之一。可以加强程序的健壮性，减少可能存在的错误。</p>
<h3 id="实例-2" tabindex="-1">实例 <a class="header-anchor" href="#实例-2" aria-label="Permalink to &quot;实例&quot;"></a></h3>
<p>假设有一个图形类 <code>Shape</code>，它有一个 <code>getArea()</code> 方法用于计算图形的面积，并有两个子类 <code>Rectangle</code> 和 <code>Square</code>，分别表示矩形和正方形。按照里氏替换原则，正方形应该是矩形的子类，因为正方形是一种特殊的矩形，但是需要注意的是，在实现过程中，如果强行让 <code>Square</code> 继承自 <code>Rectangle</code> 可能会违反里氏替换原则，因为正方形和矩形在某些方面有不同的行为。</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 形状类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Shape</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> getArea</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 矩形类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Rectangle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Shape</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> width;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> height;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Rectangle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">double</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70"> width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">double</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70"> height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> width;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> height;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> getArea</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> height;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 正方形类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Square</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Shape</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> side;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Square</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">double</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70"> side</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.side </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> side;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> getArea</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> side </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> side;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>在这个例子中，<code>Square</code> 类继承自 <code>Shape</code>，并实现了 <code>getArea()</code> 方法来计算正方形的面积。尽管正方形也可以视作是一种特殊的矩形，但是如果 <code>Square</code> 类继承自 <code>Rectangle</code>，则可能会违反里氏替换原则，因为对于矩形类来说，修改宽度可能会导致高度也被修改，但对于正方形来说这是不合理的。因此，要遵循里氏替换原则，我们应该保持 <code>Square</code> 和 <code>Rectangle</code> 作为各自独立的类，它们都继承自 <code>Shape</code>，但彼此之间不应该有继承关系。</p>
<h2 id="五、依赖倒置原则" tabindex="-1">五、依赖倒置原则 <a class="header-anchor" href="#五、依赖倒置原则" aria-label="Permalink to &quot;五、依赖倒置原则&quot;"></a></h2>
<p>依赖倒置原则（Dependence Inversion Principle,DIP）是指高层模块不应该依赖于低层模块，二者都应该依赖于抽象；抽象不应该依赖于具体实现细节，具体实现细节应该依赖于抽象。</p>
<p>在设计软件系统模块时，应该通过接口或抽象类来定义模块之间的通信方式，而不是直接依赖于具体的实现类。</p>
<h3 id="核心思想-3" tabindex="-1">核心思想 <a class="header-anchor" href="#核心思想-3" aria-label="Permalink to &quot;核心思想&quot;"></a></h3>
<p>面向接口编程，不要面向实现编程。</p>
<h3 id="优点-3" tabindex="-1">优点 <a class="header-anchor" href="#优点-3" aria-label="Permalink to &quot;优点&quot;"></a></h3>
<p>依赖倒置原则可以降低类与类之间的耦合性，提高系统稳定性及代码的可阅读性、可维护性。</p>
<h3 id="实例-3" tabindex="-1">实例 <a class="header-anchor" href="#实例-3" aria-label="Permalink to &quot;实例&quot;"></a></h3>
<p>假设有一个电子邮件发送器（<code>EmailSender</code>）和一个短信发送器（<code>SMSSender</code>），它们都负责发送通知给用户。原始的设计可能会让高层模块直接依赖于具体的发送器实现，但是通过应用依赖倒置原则，我们可以通过引入一个抽象的通知发送器接口来解耦高层模块和具体的发送器实现。</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 通知发送器接口</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> NotificationSender</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> sendNotification</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 电子邮件发送器实现</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> EmailSender</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> NotificationSender</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> sendNotification</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        // 实现电子邮件发送逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"Sending email: "</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> message);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 短信发送器实现</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> SMSSender</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> NotificationSender</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> sendNotification</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        // 实现短信发送逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"Sending SMS: "</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> message);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 高层模块，依赖于抽象的通知发送器接口</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> NotificationService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> NotificationSender sender;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> NotificationService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(NotificationSender </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">sender</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.sender </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> sender;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> sendNotification</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        sender.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">sendNotification</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(message);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>在这个例子中，<code>NotificationService</code> 是高层模块，它不直接依赖于具体的发送器实现，而是依赖于抽象的 <code>NotificationSender</code> 接口。这样，如果以后需要新增其他类型的通知发送器，比如微信发送器或者推送通知发送器，只需实现 <code>NotificationSender</code> 接口即可，而不需要修改 <code>NotificationService</code> 类。这样就遵循了依赖倒置原则，实现了模块之间的解耦和可扩展性。</p>
<h2 id="六、接口隔离原则" tabindex="-1">六、接口隔离原则 <a class="header-anchor" href="#六、接口隔离原则" aria-label="Permalink to &quot;六、接口隔离原则&quot;"></a></h2>
<p>接口隔离原则（Interface Segregation Principle, ISP）要求客户端不应该被迫依赖于它们不使用的接口。一个类对另一个类的依赖应该建立在最小的接口上。</p>
<h3 id="核心思想-4" tabindex="-1">核心思想 <a class="header-anchor" href="#核心思想-4" aria-label="Permalink to &quot;核心思想&quot;"></a></h3>
<p>高内聚低耦合</p>
<h3 id="优点-4" tabindex="-1">优点 <a class="header-anchor" href="#优点-4" aria-label="Permalink to &quot;优点&quot;"></a></h3>
<p>遵循接口隔离原则可以降低系统的耦合性，将臃肿的接口分解为小粒度的接口，还可以预防外来变更的扩散，提高系统的灵活性、可拓展性、可维护性。</p>
<h3 id="实例-4" tabindex="-1">实例 <a class="header-anchor" href="#实例-4" aria-label="Permalink to &quot;实例&quot;"></a></h3>
<p>假设有一个图形编辑器，它可以绘制不同类型的图形（如圆形、矩形、三角形等），并且可以执行一些其他的操作（如移动、缩放、删除等）。我们可以根据不同类型的操作定义不同的接口，以便客户端只需依赖于它们需要使用的接口。</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>// 绘图接口</span></span>
<span class="line"><span>interface Drawable {</span></span>
<span class="line"><span>    void draw();</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 移动操作接口</span></span>
<span class="line"><span>interface Movable {</span></span>
<span class="line"><span>    void move(int x, int y);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 缩放操作接口</span></span>
<span class="line"><span>interface Scalable {</span></span>
<span class="line"><span>    void scale(double factor);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 删除操作接口</span></span>
<span class="line"><span>interface Deletable {</span></span>
<span class="line"><span>    void delete();</span></span>
<span class="line"><span>}</span></span></code></pre>
</div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 圆形类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Circle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Drawable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Movable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Scalable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Deletable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 实现接口方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> draw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"Drawing a circle"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> move</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70"> y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"Moving the circle to ("</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> ", "</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> ")"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> scale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">double</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70"> factor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"Scaling the circle by "</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> factor);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> delete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"Deleting the circle"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 矩形类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Rectangle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Drawable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Movable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Scalable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Deletable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 实现接口方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> draw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"Drawing a rectangle"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> move</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70"> y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"Moving the rectangle to ("</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> ", "</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> ")"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> scale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">double</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70"> factor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"Scaling the rectangle by "</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> factor);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> delete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"Deleting the rectangle"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>在这个例子中，每个图形类都实现了绘制、移动、缩放和删除这些操作的接口，但是客户端只需要依赖于它们需要使用的接口。例如，如果客户端只需要绘制图形，则只需依赖于 <code>Drawable</code> 接口，而不需要依赖于其他操作的接口，这样就避免了客户端对于不需要的接口的依赖，符合接口隔离原则。</p>
<h2 id="七、迪米特法则" tabindex="-1">七、迪米特法则 <a class="header-anchor" href="#七、迪米特法则" aria-label="Permalink to &quot;七、迪米特法则&quot;"></a></h2>
<p>迪米特法则（Law of Demeter LoD）又叫最少知道原则（Least Knowledge Principle,LKP），是指一个对象应该对其他对象保持最少的了解，尽量降低类与类之间的耦合。</p>
<h3 id="核心思想-5" tabindex="-1">核心思想 <a class="header-anchor" href="#核心思想-5" aria-label="Permalink to &quot;核心思想&quot;"></a></h3>
<p>一个对象不应该直接与其他对象进行过多的交互，而应该通过尽可能少的中介对象来完成。</p>
<h3 id="优点-5" tabindex="-1">优点 <a class="header-anchor" href="#优点-5" aria-label="Permalink to &quot;优点&quot;"></a></h3>
<p>迪米特法则提高了模块间的相对独立性，降低类之间的耦合度。更提高了类的可复用性和系统的可拓展性。</p>
<h3 id="实例-5" tabindex="-1">实例 <a class="header-anchor" href="#实例-5" aria-label="Permalink to &quot;实例&quot;"></a></h3>
<p>假设有一个班级（<code>Class</code>）和学生（<code>Student</code>）的系统，班级包含了一组学生，并且可以打印出每个学生的信息。按照迪米特法则，班级不应该直接访问学生的信息，而是应该通过学生对象自己来获取信息。</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> java.util.ArrayList;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> java.util.List;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 学生类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Student</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> String name;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> age;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Student</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70"> age</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> name;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> age;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> getAge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> age;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 班级类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> List&#x3C;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Student</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">> students;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.students </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ArrayList&#x3C;>();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 添加学生到班级</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> addStudent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(Student </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">student</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        students.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(student);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 打印班级信息，不需要直接访问学生信息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> printClassInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (Student student </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> students) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"Student name: "</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> student.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> ", age: "</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> student.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getAge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 客户端代码</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        Class class1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        class1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">addStudent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Student</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"Alice"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        class1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">addStudent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Student</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"Bob"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">21</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        // 客户端只需要调用班级类的方法，而不需要直接访问学生对象的信息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        class1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">printClassInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>在这个例子中，班级类 <code>Class</code> 不直接访问学生对象的信息，而是通过调用学生对象的 <code>getName()</code> 和 <code>getAge()</code> 方法来获取信息。这样，学生对象的信息对于班级类来说是隐藏的，符合迪米特法则。</p>
<h2 id="八、合成复用原则" tabindex="-1">八、合成复用原则 <a class="header-anchor" href="#八、合成复用原则" aria-label="Permalink to &quot;八、合成复用原则&quot;"></a></h2>
<p>合成复用原则（Composite/Aggregate Reuse Principle,CARP）要求在软件设计中应该尽量使用对象组合(<code>has-a</code>)、聚合(<code>contanis-a</code>)，而不是继承关系达到软件复用的目的。</p>
<h3 id="核心思想-6" tabindex="-1">核心思想 <a class="header-anchor" href="#核心思想-6" aria-label="Permalink to &quot;核心思想&quot;"></a></h3>
<p>尽量使用聚合、组合的方式，而不是使用继承。</p>
<h3 id="优点-6" tabindex="-1">优点 <a class="header-anchor" href="#优点-6" aria-label="Permalink to &quot;优点&quot;"></a></h3>
<p>新旧类之间的耦合度低，维持了类的封装性，且提高了服用的灵活性。</p>
<h3 id="实例-6" tabindex="-1">实例 <a class="header-anchor" href="#实例-6" aria-label="Permalink to &quot;实例&quot;"></a></h3>
<p>假设有一个飞行器类 <code>Aircraft</code>，它具有飞行的功能。现在我们要创建一个新的类 <code>Airplane</code>，它不仅能飞行，还能发射导弹。根据合成复用原则，我们应该通过组合的方式来实现 <code>Airplane</code> 类，而不是通过继承 <code>Aircraft</code> 类。</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 飞行器类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Aircraft</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> fly</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"Aircraft is flying"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 导弹发射器类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MissileLauncher</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> launchMissile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"Missile is launched"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 飞机类，通过组合方式实现复用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Airplane</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Aircraft aircraft;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> MissileLauncher missileLauncher;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Airplane</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.aircraft </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Aircraft</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.missileLauncher </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MissileLauncher</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 飞机具有飞行功能</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> fly</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        aircraft.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">fly</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 飞机具有发射导弹功能</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> launchMissile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        missileLauncher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">launchMissile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 客户端代码</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        Airplane airplane </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Airplane</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        airplane.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">fly</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 飞机飞行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        airplane.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">launchMissile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 飞机发射导弹</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>在这个例子中，<code>Airplane</code> 类通过组合方式包含了 <code>Aircraft</code> 类和 <code>MissileLauncher</code> 类，从而实现了代码复用。这样做的好处是 <code>Airplane</code> 类不会继承不需要的飞行器或导弹发射器的功能，而是只包含所需的功能。这样的设计更加灵活和可维护，符合合成复用原则。</p>
<h2 id="设计模式原则的总结" tabindex="-1">设计模式原则的总结 <a class="header-anchor" href="#设计模式原则的总结" aria-label="Permalink to &quot;设计模式原则的总结&quot;"></a></h2>
<p>上边介绍的七种设计模式原则，是软件开发过程中需要遵守的原则，它们的侧重点各不相同。在实际开发过程中，必须是各种原则相结合，再充分考虑开发难度、成本等因素，平衡取舍，尽量设计更加优雅的代码。</p>
]]></content:encoded>
            <enclosure url="https://cdn.imufeng.cn/mblog/0c82b8f471f9e4337d0131afb5a71515.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[抽象类和抽象方法]]></title>
            <link>https://www.imufeng.cn/full-stack/java/oop/abstract.html</link>
            <guid>https://www.imufeng.cn/full-stack/java/oop/abstract.html</guid>
            <pubDate>Sat, 05 Oct 2024 12:44:16 GMT</pubDate>
            <description><![CDATA[在一个较为复杂的继承链中，祖先类更具有一般性，作为派生其他类的基类而不糊将其作为用来构造实例。]]></description>
            <content:encoded><![CDATA[<h1 id="抽象类和抽象方法" tabindex="-1">抽象类和抽象方法 <a class="header-anchor" href="#抽象类和抽象方法" aria-label="Permalink to &quot;抽象类和抽象方法&quot;"></a></h1>
<p>在一个较为复杂的继承链中，父类有可能只知道子类应当具备某个方法，但是不能够明确方法实现。祖先类更具有一般性。通常祖先类只会作为派生其他类的基类而不糊将其作为用来构造实例。如员工之于公司，每个员工都应该得到工资，但是每个员工的工资可能都不一样。所以员工类就会有一个没有方法主体的<strong>抽象方法</strong>。而包含抽象方法的类就是<strong>抽象类</strong>。</p>
<p>抽象类与抽象方法都用 <code>abstract</code> 关键字修饰。上述例子的实现可以如下：</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Scratch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> leader </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Leader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        leader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">setName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"马云"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        leader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">payoff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1000000000.00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> mufeng </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Staff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        mufeng.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">setName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"沐风"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        mufeng.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">payoff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1000.00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> String name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> payoff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(Double </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">salary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> setName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Leader</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> payoff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(Double </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">salary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"%s领导不发工资，本月收入%s</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(), salary);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Staff</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> payoff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(Double </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">salary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"%s本月发工资%s</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(), salary);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>在上述的例子中，Employee 类中 <code>payoff(Double salary)</code> 方法就是抽象方法，相应的，Employee 类也必须是抽象类。抽象类也可以有具体的属性和方法。</p>
<div class="warning custom-block"><p class="custom-block-title">说明：</p>
<ul>
<li>抽象类不能实例化对象。</li>
<li>抽象类可以有构造方法，供子类创建时初始化。</li>
<li>成员变量可以定义在抽象类中。</li>
<li>抽象类的子类如果不重写抽象方法，则必须用 abstract 关键字修饰。</li>
<li>抽象方法不能被限制为 private 或 final。</li>
</ul>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[10-31]]></title>
            <link>https://www.imufeng.cn/interview/question-by-day/2023/10.html</link>
            <guid>https://www.imufeng.cn/interview/question-by-day/2023/10.html</guid>
            <pubDate>Sat, 05 Oct 2024 12:44:16 GMT</pubDate>
            <description><![CDATA[

## 10-31

### 什么是原子操作？

原子操作（atomic operation）意为”不可被中断的一个或一系列操作” 。处理器使用基于对缓存加锁或总线加锁的方式来实现多处理器之间的原子操作。
在Java中可以通过锁和循环CAS的方式来实现原子操作。CAS操作—— `Compare & Set`，或是 `Compare & Swap`，现在几乎所有的CPU指令都支持CAS的原子操作。

原子操作是指一个不受其他操作影响的操作任务单元。原子操作是在多线程环境下避免数据不一致必须的手段。
int++并不是一个原子操作，所以当一个线程读取它的值并加1时，另外一个线程有可能会读到之前的值，这就会引发错误。

为了解决这个问题，必须保证增加操作是原子的，在JDK1.5之前我们可以使用同步技术来做到这一点。
到JDK1.5，`java.util.concurrent.atomic` 包提供了 int 和 long 类型的原子包装类，它们可以自动的保证对于他们的操作是原子的并且不需要使用同步。


## 10-30

### 为什么使用Executor框架？

1. 能复用已存在并空闲的线程从而减少线程对象的创建从而减少了消亡线程的开销。
2. 可有效控制最大并发线程数，提高系统资源使用率，同时避免过多资源竞争。
3. 框架中已经有定时、定期、单线程、并发数控制等功能。


> 综上所述使用线程池框架 Executor 能更好的管理线程、提供系统资源使用率。



## 10-29

### 什么是 Executor 框架？

线程池就是线程的集合，线程池集中管理线程，以实现线程的重用，降低资源消耗，提高响应速度等。线程用于执行异步任务，
单个的线程既是工作单元也是执行机制，从JDK1.5开始，为了把工作单元与执行机制分离开，Executor框架诞生了，他是一个用于统一创建与运行的接口。
Executor框架实现的就是线程池的功能。

Executor框架包括3大部分：

- 任务。也就是工作单元，包括被执行任务需要实现的接口：Runnable接口或者Callable接口；
- 任务的执行。也就是把任务分派给多个线程的执行机制，包括Executor接口及继承自Executor接口的ExecutorService接口。
- 异步计算的结果。包括Future接口及实现了Future接口的FutureTask类。

## 10-28

### 什么是线程组？

线程组，顾名思义，就是线程的组，逻辑类似项目组，用于管理项目成员，线程组就是用来管理线程的。线程组中可以有线程对象，
也可以有线程组，组中还可以有线程，这样的组织结构有点类似于树的形式。 每个线程都会有一个线程组，如果没有设置将会有些默认的初始化设置。

虽然线程组看上去很有用处，实际上现在的程序开发中已经不推荐使用它了，主要有两个原因：

1. 线程组ThreadGroup对象中比较有用的方法是stop、resume、suspend等方法，由于这几个方法会导致线程的安全问题（主要是死锁问题），
已经被官方废弃掉了，所以线程组本身的应用价值就大打折扣了。

2. 线程组ThreadGroup不是线程安全的，这在使用过程中获取的信息并不全是及时有效的，这就降低了它的统计使用价值。

> 虽然线程组现在已经不被推荐使用了（推荐使用线程池），但是它在线程的异常处理方面还是做出了一定的贡献。当线程运行过程中出现异常情况时，
在某些情况下JVM会把线程的控制权交到线程关联的线程组对象上来进行处理。所以对线程组的了解还是有一定必要的。

 
## 10-27

### 产生死锁的必要条件。

- 互斥条件：共享资源被一个线程占用
- 请求与保持条件（占有且等待）：一个进程因请求资源而阻塞时，对已获得的资源保持不释放
- 不剥夺条件：进程已获得资源，在未使用完之前，不能强行剥夺
- 循环等待条件：多个线程之前循环等待资源，必须是循环的互相等待

## 10-26

### 什么是上下文切换？

由于时分复用的存在，CPU 为每个线程分配时间片并轮转，从一个线程切换到另一个线程，这个过程需要先保存当前线程的状态，
然后加载新线程的状态，这就是上下文切换。

上下文切换通常是计算密集型的，会消耗大量 CPU 的时间。而 Linux 的一个特性就是上下文切换和模式切换的消耗非常少。

## 10-25

### 如何停止一个正在运行的线程？

要停止一个正在运行的线程，可以使用 `Thread.interrupt()` 方法来中断线程，或者使用 `Thread.stop()` 方法来停止线程。

## 10-24

### 线程不安全的本质什么?

由于各个硬件设备的数据处理速度有极大差异，为了处理 CPU、内存、I/O 设备之间的速度差异，计算机体系结构、操作系统以及程序编译过程都做出了相应的优化。

- CPU 增加了缓存，以均衡与内存之间的速度差异，这导致了 `可见性问题`。
- 操作系统增加了进程、线程，以分时复用 CPU，这导致了 `原子性问题`。
- 编译器优化指令执行次序，使得缓存能够得到更加合理的利用，这导致了 `有序性问题`。


## 10-23

### AOP 的实现方式？

- **静态代理：** 代理类在编译阶段生成，在编译阶段将通知织入Java字节码中，也称编译时增强。AspectJ使用的是静态代理。
- **动态代理：** 代理类在程序运行时创建，AOP框架不会去修改字节码，而是在内存中临时生成一个代理对象，在运行期间对业务方法进行增强，不会生成新类。

## 10-22

### 什么是 AOP？

AOP （Aspect oriented programming）区别于OOP （面向对象编程），是对 OOP 的一种补充。
它会将事务管理、日志记录等公共业务逻辑封装为切面单独处理，与业务代码分割。减少重复性代码，降低系统耦合性。

## 10-21

### 什么是 IOC？
IOC （Inversion of Control）控制反转。指对象的生命周期控制通过反射由 `Spring 容器` 处理，包括对象的初始化、创建、销毁等。 
能够降低类之间的耦合。

IOC 又称为 DI（依赖注入），是指在 Spring 创建对象的过程中，把对象依赖的属性注入到对象中。有两种方式：构造器注入和属性注入。

## 10-20

### 请简单介绍JAVA8新特性？

> JAVA8 已经名义上停止维护了，但是 JAVA8 新特性还是面试经常会问到的点。就是为了考察 `函数式编程` 以及 `stream 流` 的掌握情况。

- **Lambda 表达式：**
JAVA8 之后允许使用更简洁的箭头函数创建函数式接口的实例，在功能上与匿名内部类类似，但是更加简洁。

- **Stream 流操作：**
Stream 流允许开发者对集合或数组进行链状流式操作，基于函数式编程模型。分为中间操作及终结操作。

- **Optional 类：**
使用 Optional 可以写出更优雅的代码来避免空指针异常。
Optional 类似于包装类，将具体的数据封装到Optional对象内部。我们可以使用 Optional 中封装好的方法操作封装的数据。优雅的避免空指针异常。

## 10-19

 ### Integer 和 int 的区别？

Java 虽然宣称一切都是对象，但原始数据类型是例外。
int 是整形数字，是 java 的8个原始数据类型（Primitive Types）（char、boolean、byte、short、int、long、float、double）之一。
在 java API 中有对应的包装类，分别是Character、Boolean、Byte、Short、Integer、Long、Float、Double。

Integer 是 int 对应的包装类，它有一个int类型的字段存储数据，并且提供了基本操作，比如数学运算、int和字符串之间转换等。
在 java 5 中引入了自动装箱和自动拆箱功能（boxing/unboxing），java 可以根据上下文，自动进行转换，极大地简化了相关编程。
javac自动把装箱转换为Integer.valueOf(),把拆箱替换为Integer.intValue()。

自动装箱实际上算是一种语法糖。什么是语法糖？可以简单理解为java平台为我们自动进行了一些转换，保证不同的写法在运行时等价，
他们发生在编译阶段，也就是生产的字节码是一致的。

原始数据类型和 java 泛型并不能配合使用。因为 java 的泛型某种程度上可以算作伪泛型，它完全是一种编译期的技巧，
java 编译期会自动将类型转换为对应的特定类型。这就决定了使用泛型，必须保证相应类型可以转换为 Object。

## 10-18

### 抽象类和接口的区别？

1. 一个类可以实现多个接口，但只能继承一个抽象类。接口本身可以通过 extends 关键字扩展多个接口。

2. 抽象类可以有构造方法，接口中不能有构造方法。

3. 抽象类中不一定都是抽象方法，也可以全是具体方法（非抽象方法）。在 Java8 之前，接口中的所有方法必须是抽象的。但Java8的时候，接口可以有默认方法和静态方法。

4. 接口中只能有 static、final 变量，不能有其他变量，而抽象类中不一定。

5. 接口中的方法和变量默认修饰符为 public（写不写都是public），
而抽象类中的方法可以是 public，protected 和默认类型（抽象方法就是为了被重写所以不能是 private 修饰）

## 10-17

### 构造器是否可被重写？


重写是子类覆盖父类的方法，而构造器名称与类名相同，不可能存在重写的概念。

但是在一个类中，是可以存在多个参数不同的构造器的，这是构造器的重载。


## 10-16

### 请描述 & 和 && 的区别。

**相同点：**`&` 和 `&&` 都可以用作逻辑与的运算符，表示逻辑与（and）。

**不同点：**

1、`&&` 具有短路的功能，而 `&` 不具备短路功能。

2、当 `&` 运算符两边的表达式的结果都为 true 时，整个运算结果才为 true。而&&运算符第一个表达式为 false 时，则结果为 false，不再计算第二个表达式。 

3、`&` 还可以用作位运算符，当 `&` 操作符两边的表达式不是boolean类型时，`&` 表示按位与操作，
我们通常使用 0x0f 来与一个整数进行&运算，来获取该整数的最低4个 bit 位，例如：0x31 & 0x0f 的结果为 0x01。

## 10-15

### 请描述面向对象的特征。

面向对象有三大特征：`继承`、`封装`、`多态`

如果是四大特征：`继承`、`封装`、`多态`、`抽象`

**继承：**
在定义和实现一个类的时候，可以在一个已经存在的类的基础之上来进行，把这个已经存在的类所定义的内容作为自己的内容，
并可以加入若干新的内容，或修改原来的方法使之更适合特殊的需要，这就是继承。比如，遗产的继承。
**封装：**
面向对象的封装性指的是将对象封装成一个高度自治和相对封闭的个体，对象状态（属性）由这个对象自己的行为（方法）来读取和改变
**多态：**
多态指的是程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，
即一个引用变量到底会指向哪个类的实例对象，该引用变量发出的方法调用到底在哪个类中实现的方法，必须在由程序运营期间才能决定。
**抽象：**
抽象就是找出一些事物的相似和共性之处，然后将这些事物归为一个类，这个类只考虑这些事物的相似和共性之处，
并且会忽略与当前主题和目标无关的那些方面，将注意力集中在与当前目标有关的方面。就是把现实生活的对象，抽象为类。

## 10-14

### Java 中 throw 和 throws 区别？

- `throw` 是语句抛出的一个异常。
- `throws` 是方法可能抛出异常的声明。

两者都是“消极处理异常”的方式（指抛出或可能抛出异常）。

## 10-13

### 运行时异常与受检异常有何异同？

所有异常都继承自 `java.lang.Throwable`，它有两个直接的子类 Error 与 Exception。

Java Compiler 要求所有的 Exception 要么被 catch ，要么被 throw，除非这是一个 RuntimeExeption。

**受检异常（Checked Exception）**是在编译时期有编译器检测的异常，该异常必须要被处理。受检异常继承于Exception。

**非受检异常（Unchecked Exception）**是在运行时期的异常，即编译器不会检测异常，需要时也可以捕获异常。非受检异常继承于RuntimeException。


## 10-12

### 是否可以继承String类？

String 类是不能被继承的，因为他是被final关键字修饰的。

```java
public final class String
    implements java.io.Serializable, Comparable<String>, CharSequence,
               Constable, ConstantDesc {
  ......
}

```

## 10-11

### String 类的长度有限制吗？

String 是由一个字符数组 `char[]` 来存储的，由于数组的长度及索引是整数且 String 类中返回字符串长度的方法 `length()` 的返回值也是 int ，
所以通过查看 java 源码中的类 Integer 我们可以看到 Integer 的最大范围是`2^31 -1`,
由于数组是从0开始的，所以数组的最大长度可以使【0~2^31】通过计算是大概4GB。

但是通过翻阅 java 虚拟机手册对 class 文件格式的定义以及常量池中对 String 类型的结构体定义我们可以知道对于索引定义了 u2，就是无符号占2个字节，
2个字节可以表示的最大范围是 `2^16 -1 = 65535`。 但是由于JVM需要1个字节表示结束指令，所以这个范围就为65534了。
超出这个范围在编译时期是会报错的，但是运行时拼接或者赋值的话范围是在整形的最大范围。

## 10-10

### 什么是节流和防抖？应用场景有哪些？

在前端开发过程中，当函数绑定到某些可能会持续触发的事件中时，
可能会造成性能和资源的浪费。如鼠标的移动、提交按钮可能被用户快速重复的点击等。
**节流**和**防抖**就是为了解决这一问题。

- **防抖（debounce）：**
防抖指事件触发时，它将在指定时间后执行，如果这段时间内再次被调用，则重新计算执行时间。
通常用于滚动事件、调整窗口大小、鼠标移动、窗口搜索建议等。
```javascript
function debounce(func, delay) {
    let timeoutId;
    return function (...args) {
        clearTimeout(timeoutId);
        timeoutId = setTimeout(() => {
            func(...args);
        }, delay);
    };
}

// 使用防抖函数
const debouncedFunction = debounce(() => {
    console.log('Debounced function called.');
}, 1000);

// 模拟事件触发
setInterval(() => {
    debouncedFunction();
}, 200);  // 防抖后，该函数触发后会等待1秒，如果1秒内再次触发，则重新计时

```
- **节流（throttle）：** 
节流指连续触发多次的事件在指定时间范围内只执行一次，进而限制函数的执行频率。
通常用于自动保存、延时执行等。
```javascript
function throttle(func, delay) {
  let lastCall = 0;
  return function (...args) {
    const now = new Date().getTime();
    if (now - lastCall < delay) return;
    lastCall = now;
    func(...args);
  };
}

// 使用节流函数
const throttledFunction = throttle(() => {
  console.log('Throttled function called.');
}, 1000);

// 模拟事件触发
setInterval(throttledFunction, 200);  // 节流后，该函数每秒最多执行一次

```

> 总的来说，节流和防抖都是为了限制函数执行的频率，以优化性能、减少不必要的计算或请求，提高用户体验。选择使用哪种取决于具体的需求和事件特性。

## 10-9

### 请描述 static 修饰符。

`static` 关键字可以用于类、方法、属性等。

**静态字段**

如果将一个字段定义为static，那么这个字段并不会出现在每个类的对象中。每个静态字段只有一个副本。可以认为静态字段属于类，而不属于单个对象。

**静态常量**

JAVA中没有用于修饰常量的关键字，所以常量的修饰通常使用 `public static final` 三个关键字共同修饰。使其静态加载且不允许修改。

**静态方法**

静态方法是不操作对象的方法。例如 `Math.pow(x,a)`会计算 x 的 a 次幂。它不会使用任何 Math 对象来完成该方法调用。它没有隐式参数。

**工厂方法**

类似于 `LocalDate` 和 `NumberFormat` 的类使用静态工厂方法来构造对象，就是静态方法：

```Java
LocalDate localdate = LocalDate.now(); 
LocalDate localdate = LocalDate.of(2020, 5, 13);  
System.out.println(NumberFormat.format(0.1));
```

**main 方法**

调用静态方法不需要任何对象，与 `Math.pow` 同理，main 方法也是一个静态方法，启动程序时没有任何对象，将执行 main 方法并构造程序所需要的对象。

## 10-8

### 请描述修饰符、访问修饰符，非访问修饰符。

- **修饰符**（Modifiers）：指用于修饰类、方法。变量等的关键字，用于置顶元素的访问类型。作用域、权限、继承性、抽象性等。修饰符分为访问修饰符和非访问修饰符。

- **访问修饰符（Access Modifiers）**: 访问修饰符控制类、方法、变量等的访问权限，共有以下四中：

  | Name      | Description     |
  |]]></description>
            <content:encoded><![CDATA[<h2 id="_10-31" tabindex="-1">10-31 <a class="header-anchor" href="#_10-31" aria-label="Permalink to &quot;10-31&quot;"></a></h2>
<h3 id="什么是原子操作" tabindex="-1">什么是原子操作？ <a class="header-anchor" href="#什么是原子操作" aria-label="Permalink to &quot;什么是原子操作？&quot;"></a></h3>
<p>原子操作（atomic operation）意为”不可被中断的一个或一系列操作” 。处理器使用基于对缓存加锁或总线加锁的方式来实现多处理器之间的原子操作。
在Java中可以通过锁和循环CAS的方式来实现原子操作。CAS操作—— <code>Compare &amp; Set</code>，或是 <code>Compare &amp; Swap</code>，现在几乎所有的CPU指令都支持CAS的原子操作。</p>
<p>原子操作是指一个不受其他操作影响的操作任务单元。原子操作是在多线程环境下避免数据不一致必须的手段。
int++并不是一个原子操作，所以当一个线程读取它的值并加1时，另外一个线程有可能会读到之前的值，这就会引发错误。</p>
<p>为了解决这个问题，必须保证增加操作是原子的，在JDK1.5之前我们可以使用同步技术来做到这一点。
到JDK1.5，<code>java.util.concurrent.atomic</code> 包提供了 int 和 long 类型的原子包装类，它们可以自动的保证对于他们的操作是原子的并且不需要使用同步。</p>
<h2 id="_10-30" tabindex="-1">10-30 <a class="header-anchor" href="#_10-30" aria-label="Permalink to &quot;10-30&quot;"></a></h2>
<h3 id="为什么使用executor框架" tabindex="-1">为什么使用Executor框架？ <a class="header-anchor" href="#为什么使用executor框架" aria-label="Permalink to &quot;为什么使用Executor框架？&quot;"></a></h3>
<ol>
<li>能复用已存在并空闲的线程从而减少线程对象的创建从而减少了消亡线程的开销。</li>
<li>可有效控制最大并发线程数，提高系统资源使用率，同时避免过多资源竞争。</li>
<li>框架中已经有定时、定期、单线程、并发数控制等功能。</li>
</ol>
<blockquote>
<p>综上所述使用线程池框架 Executor 能更好的管理线程、提供系统资源使用率。</p>
</blockquote>
<h2 id="_10-29" tabindex="-1">10-29 <a class="header-anchor" href="#_10-29" aria-label="Permalink to &quot;10-29&quot;"></a></h2>
<h3 id="什么是-executor-框架" tabindex="-1">什么是 Executor 框架？ <a class="header-anchor" href="#什么是-executor-框架" aria-label="Permalink to &quot;什么是 Executor 框架？&quot;"></a></h3>
<p>线程池就是线程的集合，线程池集中管理线程，以实现线程的重用，降低资源消耗，提高响应速度等。线程用于执行异步任务，
单个的线程既是工作单元也是执行机制，从JDK1.5开始，为了把工作单元与执行机制分离开，Executor框架诞生了，他是一个用于统一创建与运行的接口。
Executor框架实现的就是线程池的功能。</p>
<p>Executor框架包括3大部分：</p>
<ul>
<li>任务。也就是工作单元，包括被执行任务需要实现的接口：Runnable接口或者Callable接口；</li>
<li>任务的执行。也就是把任务分派给多个线程的执行机制，包括Executor接口及继承自Executor接口的ExecutorService接口。</li>
<li>异步计算的结果。包括Future接口及实现了Future接口的FutureTask类。</li>
</ul>
<h2 id="_10-28" tabindex="-1">10-28 <a class="header-anchor" href="#_10-28" aria-label="Permalink to &quot;10-28&quot;"></a></h2>
<h3 id="什么是线程组" tabindex="-1">什么是线程组？ <a class="header-anchor" href="#什么是线程组" aria-label="Permalink to &quot;什么是线程组？&quot;"></a></h3>
<p>线程组，顾名思义，就是线程的组，逻辑类似项目组，用于管理项目成员，线程组就是用来管理线程的。线程组中可以有线程对象，
也可以有线程组，组中还可以有线程，这样的组织结构有点类似于树的形式。 每个线程都会有一个线程组，如果没有设置将会有些默认的初始化设置。</p>
<p>虽然线程组看上去很有用处，实际上现在的程序开发中已经不推荐使用它了，主要有两个原因：</p>
<ol>
<li>
<p>线程组ThreadGroup对象中比较有用的方法是stop、resume、suspend等方法，由于这几个方法会导致线程的安全问题（主要是死锁问题），
已经被官方废弃掉了，所以线程组本身的应用价值就大打折扣了。</p>
</li>
<li>
<p>线程组ThreadGroup不是线程安全的，这在使用过程中获取的信息并不全是及时有效的，这就降低了它的统计使用价值。</p>
</li>
</ol>
<blockquote>
<p>虽然线程组现在已经不被推荐使用了（推荐使用线程池），但是它在线程的异常处理方面还是做出了一定的贡献。当线程运行过程中出现异常情况时，
在某些情况下JVM会把线程的控制权交到线程关联的线程组对象上来进行处理。所以对线程组的了解还是有一定必要的。</p>
</blockquote>
<h2 id="_10-27" tabindex="-1">10-27 <a class="header-anchor" href="#_10-27" aria-label="Permalink to &quot;10-27&quot;"></a></h2>
<h3 id="产生死锁的必要条件。" tabindex="-1">产生死锁的必要条件。 <a class="header-anchor" href="#产生死锁的必要条件。" aria-label="Permalink to &quot;产生死锁的必要条件。&quot;"></a></h3>
<ul>
<li>互斥条件：共享资源被一个线程占用</li>
<li>请求与保持条件（占有且等待）：一个进程因请求资源而阻塞时，对已获得的资源保持不释放</li>
<li>不剥夺条件：进程已获得资源，在未使用完之前，不能强行剥夺</li>
<li>循环等待条件：多个线程之前循环等待资源，必须是循环的互相等待</li>
</ul>
<h2 id="_10-26" tabindex="-1">10-26 <a class="header-anchor" href="#_10-26" aria-label="Permalink to &quot;10-26&quot;"></a></h2>
<h3 id="什么是上下文切换" tabindex="-1">什么是上下文切换？ <a class="header-anchor" href="#什么是上下文切换" aria-label="Permalink to &quot;什么是上下文切换？&quot;"></a></h3>
<p>由于时分复用的存在，CPU 为每个线程分配时间片并轮转，从一个线程切换到另一个线程，这个过程需要先保存当前线程的状态，
然后加载新线程的状态，这就是上下文切换。</p>
<p>上下文切换通常是计算密集型的，会消耗大量 CPU 的时间。而 Linux 的一个特性就是上下文切换和模式切换的消耗非常少。</p>
<h2 id="_10-25" tabindex="-1">10-25 <a class="header-anchor" href="#_10-25" aria-label="Permalink to &quot;10-25&quot;"></a></h2>
<h3 id="如何停止一个正在运行的线程" tabindex="-1">如何停止一个正在运行的线程？ <a class="header-anchor" href="#如何停止一个正在运行的线程" aria-label="Permalink to &quot;如何停止一个正在运行的线程？&quot;"></a></h3>
<p>要停止一个正在运行的线程，可以使用 <code>Thread.interrupt()</code> 方法来中断线程，或者使用 <code>Thread.stop()</code> 方法来停止线程。</p>
<h2 id="_10-24" tabindex="-1">10-24 <a class="header-anchor" href="#_10-24" aria-label="Permalink to &quot;10-24&quot;"></a></h2>
<h3 id="线程不安全的本质什么" tabindex="-1">线程不安全的本质什么? <a class="header-anchor" href="#线程不安全的本质什么" aria-label="Permalink to &quot;线程不安全的本质什么?&quot;"></a></h3>
<p>由于各个硬件设备的数据处理速度有极大差异，为了处理 CPU、内存、I/O 设备之间的速度差异，计算机体系结构、操作系统以及程序编译过程都做出了相应的优化。</p>
<ul>
<li>CPU 增加了缓存，以均衡与内存之间的速度差异，这导致了 <code>可见性问题</code>。</li>
<li>操作系统增加了进程、线程，以分时复用 CPU，这导致了 <code>原子性问题</code>。</li>
<li>编译器优化指令执行次序，使得缓存能够得到更加合理的利用，这导致了 <code>有序性问题</code>。</li>
</ul>
<h2 id="_10-23" tabindex="-1">10-23 <a class="header-anchor" href="#_10-23" aria-label="Permalink to &quot;10-23&quot;"></a></h2>
<h3 id="aop-的实现方式" tabindex="-1">AOP 的实现方式？ <a class="header-anchor" href="#aop-的实现方式" aria-label="Permalink to &quot;AOP 的实现方式？&quot;"></a></h3>
<ul>
<li><strong>静态代理：</strong> 代理类在编译阶段生成，在编译阶段将通知织入Java字节码中，也称编译时增强。AspectJ使用的是静态代理。</li>
<li><strong>动态代理：</strong> 代理类在程序运行时创建，AOP框架不会去修改字节码，而是在内存中临时生成一个代理对象，在运行期间对业务方法进行增强，不会生成新类。</li>
</ul>
<h2 id="_10-22" tabindex="-1">10-22 <a class="header-anchor" href="#_10-22" aria-label="Permalink to &quot;10-22&quot;"></a></h2>
<h3 id="什么是-aop" tabindex="-1">什么是 AOP？ <a class="header-anchor" href="#什么是-aop" aria-label="Permalink to &quot;什么是 AOP？&quot;"></a></h3>
<p>AOP （Aspect oriented programming）区别于OOP （面向对象编程），是对 OOP 的一种补充。
它会将事务管理、日志记录等公共业务逻辑封装为切面单独处理，与业务代码分割。减少重复性代码，降低系统耦合性。</p>
<h2 id="_10-21" tabindex="-1">10-21 <a class="header-anchor" href="#_10-21" aria-label="Permalink to &quot;10-21&quot;"></a></h2>
<h3 id="什么是-ioc" tabindex="-1">什么是 IOC？ <a class="header-anchor" href="#什么是-ioc" aria-label="Permalink to &quot;什么是 IOC？&quot;"></a></h3>
<p>IOC （Inversion of Control）控制反转。指对象的生命周期控制通过反射由 <code>Spring 容器</code> 处理，包括对象的初始化、创建、销毁等。
能够降低类之间的耦合。</p>
<p>IOC 又称为 DI（依赖注入），是指在 Spring 创建对象的过程中，把对象依赖的属性注入到对象中。有两种方式：构造器注入和属性注入。</p>
<h2 id="_10-20" tabindex="-1">10-20 <a class="header-anchor" href="#_10-20" aria-label="Permalink to &quot;10-20&quot;"></a></h2>
<h3 id="请简单介绍java8新特性" tabindex="-1">请简单介绍JAVA8新特性？ <a class="header-anchor" href="#请简单介绍java8新特性" aria-label="Permalink to &quot;请简单介绍JAVA8新特性？&quot;"></a></h3>
<blockquote>
<p>JAVA8 已经名义上停止维护了，但是 JAVA8 新特性还是面试经常会问到的点。就是为了考察 <code>函数式编程</code> 以及 <code>stream 流</code> 的掌握情况。</p>
</blockquote>
<ul>
<li>
<p><strong>Lambda 表达式：</strong>
JAVA8 之后允许使用更简洁的箭头函数创建函数式接口的实例，在功能上与匿名内部类类似，但是更加简洁。</p>
</li>
<li>
<p><strong>Stream 流操作：</strong>
Stream 流允许开发者对集合或数组进行链状流式操作，基于函数式编程模型。分为中间操作及终结操作。</p>
</li>
<li>
<p><strong>Optional 类：</strong>
使用 Optional 可以写出更优雅的代码来避免空指针异常。
Optional 类似于包装类，将具体的数据封装到Optional对象内部。我们可以使用 Optional 中封装好的方法操作封装的数据。优雅的避免空指针异常。</p>
</li>
</ul>
<h2 id="_10-19" tabindex="-1">10-19 <a class="header-anchor" href="#_10-19" aria-label="Permalink to &quot;10-19&quot;"></a></h2>
<h3 id="integer-和-int-的区别" tabindex="-1">Integer 和 int 的区别？ <a class="header-anchor" href="#integer-和-int-的区别" aria-label="Permalink to &quot;Integer 和 int 的区别？&quot;"></a></h3>
<p>Java 虽然宣称一切都是对象，但原始数据类型是例外。
int 是整形数字，是 java 的8个原始数据类型（Primitive Types）（char、boolean、byte、short、int、long、float、double）之一。
在 java API 中有对应的包装类，分别是Character、Boolean、Byte、Short、Integer、Long、Float、Double。</p>
<p>Integer 是 int 对应的包装类，它有一个int类型的字段存储数据，并且提供了基本操作，比如数学运算、int和字符串之间转换等。
在 java 5 中引入了自动装箱和自动拆箱功能（boxing/unboxing），java 可以根据上下文，自动进行转换，极大地简化了相关编程。
javac自动把装箱转换为Integer.valueOf(),把拆箱替换为Integer.intValue()。</p>
<p>自动装箱实际上算是一种语法糖。什么是语法糖？可以简单理解为java平台为我们自动进行了一些转换，保证不同的写法在运行时等价，
他们发生在编译阶段，也就是生产的字节码是一致的。</p>
<p>原始数据类型和 java 泛型并不能配合使用。因为 java 的泛型某种程度上可以算作伪泛型，它完全是一种编译期的技巧，
java 编译期会自动将类型转换为对应的特定类型。这就决定了使用泛型，必须保证相应类型可以转换为 Object。</p>
<h2 id="_10-18" tabindex="-1">10-18 <a class="header-anchor" href="#_10-18" aria-label="Permalink to &quot;10-18&quot;"></a></h2>
<h3 id="抽象类和接口的区别" tabindex="-1">抽象类和接口的区别？ <a class="header-anchor" href="#抽象类和接口的区别" aria-label="Permalink to &quot;抽象类和接口的区别？&quot;"></a></h3>
<ol>
<li>
<p>一个类可以实现多个接口，但只能继承一个抽象类。接口本身可以通过 extends 关键字扩展多个接口。</p>
</li>
<li>
<p>抽象类可以有构造方法，接口中不能有构造方法。</p>
</li>
<li>
<p>抽象类中不一定都是抽象方法，也可以全是具体方法（非抽象方法）。在 Java8 之前，接口中的所有方法必须是抽象的。但Java8的时候，接口可以有默认方法和静态方法。</p>
</li>
<li>
<p>接口中只能有 static、final 变量，不能有其他变量，而抽象类中不一定。</p>
</li>
<li>
<p>接口中的方法和变量默认修饰符为 public（写不写都是public），
而抽象类中的方法可以是 public，protected 和默认类型（抽象方法就是为了被重写所以不能是 private 修饰）</p>
</li>
</ol>
<h2 id="_10-17" tabindex="-1">10-17 <a class="header-anchor" href="#_10-17" aria-label="Permalink to &quot;10-17&quot;"></a></h2>
<h3 id="构造器是否可被重写" tabindex="-1">构造器是否可被重写？ <a class="header-anchor" href="#构造器是否可被重写" aria-label="Permalink to &quot;构造器是否可被重写？&quot;"></a></h3>
<p>重写是子类覆盖父类的方法，而构造器名称与类名相同，不可能存在重写的概念。</p>
<p>但是在一个类中，是可以存在多个参数不同的构造器的，这是构造器的重载。</p>
<h2 id="_10-16" tabindex="-1">10-16 <a class="header-anchor" href="#_10-16" aria-label="Permalink to &quot;10-16&quot;"></a></h2>
<h3 id="请描述-和-的区别。" tabindex="-1">请描述 &amp; 和 &amp;&amp; 的区别。 <a class="header-anchor" href="#请描述-和-的区别。" aria-label="Permalink to &quot;请描述 &amp; 和 &amp;&amp; 的区别。&quot;"></a></h3>
<p><strong>相同点：</strong><code>&amp;</code> 和 <code>&amp;&amp;</code> 都可以用作逻辑与的运算符，表示逻辑与（and）。</p>
<p><strong>不同点：</strong></p>
<p>1、<code>&amp;&amp;</code> 具有短路的功能，而 <code>&amp;</code> 不具备短路功能。</p>
<p>2、当 <code>&amp;</code> 运算符两边的表达式的结果都为 true 时，整个运算结果才为 true。而&amp;&amp;运算符第一个表达式为 false 时，则结果为 false，不再计算第二个表达式。</p>
<p>3、<code>&amp;</code> 还可以用作位运算符，当 <code>&amp;</code> 操作符两边的表达式不是boolean类型时，<code>&amp;</code> 表示按位与操作，
我们通常使用 0x0f 来与一个整数进行&amp;运算，来获取该整数的最低4个 bit 位，例如：0x31 &amp; 0x0f 的结果为 0x01。</p>
<h2 id="_10-15" tabindex="-1">10-15 <a class="header-anchor" href="#_10-15" aria-label="Permalink to &quot;10-15&quot;"></a></h2>
<h3 id="请描述面向对象的特征。" tabindex="-1">请描述面向对象的特征。 <a class="header-anchor" href="#请描述面向对象的特征。" aria-label="Permalink to &quot;请描述面向对象的特征。&quot;"></a></h3>
<p>面向对象有三大特征：<code>继承</code>、<code>封装</code>、<code>多态</code></p>
<p>如果是四大特征：<code>继承</code>、<code>封装</code>、<code>多态</code>、<code>抽象</code></p>
<p><strong>继承：</strong>
在定义和实现一个类的时候，可以在一个已经存在的类的基础之上来进行，把这个已经存在的类所定义的内容作为自己的内容，
并可以加入若干新的内容，或修改原来的方法使之更适合特殊的需要，这就是继承。比如，遗产的继承。
<strong>封装：</strong>
面向对象的封装性指的是将对象封装成一个高度自治和相对封闭的个体，对象状态（属性）由这个对象自己的行为（方法）来读取和改变
<strong>多态：</strong>
多态指的是程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，
即一个引用变量到底会指向哪个类的实例对象，该引用变量发出的方法调用到底在哪个类中实现的方法，必须在由程序运营期间才能决定。
<strong>抽象：</strong>
抽象就是找出一些事物的相似和共性之处，然后将这些事物归为一个类，这个类只考虑这些事物的相似和共性之处，
并且会忽略与当前主题和目标无关的那些方面，将注意力集中在与当前目标有关的方面。就是把现实生活的对象，抽象为类。</p>
<h2 id="_10-14" tabindex="-1">10-14 <a class="header-anchor" href="#_10-14" aria-label="Permalink to &quot;10-14&quot;"></a></h2>
<h3 id="java-中-throw-和-throws-区别" tabindex="-1">Java 中 throw 和 throws 区别？ <a class="header-anchor" href="#java-中-throw-和-throws-区别" aria-label="Permalink to &quot;Java 中 throw 和 throws 区别？&quot;"></a></h3>
<ul>
<li><code>throw</code> 是语句抛出的一个异常。</li>
<li><code>throws</code> 是方法可能抛出异常的声明。</li>
</ul>
<p>两者都是“消极处理异常”的方式（指抛出或可能抛出异常）。</p>
<h2 id="_10-13" tabindex="-1">10-13 <a class="header-anchor" href="#_10-13" aria-label="Permalink to &quot;10-13&quot;"></a></h2>
<h3 id="运行时异常与受检异常有何异同" tabindex="-1">运行时异常与受检异常有何异同？ <a class="header-anchor" href="#运行时异常与受检异常有何异同" aria-label="Permalink to &quot;运行时异常与受检异常有何异同？&quot;"></a></h3>
<p>所有异常都继承自 <code>java.lang.Throwable</code>，它有两个直接的子类 Error 与 Exception。</p>
<p>Java Compiler 要求所有的 Exception 要么被 catch ，要么被 throw，除非这是一个 RuntimeExeption。</p>
<p>**受检异常（Checked Exception）**是在编译时期有编译器检测的异常，该异常必须要被处理。受检异常继承于Exception。</p>
<p>**非受检异常（Unchecked Exception）**是在运行时期的异常，即编译器不会检测异常，需要时也可以捕获异常。非受检异常继承于RuntimeException。</p>
<h2 id="_10-12" tabindex="-1">10-12 <a class="header-anchor" href="#_10-12" aria-label="Permalink to &quot;10-12&quot;"></a></h2>
<h3 id="是否可以继承string类" tabindex="-1">是否可以继承String类？ <a class="header-anchor" href="#是否可以继承string类" aria-label="Permalink to &quot;是否可以继承String类？&quot;"></a></h3>
<p>String 类是不能被继承的，因为他是被final关键字修饰的。</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> String</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    implements</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> java.io.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Serializable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Comparable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">CharSequence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">               Constable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">ConstantDesc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  ......</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="_10-11" tabindex="-1">10-11 <a class="header-anchor" href="#_10-11" aria-label="Permalink to &quot;10-11&quot;"></a></h2>
<h3 id="string-类的长度有限制吗" tabindex="-1">String 类的长度有限制吗？ <a class="header-anchor" href="#string-类的长度有限制吗" aria-label="Permalink to &quot;String 类的长度有限制吗？&quot;"></a></h3>
<p>String 是由一个字符数组 <code>char[]</code> 来存储的，由于数组的长度及索引是整数且 String 类中返回字符串长度的方法 <code>length()</code> 的返回值也是 int ，
所以通过查看 java 源码中的类 Integer 我们可以看到 Integer 的最大范围是<code>2^31 -1</code>,
由于数组是从0开始的，所以数组的最大长度可以使【0~2^31】通过计算是大概4GB。</p>
<p>但是通过翻阅 java 虚拟机手册对 class 文件格式的定义以及常量池中对 String 类型的结构体定义我们可以知道对于索引定义了 u2，就是无符号占2个字节，
2个字节可以表示的最大范围是 <code>2^16 -1 = 65535</code>。 但是由于JVM需要1个字节表示结束指令，所以这个范围就为65534了。
超出这个范围在编译时期是会报错的，但是运行时拼接或者赋值的话范围是在整形的最大范围。</p>
<h2 id="_10-10" tabindex="-1">10-10 <a class="header-anchor" href="#_10-10" aria-label="Permalink to &quot;10-10&quot;"></a></h2>
<h3 id="什么是节流和防抖-应用场景有哪些" tabindex="-1">什么是节流和防抖？应用场景有哪些？ <a class="header-anchor" href="#什么是节流和防抖-应用场景有哪些" aria-label="Permalink to &quot;什么是节流和防抖？应用场景有哪些？&quot;"></a></h3>
<p>在前端开发过程中，当函数绑定到某些可能会持续触发的事件中时，
可能会造成性能和资源的浪费。如鼠标的移动、提交按钮可能被用户快速重复的点击等。
<strong>节流</strong>和<strong>防抖</strong>就是为了解决这一问题。</p>
<ul>
<li><strong>防抖（debounce）：</strong>
防抖指事件触发时，它将在指定时间后执行，如果这段时间内再次被调用，则重新计算执行时间。
通常用于滚动事件、调整窗口大小、鼠标移动、窗口搜索建议等。</li>
</ul>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> debounce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> timeoutId;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">        clearTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(timeoutId);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        timeoutId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">            func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">args);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }, delay);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 使用防抖函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> debouncedFunction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> debounce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'Debounced function called.'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 模拟事件触发</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">setInterval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    debouncedFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 防抖后，该函数触发后会等待1秒，如果1秒内再次触发，则重新计时</span></span></code></pre>
</div><ul>
<li><strong>节流（throttle）：</strong>
节流指连续触发多次的事件在指定时间范围内只执行一次，进而限制函数的执行频率。
通常用于自动保存、延时执行等。</li>
</ul>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> throttle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> lastCall </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> now</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (now </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> lastCall </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> delay) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    lastCall </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> now;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">args);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 使用节流函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> throttledFunction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> throttle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'Throttled function called.'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 模拟事件触发</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">setInterval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(throttledFunction, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 节流后，该函数每秒最多执行一次</span></span></code></pre>
</div><blockquote>
<p>总的来说，节流和防抖都是为了限制函数执行的频率，以优化性能、减少不必要的计算或请求，提高用户体验。选择使用哪种取决于具体的需求和事件特性。</p>
</blockquote>
<h2 id="_10-9" tabindex="-1">10-9 <a class="header-anchor" href="#_10-9" aria-label="Permalink to &quot;10-9&quot;"></a></h2>
<h3 id="请描述-static-修饰符。" tabindex="-1">请描述 static 修饰符。 <a class="header-anchor" href="#请描述-static-修饰符。" aria-label="Permalink to &quot;请描述 static 修饰符。&quot;"></a></h3>
<p><code>static</code> 关键字可以用于类、方法、属性等。</p>
<p><strong>静态字段</strong></p>
<p>如果将一个字段定义为static，那么这个字段并不会出现在每个类的对象中。每个静态字段只有一个副本。可以认为静态字段属于类，而不属于单个对象。</p>
<p><strong>静态常量</strong></p>
<p>JAVA中没有用于修饰常量的关键字，所以常量的修饰通常使用 <code>public static final</code> 三个关键字共同修饰。使其静态加载且不允许修改。</p>
<p><strong>静态方法</strong></p>
<p>静态方法是不操作对象的方法。例如 <code>Math.pow(x,a)</code>会计算 x 的 a 次幂。它不会使用任何 Math 对象来完成该方法调用。它没有隐式参数。</p>
<p><strong>工厂方法</strong></p>
<p>类似于 <code>LocalDate</code> 和 <code>NumberFormat</code> 的类使用静态工厂方法来构造对象，就是静态方法：</p>
<div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">LocalDate localdate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> LocalDate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(); </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">LocalDate localdate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> LocalDate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2020</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">13</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(NumberFormat.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">));</span></span></code></pre>
</div><p><strong>main 方法</strong></p>
<p>调用静态方法不需要任何对象，与 <code>Math.pow</code> 同理，main 方法也是一个静态方法，启动程序时没有任何对象，将执行 main 方法并构造程序所需要的对象。</p>
<h2 id="_10-8" tabindex="-1">10-8 <a class="header-anchor" href="#_10-8" aria-label="Permalink to &quot;10-8&quot;"></a></h2>
<h3 id="请描述修饰符、访问修饰符-非访问修饰符。" tabindex="-1">请描述修饰符、访问修饰符，非访问修饰符。 <a class="header-anchor" href="#请描述修饰符、访问修饰符-非访问修饰符。" aria-label="Permalink to &quot;请描述修饰符、访问修饰符，非访问修饰符。&quot;"></a></h3>
<ul>
<li>
<p><strong>修饰符</strong>（Modifiers）：指用于修饰类、方法。变量等的关键字，用于置顶元素的访问类型。作用域、权限、继承性、抽象性等。修饰符分为访问修饰符和非访问修饰符。</p>
</li>
<li>
<p><strong>访问修饰符（Access Modifiers）</strong>: 访问修饰符控制类、方法、变量等的访问权限，共有以下四中：</p>
<table tabindex="0">
<thead>
<tr>
<th>Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>public</td>
<td>能被任何类访问。</td>
</tr>
<tr>
<td>protected</td>
<td>同一包课件，其他包的子类可见。</td>
</tr>
<tr>
<td>default</td>
<td>默认，只能在同一包中被访问。</td>
</tr>
<tr>
<td>private</td>
<td>只能在同一类中访问。</td>
</tr>
</tbody>
</table>
</li>
<li>
<p><strong>非访问修饰符（Non-Access Modifiers）</strong>: 非访问修饰符用于实现其他功能，包括以下几种类型：</p>
</li>
</ul>
<table tabindex="0">
<thead>
<tr>
<th>Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>final</td>
<td>表示不可继承的类、不可重写的方法或不可修改的变量。</td>
</tr>
<tr>
<td>abstract</td>
<td>表示抽象类或抽象方法，不能直接实例化抽象类。</td>
</tr>
<tr>
<td>static</td>
<td>静态资源关键字，用于创建类级别的变量或方法，而非实例级别。</td>
</tr>
<tr>
<td>synchronize</td>
<td>用于同步代码块，保证多线程环境下的同步访问。</td>
</tr>
<tr>
<td>transient</td>
<td>用于表示不需要序列化的变量。</td>
</tr>
<tr>
<td>volatile</td>
<td>用于表示多线程共享变量，保证可见性但不保证原子性。</td>
</tr>
<tr>
<td>strictfp</td>
<td>用于强制浮点运算遵循IEEE 764 标准，确保跨平台的浮点计算结果一致。</td>
</tr>
<tr>
<td>sealed</td>
<td>密封类。用于控制哪些类可以对该类进行拓展。</td>
</tr>
<tr>
<td>record</td>
<td>用于创建不可变的数据类。</td>
</tr>
</tbody>
</table>
<h2 id="_10-7" tabindex="-1">10-7 <a class="header-anchor" href="#_10-7" aria-label="Permalink to &quot;10-7&quot;"></a></h2>
<h3 id="什么是方法签名" tabindex="-1">什么是方法签名？ <a class="header-anchor" href="#什么是方法签名" aria-label="Permalink to &quot;什么是方法签名？&quot;"></a></h3>
<p>在上一篇中说到，重写必须要求方法签名相同，这里的<strong>方法签名</strong>（Method Signature），指的是方法名称及参数类型列表。如：</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> a, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> b){</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> b;}</span></span></code></pre>
</div><p>该方法的方法签名为： <code>sum(int, int)</code></p>
<h2 id="_10-6" tabindex="-1">10-6 <a class="header-anchor" href="#_10-6" aria-label="Permalink to &quot;10-6&quot;"></a></h2>
<h3 id="重载和重写是什么意思-有什么区别" tabindex="-1">重载和重写是什么意思？有什么区别？ <a class="header-anchor" href="#重载和重写是什么意思-有什么区别" aria-label="Permalink to &quot;重载和重写是什么意思？有什么区别？&quot;"></a></h3>
<p><code>重载</code>（Overloading）指在同一个类中可以定义多个参数列表不同的同名方法，其互相的关系是重载。它是编译时多态（静态绑定），根据参数列表选择调用对应的方法。</p>
<p><code>重写</code>（Overriding）指子类可以重新定义父类中非私有的方法，方法签名必须相同。子类可以通过重写父类的方法来实现自己的特定行为。
它是运行时多态（动态绑定），在运行时根据对象的实际类型选择调用对应的方法。</p>
<h2 id="_10-5" tabindex="-1">10-5 <a class="header-anchor" href="#_10-5" aria-label="Permalink to &quot;10-5&quot;"></a></h2>
<h3 id="string、stringbuilder、stringbuffer-的区别及使用场景" tabindex="-1">String、StringBuilder、StringBuffer 的区别及使用场景 <a class="header-anchor" href="#string、stringbuilder、stringbuffer-的区别及使用场景" aria-label="Permalink to &quot;String、StringBuilder、StringBuffer 的区别及使用场景&quot;"></a></h3>
<ol>
<li><strong>可变性</strong></li>
</ol>
<ul>
<li><code>String</code> 不可变， <code>StringBuffer</code> 和 <code>StringBuilder</code> 可变</li>
</ul>
<ol start="2">
<li><strong>线程安全</strong></li>
</ol>
<ul>
<li><code>String</code> 不可变，因此是线程安全的</li>
<li><code>StringBuilder</code> 不是线程安全的</li>
<li><code>StringBuffer</code> 是线程安全的，内部使用 synchronized 进行同步</li>
</ul>
<hr>
<h2 id="_10-4" tabindex="-1">10-4 <a class="header-anchor" href="#_10-4" aria-label="Permalink to &quot;10-4&quot;"></a></h2>
<h3 id="请描述-instanceof-关键字" tabindex="-1">请描述 instanceof 关键字 <a class="header-anchor" href="#请描述-instanceof-关键字" aria-label="Permalink to &quot;请描述 instanceof 关键字&quot;"></a></h3>
<p><code>instanceof</code> 是 JAVA  的一个二元操作符，类似于大于小于号，用于测试其左边的对象是否是它右边对象的实例，
返回 Boolean 类型。在下方的 <a href="#_10-3">10-3</a> 的示例中，String 类的 equals 方法中使用了 <code>instanceof</code> 关键字对比较的对象进行实例检查，并转换为 String 类型。</p>
<h2 id="_10-3" tabindex="-1">10-3 <a class="header-anchor" href="#_10-3" aria-label="Permalink to &quot;10-3&quot;"></a></h2>
<h3 id="与-equals-的区别" tabindex="-1"><code>==</code> 与 <code>equals</code> 的区别 <a class="header-anchor" href="#与-equals-的区别" aria-label="Permalink to &quot;`==` 与 `equals` 的区别&quot;"></a></h3>
<p>两者的作用都是判断是否相等。但是 <code>==</code> 是运算符，<code>equals</code> 是继承于 Object 类的一个方法。</p>
<p>对于 <code>==</code> 来讲，如果比较<strong>基本数据类型</strong>，则比较其存储的值。如果比较<strong>引用数据类型</strong>，则比较其对象的地址值是否相等。</p>
<p>对于 <code>equals</code> 方法来讲，其本身并不提供<strong>基本数据类型</strong>的比较，
但是可以使用 Objects 类提供的静态 equals 进行比较，如果是基本数据类型，其实现也是使用 <code>==</code>：</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(Object a, Object b) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> b) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> &#x26;&#x26;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> a.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(b));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>继承于 Object 类的 <code>equals</code> 方法也是使用 <code>==</code> 进行比较：</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(Object obj) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> ==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> obj);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>所以要比较两个引用数据类型，必须重写其 equals 方法才能实现对于特定条件的比较，这里以常用的 String 类进行举例，其重写的 equals 方法如下：</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(Object anObject) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 判断其地址值相同，直接返回 TRUE</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> ==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> anObject) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 类型检查，判断是否为 String 的实例，如果是，anObject 会被转化为 aString 表示的 String 类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (anObject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">instanceof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> String aString)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        	// 是否压缩（紧凑表示方式），如果压缩则检查其编码是否相同</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        	// 这里 aString 是规范的命名方式。。。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            &#x26;&#x26;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">COMPACT_STRINGS </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">||</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.coder </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> aString.coder)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        	// 遍历比较字符数组</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            &#x26;&#x26;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> StringLatin1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(value, aString.value);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="_10-2" tabindex="-1">10-2 <a class="header-anchor" href="#_10-2" aria-label="Permalink to &quot;10-2&quot;"></a></h2>
<h3 id="_3-0-1-0-3-将会返回什么-true-还是-false" tabindex="-1"><code>3 * 0.1 == 0.3</code> 将会返回什么? true 还是 false? <a class="header-anchor" href="#_3-0-1-0-3-将会返回什么-true-还是-false" aria-label="Permalink to &quot;`3 * 0.1 == 0.3` 将会返回什么? true 还是 false?&quot;"></a></h3>
<p><strong>答案：</strong><code>FALSE</code></p>
<p>这道题跟 <code>01+0.2 != 0.3</code> 是一样的，由于在计算机系统中使用二进制浮点数无法精确的表示诸如 <code>10/3</code> 等无限循环的十进制分数的值，
Java中的<code>double</code>和<code>float</code>类型使用IEEE 754标准来表示浮点数，这种表示方式会导致一些十进制分数无法精确地表示。
因此，当你尝试在Java中表示0.3时，可能会得到一个非常接近 0.3 的值，但不会是精确的 0.3。</p>
<p>要想精确的表示十进制小数，可以使用 <code>BigDecimal</code> 类进行精确的十进制数学运算，但是会更为复杂并造成额外的开销。</p>
<h2 id="_10-1" tabindex="-1">10-1 <a class="header-anchor" href="#_10-1" aria-label="Permalink to &quot;10-1&quot;"></a></h2>
<h3 id="请详述-jdk-jre-jvm-等的关系" tabindex="-1">请详述 <code>JDK</code> <code>JRE</code> <code>JVM</code> 等的关系 <a class="header-anchor" href="#请详述-jdk-jre-jvm-等的关系" aria-label="Permalink to &quot;请详述 `JDK` `JRE` `JVM` 等的关系&quot;"></a></h3>
<div class="tip custom-block"><p class="custom-block-title">声明</p>
<p>该内容由 <code>CHATGPT</code> 生成</p>
</div>
<ol>
<li>
<p><strong><code>JDK</code>（Java Development Kit）</strong>：</p>
<p><code>JDK</code> 是Java开发工具包，它是Java开发人员用来编写、编译、调试和运行Java程序的核心工具。</p>
</li>
<li>
<p>JDK包括了Java编译器（javac）、Java解释器（java）、Java文档生成器（javadoc）等工具，以及Java开发所需的库和资源文件。</p>
</li>
<li>
<p><strong><code>JRE</code>（Java Runtime Environment）</strong>：</p>
<p>JRE是Java运行时环境，是Java程序的运行环境，用于执行已经编译好的Java字节码。
<code>JRE</code>包括了Java虚拟机（<code>JVM</code>）、Java类库（Java API）和运行时所需的其他组件。JRE提供了在特定平台上运行Java程序所需的基本功能。</p>
</li>
<li>
<p><strong><code>JVM</code>（Java Virtual Machine）</strong>：</p>
<p><code>JVM</code> 是Java虚拟机，是Java程序的运行引擎，负责将Java字节码解释或编译成特定平台的本地机器代码，并执行程序。
<code>JVM</code> 是 <code>JRE</code> 的一部分，它是一个虚拟的计算机，可以在不同的硬件和操作系统上运行Java程序。</p>
</li>
</ol>
<p><strong>关系总结</strong>：</p>
<ul>
<li>JDK包括JRE，JRE包括JVM。</li>
<li>JDK提供了开发、编译、调试等工具，以及JRE所需的库和资源。</li>
<li>JRE提供了JVM和Java API，用于运行Java程序。</li>
<li>JVM是Java程序的运行引擎，它执行Java字节码并负责内存管理、垃圾回收等。</li>
<li>Java程序首先由JDK编译生成Java字节码，然后JRE中的JVM解释或编译Java字节码并执行。</li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[11-30 ]]></title>
            <link>https://www.imufeng.cn/interview/question-by-day/2023/11.html</link>
            <guid>https://www.imufeng.cn/interview/question-by-day/2023/11.html</guid>
            <pubDate>Sat, 05 Oct 2024 12:44:16 GMT</pubDate>
            <description><![CDATA[## 11-30 

### 依赖注入的方法有哪些？

1. 构造器注入
2. Setter 方法注入
3. 接口注入
4. 注解注入
5. 工厂方法注入

## 11-29

### BeanFactory 和 FactoryBean 的区别？

- **BeanFactory**：管理 Bean 的容器，Spring 中生成的 Bean 都是由这个接口的实现来管理的。
- **FactoryBean**：通常是用来创建比较复杂的 bean，一般的 bean 直接用 xml 配置即可，但如果一个 bean 的创建过程中涉及到很多其他的 bean 和复杂的逻辑，
直接用 xml 配置比较麻烦，这时可以考虑用 FactoryBean，可以隐藏实例化复杂 Bean 的细节。

## 11-28

### 描述 Bean 的生命周期。

> 以下内容使用 `Github Copilot` 生成。

1. 实例化 Bean：Spring 通过反射机制利用 `<bean>` 的 class 属性指定实现类实例化 Bean。
2. 设置对象属性：Spring 利用 `<bean>` 的 `<property>` 子元素设置 Bean 的属性。
3. 调用 Bean 的初始化方法：如果 `<bean>` 的 init-method 属性指定了初始化方法，则 Spring 通过反射机制调用初始化方法。
4. Bean 可以使用了：Bean 对象已经可以使用了，它是一个可用的 Bean 实例。
5. 当容器关闭时，调用 Bean 的销毁方法：如果 `<bean>` 的 destory-method 属性指定了销毁方法，则 Spring 会通过反射机制调用销毁方法。

## 11-27

### 什么是 BeanDefinition？

`BeanDefinition` 用于管理 Spring 应用的对象和对象之间的依赖关系，是对象依赖关系的数据抽象。

## 11-26

### 描述 Spring 的两种 IOC 容器。

Spring 有两种 IOC 容器：`BeanFactory` 和 `ApplicationContext`。

- `BeanFactory` ：延迟注入(使用到某个 bean 的时候才会注入)，相比于BeanFactory 来说会占用更少的内存，程序启动速度更快。
BeanFactory 提供了最基本的 ioc 容器的功能（最基本的依赖注入支持）。

- `ApplicationContext` ：容器启动的时候，一次性创建所有 bean。ApplicationContext 扩展了 BeanFactory ， 
除了有BeanFactory的功能还有额外更多功能，所以一般开发人员使用 ApplicationContext 会更多。

## 11-25

### 请描述 Spring AOP 的动态代理。

Spring AOP中的动态代理主要有两种方式：JDK动态代理和CGLIB动态代理。

#### JDK动态代理

如果目标类实现了接口，Spring AOP 会选择使用 JDK 动态代理目标类。代理类根据目标类实现的接口动态生成，不需要自己编写，
生成的动态代理类和目标类都实现相同的接口。JDK动态代理的核心是InvocationHandler接口和Proxy类。

> 缺点：目标类必须有实现的接口。如果某个类没有实现接口，那么这个类就不能用JDK动态代理。

#### CGLIB动态代理

如果目标类没有实现接口，那么Spring AOP会选择使用CGLIB来动态代理目标类。CGLIB（Code Generation Library）可以在运行时动态生成类的字节码，
动态创建目标类的子类对象，在子类对象中增强目标类。

CGLIB是通过继承的方式做的动态代理，因此如果某个类被标记为final，那么它是无法使用CGLIB做动态代理的。

> 优点：目标类不需要实现特定的接口，更加灵活。

## 11-24

### 描述AOP的两种实现方式。

AOP 有两种实现方式：**静态代理** 和 **动态代理**。

#### 静态代理

代理类在编译阶段生成，在编译阶段将通知织入Java字节码中，也称编译时增强。AspectJ使用的是静态代理。

> 缺点： 代理对象需要与目标对象实现一样的接口，并且实现接口的方法，会有冗余代码。同时，一旦接口增加方法，目标对象与代理对象都要维护。

#### 动态代理

代理类在程序运行时创建，AOP框架不会去修改字节码，而是在内存中临时生成一个代理对象，在运行期间对业务方法进行增强，不会生成新类。

1.2 动态代理

## 11-23

### CountDownLatch 和 CyclicBarrier 的区别。

- CountDownLatch 的计数器只能使用一次。而 CyclicBarrier 的计数器可以使用 `reset()` 方法重置。
- CyclicBarrier 能处理更为复杂的业务场景，比如计算发生错误，可以结束阻塞，重置计数器，重新执行程序
- CyclicBarrier 提供 `getNumberWaiting()` 方法，可以获得 CyclicBarrier 阻塞的线程数量，还提供 `isBroken()` 方法，可以判断阻塞的线程是否被中断，等等。
- CountDownLatch 会阻塞主线程，CyclicBarrier 不会阻塞主线程，只会阻塞子线程。

## 11-22

### 什么是 CyclicBarrier？

`CyclicBarrier` 是一个同步工具类，它允许一组线程互相等待，直到到达某个公共屏障点（common barrier point）。因为该 barrier 在释放等待线程后可以重用，

```java
import java.util.concurrent.CyclicBarrier;

class Scratch {
    public static void main(String[] args) {
        // CyclicBarrier 示例程序
        CyclicBarrier cyclicBarrier = new CyclicBarrier(2, () -> {
            System.out.println("所有线程执行完毕");
        });
        // 测试运行
        new Thread(() -> {
            try {
                System.out.println("线程1开始执行");
                Thread.sleep(1000);
                System.out.println("线程1执行完毕");
                cyclicBarrier.await();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }).start();
        new Thread(() -> {
            try {
                System.out.println("线程2开始执行");
                Thread.sleep(2000);
                System.out.println("线程2执行完毕");
                cyclicBarrier.await();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }).start();
        System.out.println("主线程执行完毕");
    }
}
```

## 11-21

### 什么是 CountdownLatch？

`CountDownLatch` 是一个同步工具类，用来协调多个线程之间的同步。这个工具通常用来控制线程等待，它可以让某一个线程等待直到倒计时结束，再开始执行。

```java
import java.util.concurrent.CyclicBarrier;

class Scratch {
    public static void main(String[] args) {
        // CountDownLatch 示例程序
        CyclicBarrier barrier = new CyclicBarrier(2, () -> {
            System.out.println("barrier end");
        });
        new Thread(() -> {
            try {
                System.out.println("thread 1");
                barrier.await();
                System.out.println("thread 1 end");
            } catch (Exception e) {
                e.printStackTrace();
            }
        }).start();
        new Thread(() -> {
            try {
                System.out.println("thread 2");
                barrier.await();
                System.out.println("thread 2 end");
            } catch (Exception e) {
                e.printStackTrace();
            }
        }).start();
    }
}
```

## 11-20

### 线程池都有哪些状态？

> 可以通过 `Thread.State` 枚举类来表示线程的状态。
这个枚举包括 NEW（新建）、RUNNABLE（可运行）、BLOCKED（被阻塞）、WAITING（等待）、TIMED_WAITING（定时等待）和 TERMINATED（终止）等状态。
通过 `Thread.getState()` 方法可以获取线程的状态。

1. **RUNNING**：接受新任务并且处理阻塞队列中的任务
2. **SHUTDOWN**：不接受新任务，但是处理阻塞队列中的任务
3. **STOP**：不接受新任务，不处理阻塞队列中的任务，并且中断正在处理的任务
4. **TIDYING**：所有任务都终止了，`workerCount` 为 0，线程池的状态在转换为 TIDYING 状态时会执行钩子函数 `terminated()`
5. **TERMINATED**：`terminated()` 执行完成

## 11-19

### notify() 和 notifyAll() 有什么区别？

`notify()` 方法会随机唤醒等待队列中的一个线程，而 `notifyAll()` 方法会唤醒等待队列中的所有线程。

## 11-18

### sleep() 和 wait() 有什么区别？

- `sleep()` 方法是 Thread 类的静态方法，调用该方法会让当前线程进入休眠状态，不会释放锁，休眠时间到了之后会自动恢复运行状态。
- `wait()` 方法是 Object 类的方法，调用该方法会让当前线程进入等待状态，会释放锁，直到其他线程调用 notify() 或 notifyAll() 方法之后才会重新进入运行状态。

## 11-17

### ThreadLocal 内存泄漏原因，如何避免？

如果在线程池中使用 ThreadLocal 会造成内存泄漏，因为当 ThreadLocal 对象使用完之后，应该要把设置的key，value 也就是 Entry 对象进行回收，
但线程池中的线程不会回收，而线程对象是通过强引用指向 ThreadLocalMap，
ThreadLocalMap 也是通过强引用指向 Entry 对象，线程不被回收，Entry 对象也就不会被回收，从而出现内存泄漏。

#### 解决方法：

- 在使用了 ThreadLocal 对象之后，手动调用 ThreadLocal 的 remove 方法，手动清除 Entry 对象。
- 将 ThreadLocal 变量定义成 private static，这样就一直存在ThreadLocal的强引用，也就能保证任何时候都能将通过 ThreadLocal 的弱引用访问到 Entry 的 value 值，进而清除掉。

## 11-16

### 线程之间如何进行通信？

- 通过共享内存或基于网络通信
- 如果是基于共享内存进行通信，则需要考虑并发问题，什么时候阻塞，什么时候唤醒
- 想 Java 中的 wait()、notify() 就是阻塞唤醒
- 通过网络就比较简单，通过网络连接将数据发送给对方，当然也要考虑到并发问题，处理方式就是加锁等方式。

## 11-15

### 什么是 ThreadLocal？

ThreadLocal 是 Java 中所提供的线程本地存储机制，可以利用该机制将数据缓存在某个线程内部，该线程可以在任意时刻、任意方法中获取缓存的数据。

ThreadLocal 底层是通过 TreadLocalMap 来实现的，每个 Thread 对象中都存在一个 ThreadLocalMap，Map 的 key 为 ThreadLocal 对象，Ma p的 value 为需要缓存的值 。

## 11-14

### synchronized 关键字的作用？

synchronized 关键字可以用于修饰一段代码或一个方法，用于实现现成的同步，表示该段代码不能被多个线程同时执行。

当一个线程进入被 synchronized 关键字修饰的代码块或方法时，其他试图访问的线程将被阻塞。

synchronized 关键字的作用体现在两个方面：

1. 确保方法或代码块的互斥访问。（加锁与解锁）
2. 确保内存可见性。（强制从缓存加载数据）

## 11-13

### 线程池有几种创建方式？

1. newCachedThreadPool 创建一个可缓存线程池
2. newFixedThreadPool 创建一个定长线程池，可控制线程最大并发数 
3. newScheduledThreadPool 创建一个定长线程池，支持定时及周期性任务执行。 
4. newSingleThreadExecutor 创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务

## 11-12

### 线程的 run()和 start()有什么区别？

每个线程都是通过某个特定 Thread 对象所对应的方法 run()来完成其操作的，run()方法称为线程体。通过调用 Thread 类的 start()方法来启动一个线程。

start() 方法用于启动线程，run() 方法用于执行线程的运行时代码。run() 可以重复调用，而 start()只能调用一次。

start() 方法来启动一个线程，真正实现了多线程运行。调用start()方法无需等待run方法体代码执行完毕，可以直接继续执行其他的代码；
此时线程是处于就绪状态，并没有运行。 然后通过此Thread类调用方法run()来完成其运行状态， run()方法运行结束， 此线程终止。然后CPU再调度其它线程。

run()方法是在本线程里的，只是线程里的一个函数，而不是多线程的。 如果直接调用 run()，其实就相当于是调用了一个普通函数而已，直接待用run()方法必须等待run()方法执行完毕才能执行下面的代码，
所以执行路径还是只有一条，根本就没有线程的特征，所以在多线程执行时要使用 start()方法而不是 run()方法。


## 11-11

### 守护线程与用户线程有什么区别？

- 守护线程：运行在后台，为其他前台线程服务。一旦所有用户线程都结束运行，守护线程会随 JVM 一起结束工作。
- 用户线程：运行在前台，执行具体的任务，如程序的主线程、连接网络的子线程等都是用户线程。

## 11-10

### 主线程是不是守护线程？

主线程不是守护线程，它是一个用户线程，它的优先级是普通优先级，当所有的用户线程都结束了，主线程才会结束，如果主线程结束了，其他用户线程还在运行，那么程序也会继续运行。

## 11-9

### 什么是守护线程？

守护线程是一种特殊的线程，它的优先级很低，通常用来做后台作业，比如垃圾回收线程就是一个很称职的守护者，并且它**不能持有任何资源**，
因为它会在任何时候被停止，如果它持有资源，那么其他线程就无法访问这些资源了。

## 11-8

### 线程的状态有哪些？

1. 新建状态（New）：当线程对象对创建后，即进入了新建状态; 
2. 就绪状态（Runnable）：当调用线程对象的 `start()` 方法，线程即进入就绪状态。
3. 运行状态（Running）：当CPU开始调度处于就绪状态的线程时，此时线程才得以真正执行，即进入到运行状态。
4. 阻塞状态（Blocked）：处于运行状态中的线程由于某种原因，暂时放弃对 CPU 的使用权，停止执行，此时进入阻塞状态，直到其进入到就绪状态，才 有机会再次被 CPU 调用以进入到运行状态。
根据阻塞产生的原因不同，阻塞状态又可以分为三种： 
    - 等待阻塞：运行状态中的线程执行 `wait()` 方法，使本线程进入到等待阻塞状态； 
    - 同步阻塞 — 线程在获取 synchronized 同步锁失败（因为锁被其它线程所占用），它会进入同步阻塞状态； 
    - 其他阻塞 — 通过调用线程的 `sleep()` 或 `join()` 或发出了I/O请求时，线程会进入到阻塞状态。当 `sleep()` 状态超时. `join()` 等待线程终止或者超时. 或者 I/O 处理完毕时，线程重新转入就绪状态。 
5. 死亡状态（Dead）：线程执行完了或者因异常退出了 `run()` 方法，该线程结束生命周期。

## 11-7

### 创建线程有哪几种方式？

1. 继承 Thread 类，重写 run() 方法，调用 start() 方法启动线程。
2. 实现 Runnable 接口，重写 run() 方法，创建 Thread 对象，调用 start() 方法启动线程。
3. 实现 Callable 接口，重写 call() 方法，创建 FutureTask 对象，创建 Thread 对象，调用 start() 方法启动线程。
4. 使用线程池创建线程。

> 使用线程池的方式创建是最优解，因为线程池可以有效的控制线程的数量，避免因为创建线程过多导致的内存溢出，提高了系统资源的利用率，同时线程池提供了更多更强大的功能。

## 11-6

### 都有哪些原子类？请举例说明。

`java.util.concurrent `这个包里面提供了一组原子类。其基本的特性就是在多线程环境下，当有多个线程同时执行这些类的实例包含的方法时，具有排他性。

- 原子类：AtomicBoolean，AtomicInteger，AtomicLong，AtomicReference
- 原子数组：AtomicIntegerArray，AtomicLongArray，AtomicReferenceArray
- 原子属性更新器：AtomicLongFieldUpdater，AtomicIntegerFieldUpdater，AtomicReferenceFieldUpdater
- 解决ABA问题的原子类：AtomicMarkableReference（通过引入一个boolean来反映中间有没有变过），AtomicStampedReference（通过引入一个int来累加来反映中间有没有变过）


## 11-5

### 什么是原子操作?

原子操作（atomic operation）意为”不可被中断的一个或一系列操作” 。处理器使用基于对缓存加锁或总线加锁的方式来实现多处理器之间的原子操作。
在Java中可以通过锁和循环CAS的方式来实现原子操作。CAS操作——Compare & Set，或是 Compare & Swap，现在几乎所有的CPU指令都支持CAS的原子操作。

原子操作是指一个不受其他操作影响的操作任务单元。原子操作是在多线程环境下避免数据不一致必须的手段。
`int++` 并不是一个原子操作，所以当一个线程读取它的值并加1时，另外一个线程有可能会读到之前的值，这就会引发错误。

为了解决这个问题，必须保证增加操作是原子的，在JDK1.5之前我们可以使用同步技术来做到这一点。
到JDK1.5，java.util.concurrent.atomic包提供了int和long类型的原子包装类，它们可以自动的保证对于他们的操作是原子的并且不需要使用同步。

## 11-4

### execute 与 submit 的用法与区别。

execute 执行后**没有返回结果**，只有1种用法

| 方法                               | 描述                                          |
|]]></description>
            <content:encoded><![CDATA[<h2 id="_11-30" tabindex="-1">11-30 <a class="header-anchor" href="#_11-30" aria-label="Permalink to &quot;11-30&quot;"></a></h2>
<h3 id="依赖注入的方法有哪些" tabindex="-1">依赖注入的方法有哪些？ <a class="header-anchor" href="#依赖注入的方法有哪些" aria-label="Permalink to &quot;依赖注入的方法有哪些？&quot;"></a></h3>
<ol>
<li>构造器注入</li>
<li>Setter 方法注入</li>
<li>接口注入</li>
<li>注解注入</li>
<li>工厂方法注入</li>
</ol>
<h2 id="_11-29" tabindex="-1">11-29 <a class="header-anchor" href="#_11-29" aria-label="Permalink to &quot;11-29&quot;"></a></h2>
<h3 id="beanfactory-和-factorybean-的区别" tabindex="-1">BeanFactory 和 FactoryBean 的区别？ <a class="header-anchor" href="#beanfactory-和-factorybean-的区别" aria-label="Permalink to &quot;BeanFactory 和 FactoryBean 的区别？&quot;"></a></h3>
<ul>
<li><strong>BeanFactory</strong>：管理 Bean 的容器，Spring 中生成的 Bean 都是由这个接口的实现来管理的。</li>
<li><strong>FactoryBean</strong>：通常是用来创建比较复杂的 bean，一般的 bean 直接用 xml 配置即可，但如果一个 bean 的创建过程中涉及到很多其他的 bean 和复杂的逻辑，
直接用 xml 配置比较麻烦，这时可以考虑用 FactoryBean，可以隐藏实例化复杂 Bean 的细节。</li>
</ul>
<h2 id="_11-28" tabindex="-1">11-28 <a class="header-anchor" href="#_11-28" aria-label="Permalink to &quot;11-28&quot;"></a></h2>
<h3 id="描述-bean-的生命周期。" tabindex="-1">描述 Bean 的生命周期。 <a class="header-anchor" href="#描述-bean-的生命周期。" aria-label="Permalink to &quot;描述 Bean 的生命周期。&quot;"></a></h3>
<blockquote>
<p>以下内容使用 <code>Github Copilot</code> 生成。</p>
</blockquote>
<ol>
<li>实例化 Bean：Spring 通过反射机制利用 <code>&lt;bean&gt;</code> 的 class 属性指定实现类实例化 Bean。</li>
<li>设置对象属性：Spring 利用 <code>&lt;bean&gt;</code> 的 <code>&lt;property&gt;</code> 子元素设置 Bean 的属性。</li>
<li>调用 Bean 的初始化方法：如果 <code>&lt;bean&gt;</code> 的 init-method 属性指定了初始化方法，则 Spring 通过反射机制调用初始化方法。</li>
<li>Bean 可以使用了：Bean 对象已经可以使用了，它是一个可用的 Bean 实例。</li>
<li>当容器关闭时，调用 Bean 的销毁方法：如果 <code>&lt;bean&gt;</code> 的 destory-method 属性指定了销毁方法，则 Spring 会通过反射机制调用销毁方法。</li>
</ol>
<h2 id="_11-27" tabindex="-1">11-27 <a class="header-anchor" href="#_11-27" aria-label="Permalink to &quot;11-27&quot;"></a></h2>
<h3 id="什么是-beandefinition" tabindex="-1">什么是 BeanDefinition？ <a class="header-anchor" href="#什么是-beandefinition" aria-label="Permalink to &quot;什么是 BeanDefinition？&quot;"></a></h3>
<p><code>BeanDefinition</code> 用于管理 Spring 应用的对象和对象之间的依赖关系，是对象依赖关系的数据抽象。</p>
<h2 id="_11-26" tabindex="-1">11-26 <a class="header-anchor" href="#_11-26" aria-label="Permalink to &quot;11-26&quot;"></a></h2>
<h3 id="描述-spring-的两种-ioc-容器。" tabindex="-1">描述 Spring 的两种 IOC 容器。 <a class="header-anchor" href="#描述-spring-的两种-ioc-容器。" aria-label="Permalink to &quot;描述 Spring 的两种 IOC 容器。&quot;"></a></h3>
<p>Spring 有两种 IOC 容器：<code>BeanFactory</code> 和 <code>ApplicationContext</code>。</p>
<ul>
<li>
<p><code>BeanFactory</code> ：延迟注入(使用到某个 bean 的时候才会注入)，相比于BeanFactory 来说会占用更少的内存，程序启动速度更快。
BeanFactory 提供了最基本的 ioc 容器的功能（最基本的依赖注入支持）。</p>
</li>
<li>
<p><code>ApplicationContext</code> ：容器启动的时候，一次性创建所有 bean。ApplicationContext 扩展了 BeanFactory ，
除了有BeanFactory的功能还有额外更多功能，所以一般开发人员使用 ApplicationContext 会更多。</p>
</li>
</ul>
<h2 id="_11-25" tabindex="-1">11-25 <a class="header-anchor" href="#_11-25" aria-label="Permalink to &quot;11-25&quot;"></a></h2>
<h3 id="请描述-spring-aop-的动态代理。" tabindex="-1">请描述 Spring AOP 的动态代理。 <a class="header-anchor" href="#请描述-spring-aop-的动态代理。" aria-label="Permalink to &quot;请描述 Spring AOP 的动态代理。&quot;"></a></h3>
<p>Spring AOP中的动态代理主要有两种方式：JDK动态代理和CGLIB动态代理。</p>
<h4 id="jdk动态代理" tabindex="-1">JDK动态代理 <a class="header-anchor" href="#jdk动态代理" aria-label="Permalink to &quot;JDK动态代理&quot;"></a></h4>
<p>如果目标类实现了接口，Spring AOP 会选择使用 JDK 动态代理目标类。代理类根据目标类实现的接口动态生成，不需要自己编写，
生成的动态代理类和目标类都实现相同的接口。JDK动态代理的核心是InvocationHandler接口和Proxy类。</p>
<blockquote>
<p>缺点：目标类必须有实现的接口。如果某个类没有实现接口，那么这个类就不能用JDK动态代理。</p>
</blockquote>
<h4 id="cglib动态代理" tabindex="-1">CGLIB动态代理 <a class="header-anchor" href="#cglib动态代理" aria-label="Permalink to &quot;CGLIB动态代理&quot;"></a></h4>
<p>如果目标类没有实现接口，那么Spring AOP会选择使用CGLIB来动态代理目标类。CGLIB（Code Generation Library）可以在运行时动态生成类的字节码，
动态创建目标类的子类对象，在子类对象中增强目标类。</p>
<p>CGLIB是通过继承的方式做的动态代理，因此如果某个类被标记为final，那么它是无法使用CGLIB做动态代理的。</p>
<blockquote>
<p>优点：目标类不需要实现特定的接口，更加灵活。</p>
</blockquote>
<h2 id="_11-24" tabindex="-1">11-24 <a class="header-anchor" href="#_11-24" aria-label="Permalink to &quot;11-24&quot;"></a></h2>
<h3 id="描述aop的两种实现方式。" tabindex="-1">描述AOP的两种实现方式。 <a class="header-anchor" href="#描述aop的两种实现方式。" aria-label="Permalink to &quot;描述AOP的两种实现方式。&quot;"></a></h3>
<p>AOP 有两种实现方式：<strong>静态代理</strong> 和 <strong>动态代理</strong>。</p>
<h4 id="静态代理" tabindex="-1">静态代理 <a class="header-anchor" href="#静态代理" aria-label="Permalink to &quot;静态代理&quot;"></a></h4>
<p>代理类在编译阶段生成，在编译阶段将通知织入Java字节码中，也称编译时增强。AspectJ使用的是静态代理。</p>
<blockquote>
<p>缺点： 代理对象需要与目标对象实现一样的接口，并且实现接口的方法，会有冗余代码。同时，一旦接口增加方法，目标对象与代理对象都要维护。</p>
</blockquote>
<h4 id="动态代理" tabindex="-1">动态代理 <a class="header-anchor" href="#动态代理" aria-label="Permalink to &quot;动态代理&quot;"></a></h4>
<p>代理类在程序运行时创建，AOP框架不会去修改字节码，而是在内存中临时生成一个代理对象，在运行期间对业务方法进行增强，不会生成新类。</p>
<p>1.2 动态代理</p>
<h2 id="_11-23" tabindex="-1">11-23 <a class="header-anchor" href="#_11-23" aria-label="Permalink to &quot;11-23&quot;"></a></h2>
<h3 id="countdownlatch-和-cyclicbarrier-的区别。" tabindex="-1">CountDownLatch 和 CyclicBarrier 的区别。 <a class="header-anchor" href="#countdownlatch-和-cyclicbarrier-的区别。" aria-label="Permalink to &quot;CountDownLatch 和 CyclicBarrier 的区别。&quot;"></a></h3>
<ul>
<li>CountDownLatch 的计数器只能使用一次。而 CyclicBarrier 的计数器可以使用 <code>reset()</code> 方法重置。</li>
<li>CyclicBarrier 能处理更为复杂的业务场景，比如计算发生错误，可以结束阻塞，重置计数器，重新执行程序</li>
<li>CyclicBarrier 提供 <code>getNumberWaiting()</code> 方法，可以获得 CyclicBarrier 阻塞的线程数量，还提供 <code>isBroken()</code> 方法，可以判断阻塞的线程是否被中断，等等。</li>
<li>CountDownLatch 会阻塞主线程，CyclicBarrier 不会阻塞主线程，只会阻塞子线程。</li>
</ul>
<h2 id="_11-22" tabindex="-1">11-22 <a class="header-anchor" href="#_11-22" aria-label="Permalink to &quot;11-22&quot;"></a></h2>
<h3 id="什么是-cyclicbarrier" tabindex="-1">什么是 CyclicBarrier？ <a class="header-anchor" href="#什么是-cyclicbarrier" aria-label="Permalink to &quot;什么是 CyclicBarrier？&quot;"></a></h3>
<p><code>CyclicBarrier</code> 是一个同步工具类，它允许一组线程互相等待，直到到达某个公共屏障点（common barrier point）。因为该 barrier 在释放等待线程后可以重用，</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> java.util.concurrent.CyclicBarrier;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Scratch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        // CyclicBarrier 示例程序</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        CyclicBarrier cyclicBarrier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> CyclicBarrier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"所有线程执行完毕"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        });</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        // 测试运行</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"线程1开始执行"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"线程1执行完毕"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                cyclicBarrier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (Exception </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"线程2开始执行"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"线程2执行完毕"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                cyclicBarrier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (Exception </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"主线程执行完毕"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="_11-21" tabindex="-1">11-21 <a class="header-anchor" href="#_11-21" aria-label="Permalink to &quot;11-21&quot;"></a></h2>
<h3 id="什么是-countdownlatch" tabindex="-1">什么是 CountdownLatch？ <a class="header-anchor" href="#什么是-countdownlatch" aria-label="Permalink to &quot;什么是 CountdownLatch？&quot;"></a></h3>
<p><code>CountDownLatch</code> 是一个同步工具类，用来协调多个线程之间的同步。这个工具通常用来控制线程等待，它可以让某一个线程等待直到倒计时结束，再开始执行。</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> java.util.concurrent.CyclicBarrier;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Scratch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        // CountDownLatch 示例程序</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        CyclicBarrier barrier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> CyclicBarrier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"barrier end"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        });</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"thread 1"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                barrier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"thread 1 end"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (Exception </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"thread 2"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                barrier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"thread 2 end"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (Exception </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="_11-20" tabindex="-1">11-20 <a class="header-anchor" href="#_11-20" aria-label="Permalink to &quot;11-20&quot;"></a></h2>
<h3 id="线程池都有哪些状态" tabindex="-1">线程池都有哪些状态？ <a class="header-anchor" href="#线程池都有哪些状态" aria-label="Permalink to &quot;线程池都有哪些状态？&quot;"></a></h3>
<blockquote>
<p>可以通过 <code>Thread.State</code> 枚举类来表示线程的状态。
这个枚举包括 NEW（新建）、RUNNABLE（可运行）、BLOCKED（被阻塞）、WAITING（等待）、TIMED_WAITING（定时等待）和 TERMINATED（终止）等状态。
通过 <code>Thread.getState()</code> 方法可以获取线程的状态。</p>
</blockquote>
<ol>
<li><strong>RUNNING</strong>：接受新任务并且处理阻塞队列中的任务</li>
<li><strong>SHUTDOWN</strong>：不接受新任务，但是处理阻塞队列中的任务</li>
<li><strong>STOP</strong>：不接受新任务，不处理阻塞队列中的任务，并且中断正在处理的任务</li>
<li><strong>TIDYING</strong>：所有任务都终止了，<code>workerCount</code> 为 0，线程池的状态在转换为 TIDYING 状态时会执行钩子函数 <code>terminated()</code></li>
<li><strong>TERMINATED</strong>：<code>terminated()</code> 执行完成</li>
</ol>
<h2 id="_11-19" tabindex="-1">11-19 <a class="header-anchor" href="#_11-19" aria-label="Permalink to &quot;11-19&quot;"></a></h2>
<h3 id="notify-和-notifyall-有什么区别" tabindex="-1">notify() 和 notifyAll() 有什么区别？ <a class="header-anchor" href="#notify-和-notifyall-有什么区别" aria-label="Permalink to &quot;notify() 和 notifyAll() 有什么区别？&quot;"></a></h3>
<p><code>notify()</code> 方法会随机唤醒等待队列中的一个线程，而 <code>notifyAll()</code> 方法会唤醒等待队列中的所有线程。</p>
<h2 id="_11-18" tabindex="-1">11-18 <a class="header-anchor" href="#_11-18" aria-label="Permalink to &quot;11-18&quot;"></a></h2>
<h3 id="sleep-和-wait-有什么区别" tabindex="-1">sleep() 和 wait() 有什么区别？ <a class="header-anchor" href="#sleep-和-wait-有什么区别" aria-label="Permalink to &quot;sleep() 和 wait() 有什么区别？&quot;"></a></h3>
<ul>
<li><code>sleep()</code> 方法是 Thread 类的静态方法，调用该方法会让当前线程进入休眠状态，不会释放锁，休眠时间到了之后会自动恢复运行状态。</li>
<li><code>wait()</code> 方法是 Object 类的方法，调用该方法会让当前线程进入等待状态，会释放锁，直到其他线程调用 notify() 或 notifyAll() 方法之后才会重新进入运行状态。</li>
</ul>
<h2 id="_11-17" tabindex="-1">11-17 <a class="header-anchor" href="#_11-17" aria-label="Permalink to &quot;11-17&quot;"></a></h2>
<h3 id="threadlocal-内存泄漏原因-如何避免" tabindex="-1">ThreadLocal 内存泄漏原因，如何避免？ <a class="header-anchor" href="#threadlocal-内存泄漏原因-如何避免" aria-label="Permalink to &quot;ThreadLocal 内存泄漏原因，如何避免？&quot;"></a></h3>
<p>如果在线程池中使用 ThreadLocal 会造成内存泄漏，因为当 ThreadLocal 对象使用完之后，应该要把设置的key，value 也就是 Entry 对象进行回收，
但线程池中的线程不会回收，而线程对象是通过强引用指向 ThreadLocalMap，
ThreadLocalMap 也是通过强引用指向 Entry 对象，线程不被回收，Entry 对象也就不会被回收，从而出现内存泄漏。</p>
<h4 id="解决方法" tabindex="-1">解决方法： <a class="header-anchor" href="#解决方法" aria-label="Permalink to &quot;解决方法：&quot;"></a></h4>
<ul>
<li>在使用了 ThreadLocal 对象之后，手动调用 ThreadLocal 的 remove 方法，手动清除 Entry 对象。</li>
<li>将 ThreadLocal 变量定义成 private static，这样就一直存在ThreadLocal的强引用，也就能保证任何时候都能将通过 ThreadLocal 的弱引用访问到 Entry 的 value 值，进而清除掉。</li>
</ul>
<h2 id="_11-16" tabindex="-1">11-16 <a class="header-anchor" href="#_11-16" aria-label="Permalink to &quot;11-16&quot;"></a></h2>
<h3 id="线程之间如何进行通信" tabindex="-1">线程之间如何进行通信？ <a class="header-anchor" href="#线程之间如何进行通信" aria-label="Permalink to &quot;线程之间如何进行通信？&quot;"></a></h3>
<ul>
<li>通过共享内存或基于网络通信</li>
<li>如果是基于共享内存进行通信，则需要考虑并发问题，什么时候阻塞，什么时候唤醒</li>
<li>想 Java 中的 wait()、notify() 就是阻塞唤醒</li>
<li>通过网络就比较简单，通过网络连接将数据发送给对方，当然也要考虑到并发问题，处理方式就是加锁等方式。</li>
</ul>
<h2 id="_11-15" tabindex="-1">11-15 <a class="header-anchor" href="#_11-15" aria-label="Permalink to &quot;11-15&quot;"></a></h2>
<h3 id="什么是-threadlocal" tabindex="-1">什么是 ThreadLocal？ <a class="header-anchor" href="#什么是-threadlocal" aria-label="Permalink to &quot;什么是 ThreadLocal？&quot;"></a></h3>
<p>ThreadLocal 是 Java 中所提供的线程本地存储机制，可以利用该机制将数据缓存在某个线程内部，该线程可以在任意时刻、任意方法中获取缓存的数据。</p>
<p>ThreadLocal 底层是通过 TreadLocalMap 来实现的，每个 Thread 对象中都存在一个 ThreadLocalMap，Map 的 key 为 ThreadLocal 对象，Ma p的 value 为需要缓存的值 。</p>
<h2 id="_11-14" tabindex="-1">11-14 <a class="header-anchor" href="#_11-14" aria-label="Permalink to &quot;11-14&quot;"></a></h2>
<h3 id="synchronized-关键字的作用" tabindex="-1">synchronized 关键字的作用？ <a class="header-anchor" href="#synchronized-关键字的作用" aria-label="Permalink to &quot;synchronized 关键字的作用？&quot;"></a></h3>
<p>synchronized 关键字可以用于修饰一段代码或一个方法，用于实现现成的同步，表示该段代码不能被多个线程同时执行。</p>
<p>当一个线程进入被 synchronized 关键字修饰的代码块或方法时，其他试图访问的线程将被阻塞。</p>
<p>synchronized 关键字的作用体现在两个方面：</p>
<ol>
<li>确保方法或代码块的互斥访问。（加锁与解锁）</li>
<li>确保内存可见性。（强制从缓存加载数据）</li>
</ol>
<h2 id="_11-13" tabindex="-1">11-13 <a class="header-anchor" href="#_11-13" aria-label="Permalink to &quot;11-13&quot;"></a></h2>
<h3 id="线程池有几种创建方式" tabindex="-1">线程池有几种创建方式？ <a class="header-anchor" href="#线程池有几种创建方式" aria-label="Permalink to &quot;线程池有几种创建方式？&quot;"></a></h3>
<ol>
<li>newCachedThreadPool 创建一个可缓存线程池</li>
<li>newFixedThreadPool 创建一个定长线程池，可控制线程最大并发数</li>
<li>newScheduledThreadPool 创建一个定长线程池，支持定时及周期性任务执行。</li>
<li>newSingleThreadExecutor 创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务</li>
</ol>
<h2 id="_11-12" tabindex="-1">11-12 <a class="header-anchor" href="#_11-12" aria-label="Permalink to &quot;11-12&quot;"></a></h2>
<h3 id="线程的-run-和-start-有什么区别" tabindex="-1">线程的 run()和 start()有什么区别？ <a class="header-anchor" href="#线程的-run-和-start-有什么区别" aria-label="Permalink to &quot;线程的 run()和 start()有什么区别？&quot;"></a></h3>
<p>每个线程都是通过某个特定 Thread 对象所对应的方法 run()来完成其操作的，run()方法称为线程体。通过调用 Thread 类的 start()方法来启动一个线程。</p>
<p>start() 方法用于启动线程，run() 方法用于执行线程的运行时代码。run() 可以重复调用，而 start()只能调用一次。</p>
<p>start() 方法来启动一个线程，真正实现了多线程运行。调用start()方法无需等待run方法体代码执行完毕，可以直接继续执行其他的代码；
此时线程是处于就绪状态，并没有运行。 然后通过此Thread类调用方法run()来完成其运行状态， run()方法运行结束， 此线程终止。然后CPU再调度其它线程。</p>
<p>run()方法是在本线程里的，只是线程里的一个函数，而不是多线程的。 如果直接调用 run()，其实就相当于是调用了一个普通函数而已，直接待用run()方法必须等待run()方法执行完毕才能执行下面的代码，
所以执行路径还是只有一条，根本就没有线程的特征，所以在多线程执行时要使用 start()方法而不是 run()方法。</p>
<h2 id="_11-11" tabindex="-1">11-11 <a class="header-anchor" href="#_11-11" aria-label="Permalink to &quot;11-11&quot;"></a></h2>
<h3 id="守护线程与用户线程有什么区别" tabindex="-1">守护线程与用户线程有什么区别？ <a class="header-anchor" href="#守护线程与用户线程有什么区别" aria-label="Permalink to &quot;守护线程与用户线程有什么区别？&quot;"></a></h3>
<ul>
<li>守护线程：运行在后台，为其他前台线程服务。一旦所有用户线程都结束运行，守护线程会随 JVM 一起结束工作。</li>
<li>用户线程：运行在前台，执行具体的任务，如程序的主线程、连接网络的子线程等都是用户线程。</li>
</ul>
<h2 id="_11-10" tabindex="-1">11-10 <a class="header-anchor" href="#_11-10" aria-label="Permalink to &quot;11-10&quot;"></a></h2>
<h3 id="主线程是不是守护线程" tabindex="-1">主线程是不是守护线程？ <a class="header-anchor" href="#主线程是不是守护线程" aria-label="Permalink to &quot;主线程是不是守护线程？&quot;"></a></h3>
<p>主线程不是守护线程，它是一个用户线程，它的优先级是普通优先级，当所有的用户线程都结束了，主线程才会结束，如果主线程结束了，其他用户线程还在运行，那么程序也会继续运行。</p>
<h2 id="_11-9" tabindex="-1">11-9 <a class="header-anchor" href="#_11-9" aria-label="Permalink to &quot;11-9&quot;"></a></h2>
<h3 id="什么是守护线程" tabindex="-1">什么是守护线程？ <a class="header-anchor" href="#什么是守护线程" aria-label="Permalink to &quot;什么是守护线程？&quot;"></a></h3>
<p>守护线程是一种特殊的线程，它的优先级很低，通常用来做后台作业，比如垃圾回收线程就是一个很称职的守护者，并且它<strong>不能持有任何资源</strong>，
因为它会在任何时候被停止，如果它持有资源，那么其他线程就无法访问这些资源了。</p>
<h2 id="_11-8" tabindex="-1">11-8 <a class="header-anchor" href="#_11-8" aria-label="Permalink to &quot;11-8&quot;"></a></h2>
<h3 id="线程的状态有哪些" tabindex="-1">线程的状态有哪些？ <a class="header-anchor" href="#线程的状态有哪些" aria-label="Permalink to &quot;线程的状态有哪些？&quot;"></a></h3>
<ol>
<li>新建状态（New）：当线程对象对创建后，即进入了新建状态;</li>
<li>就绪状态（Runnable）：当调用线程对象的 <code>start()</code> 方法，线程即进入就绪状态。</li>
<li>运行状态（Running）：当CPU开始调度处于就绪状态的线程时，此时线程才得以真正执行，即进入到运行状态。</li>
<li>阻塞状态（Blocked）：处于运行状态中的线程由于某种原因，暂时放弃对 CPU 的使用权，停止执行，此时进入阻塞状态，直到其进入到就绪状态，才 有机会再次被 CPU 调用以进入到运行状态。
根据阻塞产生的原因不同，阻塞状态又可以分为三种：
<ul>
<li>等待阻塞：运行状态中的线程执行 <code>wait()</code> 方法，使本线程进入到等待阻塞状态；</li>
<li>同步阻塞 — 线程在获取 synchronized 同步锁失败（因为锁被其它线程所占用），它会进入同步阻塞状态；</li>
<li>其他阻塞 — 通过调用线程的 <code>sleep()</code> 或 <code>join()</code> 或发出了I/O请求时，线程会进入到阻塞状态。当 <code>sleep()</code> 状态超时. <code>join()</code> 等待线程终止或者超时. 或者 I/O 处理完毕时，线程重新转入就绪状态。</li>
</ul>
</li>
<li>死亡状态（Dead）：线程执行完了或者因异常退出了 <code>run()</code> 方法，该线程结束生命周期。</li>
</ol>
<h2 id="_11-7" tabindex="-1">11-7 <a class="header-anchor" href="#_11-7" aria-label="Permalink to &quot;11-7&quot;"></a></h2>
<h3 id="创建线程有哪几种方式" tabindex="-1">创建线程有哪几种方式？ <a class="header-anchor" href="#创建线程有哪几种方式" aria-label="Permalink to &quot;创建线程有哪几种方式？&quot;"></a></h3>
<ol>
<li>继承 Thread 类，重写 run() 方法，调用 start() 方法启动线程。</li>
<li>实现 Runnable 接口，重写 run() 方法，创建 Thread 对象，调用 start() 方法启动线程。</li>
<li>实现 Callable 接口，重写 call() 方法，创建 FutureTask 对象，创建 Thread 对象，调用 start() 方法启动线程。</li>
<li>使用线程池创建线程。</li>
</ol>
<blockquote>
<p>使用线程池的方式创建是最优解，因为线程池可以有效的控制线程的数量，避免因为创建线程过多导致的内存溢出，提高了系统资源的利用率，同时线程池提供了更多更强大的功能。</p>
</blockquote>
<h2 id="_11-6" tabindex="-1">11-6 <a class="header-anchor" href="#_11-6" aria-label="Permalink to &quot;11-6&quot;"></a></h2>
<h3 id="都有哪些原子类-请举例说明。" tabindex="-1">都有哪些原子类？请举例说明。 <a class="header-anchor" href="#都有哪些原子类-请举例说明。" aria-label="Permalink to &quot;都有哪些原子类？请举例说明。&quot;"></a></h3>
<p><code>java.util.concurrent </code>这个包里面提供了一组原子类。其基本的特性就是在多线程环境下，当有多个线程同时执行这些类的实例包含的方法时，具有排他性。</p>
<ul>
<li>原子类：AtomicBoolean，AtomicInteger，AtomicLong，AtomicReference</li>
<li>原子数组：AtomicIntegerArray，AtomicLongArray，AtomicReferenceArray</li>
<li>原子属性更新器：AtomicLongFieldUpdater，AtomicIntegerFieldUpdater，AtomicReferenceFieldUpdater</li>
<li>解决ABA问题的原子类：AtomicMarkableReference（通过引入一个boolean来反映中间有没有变过），AtomicStampedReference（通过引入一个int来累加来反映中间有没有变过）</li>
</ul>
<h2 id="_11-5" tabindex="-1">11-5 <a class="header-anchor" href="#_11-5" aria-label="Permalink to &quot;11-5&quot;"></a></h2>
<h3 id="什么是原子操作" tabindex="-1">什么是原子操作? <a class="header-anchor" href="#什么是原子操作" aria-label="Permalink to &quot;什么是原子操作?&quot;"></a></h3>
<p>原子操作（atomic operation）意为”不可被中断的一个或一系列操作” 。处理器使用基于对缓存加锁或总线加锁的方式来实现多处理器之间的原子操作。
在Java中可以通过锁和循环CAS的方式来实现原子操作。CAS操作——Compare &amp; Set，或是 Compare &amp; Swap，现在几乎所有的CPU指令都支持CAS的原子操作。</p>
<p>原子操作是指一个不受其他操作影响的操作任务单元。原子操作是在多线程环境下避免数据不一致必须的手段。
<code>int++</code> 并不是一个原子操作，所以当一个线程读取它的值并加1时，另外一个线程有可能会读到之前的值，这就会引发错误。</p>
<p>为了解决这个问题，必须保证增加操作是原子的，在JDK1.5之前我们可以使用同步技术来做到这一点。
到JDK1.5，java.util.concurrent.atomic包提供了int和long类型的原子包装类，它们可以自动的保证对于他们的操作是原子的并且不需要使用同步。</p>
<h2 id="_11-4" tabindex="-1">11-4 <a class="header-anchor" href="#_11-4" aria-label="Permalink to &quot;11-4&quot;"></a></h2>
<h3 id="execute-与-submit-的用法与区别。" tabindex="-1">execute 与 submit 的用法与区别。 <a class="header-anchor" href="#execute-与-submit-的用法与区别。" aria-label="Permalink to &quot;execute 与 submit 的用法与区别。&quot;"></a></h3>
<p>execute 执行后<strong>没有返回结果</strong>，只有1种用法</p>
<table tabindex="0">
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>void execute(Runnable command)</code></td>
<td>常规使用方法，用没有返回值的 execute 执行没有返回值的 Runnable 任务</td>
</tr>
</tbody>
</table>
<p>submit 执行后<strong>有返回结果</strong>，有3种用法</p>
<table tabindex="0">
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Future submit(Callable task)</code></td>
<td>常规使用方法，传入有返回值的 callable 任务，最终返回 task 的返回值</td>
</tr>
<tr>
<td><code>Future submit(Runnable task, T result)</code></td>
<td>由于 Runnable 没有返回值，但是可以自定义一个返回值用于返回</td>
</tr>
<tr>
<td><code>Future submit(Runnable task)</code></td>
<td>强行使用 submit 执行 Runnable 方法，忽略返回值</td>
</tr>
</tbody>
</table>
<h2 id="_11-3" tabindex="-1">11-3 <a class="header-anchor" href="#_11-3" aria-label="Permalink to &quot;11-3&quot;"></a></h2>
<h3 id="runnable-与-callable-的区别。" tabindex="-1">Runnable 与 Callable 的区别。 <a class="header-anchor" href="#runnable-与-callable-的区别。" aria-label="Permalink to &quot;Runnable 与 Callable 的区别。&quot;"></a></h3>
<p>Runnable 没有返回结果，即没有 return 语句；Callable 有返回结果。</p>
<p>可以通过 Executors 工厂类将 Runnable 封装为一个 Callable 对象。</p>
<h2 id="_11-2" tabindex="-1">11-2 <a class="header-anchor" href="#_11-2" aria-label="Permalink to &quot;11-2&quot;"></a></h2>
<h3 id="请描述-executor-框架的执行过程。" tabindex="-1">请描述 Executor 框架的执行过程。 <a class="header-anchor" href="#请描述-executor-框架的执行过程。" aria-label="Permalink to &quot;请描述 Executor 框架的执行过程。&quot;"></a></h3>
<p>1、通过实现 Runnable 接口或 Callable 接口创建任务。</p>
<p>2、通过Executors的工厂方法创建线程池。</p>
<p>3、通过 <code>ExecutorService.submit()</code>
提交一个有返回结果的任务，返回类型为一个实现Future接口的对象；或通过ExecutorService.execute()方法执行一个没有返回结果的任务。</p>
<p>4、通过 <code>FutureTask.get()</code> 获取返回结果（如果有）。</p>
<h2 id="_11-1" tabindex="-1">11-1 <a class="header-anchor" href="#_11-1" aria-label="Permalink to &quot;11-1&quot;"></a></h2>
<h3 id="说一说你理解的-executor-框架。" tabindex="-1">说一说你理解的 Executor 框架。 <a class="header-anchor" href="#说一说你理解的-executor-框架。" aria-label="Permalink to &quot;说一说你理解的 Executor 框架。&quot;"></a></h3>
<p>Executor 是线程池的调度工具，线程池是 Executor 的一部分。</p>
<p>Executor 框架由三大部分组成</p>
<p>1、<strong>任务：</strong> 即被执行任务需要实现的接口：Runnable 接口或 Callable 接口。</p>
<p>2、<strong>线程池：</strong> 主要通过 ExecutorService 接口调用线程池，有2个关键实现类 ThreadPoolExecutor 和
ScheduledThreadPoolExecutor。</p>
<p>3、<strong>异步计算的结果：</strong> Future 接口及其实现类 FutureTask。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[12-31]]></title>
            <link>https://www.imufeng.cn/interview/question-by-day/2023/12.html</link>
            <guid>https://www.imufeng.cn/interview/question-by-day/2023/12.html</guid>
            <pubDate>Sat, 05 Oct 2024 12:44:16 GMT</pubDate>
            <description><![CDATA[12-31
 Spring Boot 如何配置多个数据源？
SpringBoot 可以通过 `@ConfigurationProperties` 注解来配置多个数据源，该注解可以用在类上，也可以用在方]]></description>
            <content:encoded><![CDATA[<h2 id="_12-31" tabindex="-1">12-31 <a class="header-anchor" href="#_12-31" aria-label="Permalink to &quot;12-31&quot;"></a></h2>
<h3 id="spring-boot-如何配置多个数据源" tabindex="-1">Spring Boot 如何配置多个数据源？ <a class="header-anchor" href="#spring-boot-如何配置多个数据源" aria-label="Permalink to &quot;Spring Boot 如何配置多个数据源？&quot;"></a></h3>
<p>SpringBoot 可以通过 <code>@ConfigurationProperties</code> 注解来配置多个数据源，该注解可以用在类上，也可以用在方法上。</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Configuration</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> DataSourceConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Bean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">ConfigurationProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">prefix</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "spring.datasource.one"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> DataSource </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">dataSourceOne</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> DataSourceBuilder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Bean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">ConfigurationProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">prefix</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "spring.datasource.two"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> DataSource </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">dataSourceTwo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> DataSourceBuilder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><div class="language-properties vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">spring.datasource.one.url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=jdbc:mysql://localhost:3306/test1?</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">useUnicode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=true&#x26;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">characterEncoding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=utf-8&#x26;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">useSSL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=false&#x26;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">serverTimezone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=UTC</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">spring.datasource.one.username</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=root</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">spring.datasource.one.password</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=root</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">spring.datasource.one.driver-class-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=com.mysql.cj.jdbc.Driver</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">spring.datasource.two.url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=jdbc:mysql://localhost:3306/test2?</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">useUnicode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=true&#x26;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">characterEncoding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=utf-8&#x26;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">useSSL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=false&#x26;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">serverTimezone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=UTC</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">spring.datasource.two.username</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=root</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">spring.datasource.two.password</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=root</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">spring.datasource.two.driver-class-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=com.mysql.cj.jdbc.Driver</span></span></code></pre>
</div><h2 id="_12-30" tabindex="-1">12-30 <a class="header-anchor" href="#_12-30" aria-label="Permalink to &quot;12-30&quot;"></a></h2>
<h3 id="spring-boot-如何定义不同环境配置" tabindex="-1">Spring Boot 如何定义不同环境配置？ <a class="header-anchor" href="#spring-boot-如何定义不同环境配置" aria-label="Permalink to &quot;Spring Boot 如何定义不同环境配置？&quot;"></a></h3>
<p>SpringBoot 可以通过 <code>application-{profile}.properties</code> 或者 <code>application-{profile}.yml</code> 文件来定义不同环境配置。</p>
<p>配置可以通过 <code>spring.profiles.active</code> 属性来指定，也可以通过 <code>SPRING_PROFILES_ACTIVE</code> 环境变量来指定。</p>
<p>也可以在 maven 的 <code>pom.xml</code> 文件中指定，如下：</p>
<div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">profiles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">profile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>dev&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">activatedProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>dev&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">activatedProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">profile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">profile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>prod&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">activatedProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>prod&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">activatedProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">profile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">profiles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><h2 id="_12-29" tabindex="-1">12-29 <a class="header-anchor" href="#_12-29" aria-label="Permalink to &quot;12-29&quot;"></a></h2>
<h3 id="spring-boot-配置加载顺序是怎样的" tabindex="-1">Spring Boot 配置加载顺序是怎样的？ <a class="header-anchor" href="#spring-boot-配置加载顺序是怎样的" aria-label="Permalink to &quot;Spring Boot 配置加载顺序是怎样的？&quot;"></a></h3>
<p>SpringBoot 配置加载顺序是从外向内，从内向外，优先级从高到低。</p>
<ul>
<li>从外向内：SpringBoot 会从 <code>application.properties</code> 或者 <code>application.yml</code> 文件中加载配置。</li>
<li>从内向外：SpringBoot 会从 <code>@PropertySource</code> 注解中加载配置。</li>
</ul>
<p>优先级：</p>
<ol>
<li>命令行参数。</li>
<li>系统环境变量。</li>
<li><code>@PropertySource</code> 注解中的配置。</li>
<li><code>application.properties</code> 或者 <code>application.yml</code> 文件中的配置。</li>
</ol>
<h2 id="_12-28" tabindex="-1">12-28 <a class="header-anchor" href="#_12-28" aria-label="Permalink to &quot;12-28&quot;"></a></h2>
<h3 id="spring-boot-有哪几种热部署方式" tabindex="-1">Spring Boot 有哪几种热部署方式？ <a class="header-anchor" href="#spring-boot-有哪几种热部署方式" aria-label="Permalink to &quot;Spring Boot 有哪几种热部署方式？&quot;"></a></h3>
<p>SpringBoot 有两种热部署方式，分别是 <code>devtools</code> 和 <code>springloaded</code>。</p>
<ul>
<li><code>devtools</code>：devtools 是 SpringBoot 提供的一种热部署方式，可以实现代码修改后自动重启应用程序。</li>
<li><code>springloaded</code>：springloaded 是 SpringBoot 提供的一种热部署方式，可以实现代码修改后自动重载应用程序。</li>
</ul>
<h2 id="_12-27" tabindex="-1">12-27 <a class="header-anchor" href="#_12-27" aria-label="Permalink to &quot;12-27&quot;"></a></h2>
<h3 id="spring-boot-怎么注册-servlet" tabindex="-1">Spring Boot 怎么注册 Servlet？ <a class="header-anchor" href="#spring-boot-怎么注册-servlet" aria-label="Permalink to &quot;Spring Boot 怎么注册 Servlet？&quot;"></a></h3>
<p>SpringBoot 可以通过 <code>@ServletComponentScan</code> 注解来注册 Servlet，该注解可以用在类上，也可以用在方法上。</p>
<h2 id="_12-26" tabindex="-1">12-26 <a class="header-anchor" href="#_12-26" aria-label="Permalink to &quot;12-26&quot;"></a></h2>
<h3 id="spring-boot-中的-starters-是什么" tabindex="-1">Spring Boot 中的 Starters 是什么？ <a class="header-anchor" href="#spring-boot-中的-starters-是什么" aria-label="Permalink to &quot;Spring Boot 中的 Starters 是什么？&quot;"></a></h3>
<p>SpringBoot 中的 Starters 是一组依赖项的集合，可以通过引入 Starters 来快速构建 Spring 应用程序。</p>
<h2 id="_12-25" tabindex="-1">12-25 <a class="header-anchor" href="#_12-25" aria-label="Permalink to &quot;12-25&quot;"></a></h2>
<h3 id="springboot-如何开启自动注解" tabindex="-1">SpringBoot 如何开启自动注解？ <a class="header-anchor" href="#springboot-如何开启自动注解" aria-label="Permalink to &quot;SpringBoot 如何开启自动注解？&quot;"></a></h3>
<p>SpringBoot 可以通过 <code>@EnableAutoConfiguration</code> 注解来开启自动注解，该注解可以用在类上，也可以用在方法上。</p>
<p>由于 <code>@SpringBootApplication</code> 注解包含了 <code>@EnableAutoConfiguration</code> 注解，所以一般情况下不需要再使用 <code>@EnableAutoConfiguration</code> 注解。</p>
<h2 id="_12-24" tabindex="-1">12-24 <a class="header-anchor" href="#_12-24" aria-label="Permalink to &quot;12-24&quot;"></a></h2>
<h3 id="spring-boot-自动配置原理是什么" tabindex="-1">Spring Boot 自动配置原理是什么？ <a class="header-anchor" href="#spring-boot-自动配置原理是什么" aria-label="Permalink to &quot;Spring Boot 自动配置原理是什么？&quot;"></a></h3>
<p>SpringBoot 自动配置原理是基于 Spring 的条件注解实现的，SpringBoot 会根据条件注解的条件判断是否需要自动配置。</p>
<p>如下：</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 使用 ChatGPT 生成</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 这是一个Spring Boot自动配置类，用于配置数据源（DataSource）。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Configuration</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 当类路径中存在DataSource类时，才会启用这个配置类。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">ConditionalOnClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({DataSource.class})</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 启用对DataSourceProperties类的配置属性支持。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">EnableConfigurationProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(DataSourceProperties.class)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> DataSourceAutoConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 定义一个名为dataSource的Bean。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Bean</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 当容器中不存在同名的Bean时才会创建。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">ConditionalOnMissingBean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> DataSource </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">dataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(DataSourceProperties </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        // 调用DataSourceProperties的initializeDataSourceBuilder方法创建并返回一个数据源。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> properties.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">initializeDataSourceBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="_12-23" tabindex="-1">12-23 <a class="header-anchor" href="#_12-23" aria-label="Permalink to &quot;12-23&quot;"></a></h2>
<h3 id="spring-boot-中的默认内嵌容器是" tabindex="-1">Spring Boot 中的默认内嵌容器是？ <a class="header-anchor" href="#spring-boot-中的默认内嵌容器是" aria-label="Permalink to &quot;Spring Boot 中的默认内嵌容器是？&quot;"></a></h3>
<p>SpringBoot 默认内嵌容器是 Tomcat，但是也支持其他内嵌容器，比如 Jetty、Undertow 等。</p>
<h2 id="_12-22" tabindex="-1">12-22 <a class="header-anchor" href="#_12-22" aria-label="Permalink to &quot;12-22&quot;"></a></h2>
<h3 id="什么是-restful" tabindex="-1">什么是 restful？ <a class="header-anchor" href="#什么是-restful" aria-label="Permalink to &quot;什么是 restful？&quot;"></a></h3>
<p>restful 是一种软件架构风格，它是一种设计风格而不是标准，它提供了一组设计原则和约束条件，主要用于客户端和服务器之间的通信。</p>
<h2 id="_12-21" tabindex="-1">12-21 <a class="header-anchor" href="#_12-21" aria-label="Permalink to &quot;12-21&quot;"></a></h2>
<h3 id="springboot-如何提供网络服务" tabindex="-1">SpringBoot 如何提供网络服务？ <a class="header-anchor" href="#springboot-如何提供网络服务" aria-label="Permalink to &quot;SpringBoot 如何提供网络服务？&quot;"></a></h3>
<p>SpringBoot 可以通过 <code>@RestController</code> 注解来提供网络服务，该注解可以用在类上，也可以用在方法上。</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">RestController</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">GetMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"/hello"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "hello"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="_12-20" tabindex="-1">12-20 <a class="header-anchor" href="#_12-20" aria-label="Permalink to &quot;12-20&quot;"></a></h2>
<h3 id="springboot-怎么解决跨域问题" tabindex="-1">SpringBoot 怎么解决跨域问题？ <a class="header-anchor" href="#springboot-怎么解决跨域问题" aria-label="Permalink to &quot;SpringBoot 怎么解决跨域问题？&quot;"></a></h3>
<p>可以通过<code>@CrossOrigin</code> 注解来解决跨域问题，该注解可以用在类上，也可以用在方法上。也可以通过 <code>WebMvcConfigurer</code> 接口来配置跨域。</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">RestController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">CrossOrigin</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">GetMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"/hello"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "hello"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Configuration</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyConfig</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> WebMvcConfigurer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> addCorsMappings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(CorsRegistry </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">registry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        registry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">addMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"/**"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">allowedHeaders</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"*"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">allowedMethods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"*"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">allowedOrigins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"*"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="_12-19" tabindex="-1">12-19 <a class="header-anchor" href="#_12-19" aria-label="Permalink to &quot;12-19&quot;"></a></h2>
<h3 id="springboot-怎么根据指定条件注册-bean" tabindex="-1">SpringBoot 怎么根据指定条件注册 bean？ <a class="header-anchor" href="#springboot-怎么根据指定条件注册-bean" aria-label="Permalink to &quot;SpringBoot 怎么根据指定条件注册 bean？&quot;"></a></h3>
<p>SpringBoot 可以通过 <code>@Conditional</code> 注解来根据指定条件注册 bean，该注解可以用在类上，也可以用在方法上。</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Configuration</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Bean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Conditional</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(MyCondition.class)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> MyBean </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">myBean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyBean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyCondition</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Condition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> matches</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(ConditionContext </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, AnnotatedTypeMetadata </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="_12-18" tabindex="-1">12-18 <a class="header-anchor" href="#_12-18" aria-label="Permalink to &quot;12-18&quot;"></a></h2>
<h3 id="什么是模板引擎" tabindex="-1">什么是模板引擎？ <a class="header-anchor" href="#什么是模板引擎" aria-label="Permalink to &quot;什么是模板引擎？&quot;"></a></h3>
<p>模板引擎是一种将模板和数据结合起来生成 html 文档的工具，模板引擎可以将模板和数据结合起来生成 html 文档，然后将 html 文档返回给浏览器。</p>
<p>常见的模板引擎有：Freemarker、Thymeleaf、Velocity 等。</p>
<h2 id="_12-18-1" tabindex="-1">12-18 <a class="header-anchor" href="#_12-18-1" aria-label="Permalink to &quot;12-18&quot;"></a></h2>
<h3 id="spring-boot-如何配置随机端口" tabindex="-1">Spring Boot 如何配置随机端口？ <a class="header-anchor" href="#spring-boot-如何配置随机端口" aria-label="Permalink to &quot;Spring Boot 如何配置随机端口？&quot;"></a></h3>
<p>SpringBoot 可以通过 <code>server.port=0</code> 来配置随机端口，也可以通过 <code>server.port=${random.int(1024,65535)}</code> 来配置随机端口。</p>
<h2 id="_12-17" tabindex="-1">12-17 <a class="header-anchor" href="#_12-17" aria-label="Permalink to &quot;12-17&quot;"></a></h2>
<h3 id="spring-boot-有哪几种运行方式" tabindex="-1">Spring Boot 有哪几种运行方式？ <a class="header-anchor" href="#spring-boot-有哪几种运行方式" aria-label="Permalink to &quot;Spring Boot 有哪几种运行方式？&quot;"></a></h3>
<p>SpringBoot 有三种运行方式，分别是打包运行、命令行运行和 Maven 插件运行。</p>
<h2 id="_12-16" tabindex="-1">12-16 <a class="header-anchor" href="#_12-16" aria-label="Permalink to &quot;12-16&quot;"></a></h2>
<h3 id="为什么要用-springboot" tabindex="-1">为什么要用 SpringBoot？ <a class="header-anchor" href="#为什么要用-springboot" aria-label="Permalink to &quot;为什么要用 SpringBoot？&quot;"></a></h3>
<p>SpringBoot 可以快速构建 Spring 应用程序，快速整合其他框架。并实现了对 Spring 的自动配置，且内置 Tomcat 应用服务器，能够简化 Spring 应用程序的初始搭建和开发过程。</p>
<h2 id="_12-15" tabindex="-1">12-15 <a class="header-anchor" href="#_12-15" aria-label="Permalink to &quot;12-15&quot;"></a></h2>
<h3 id="spring-boot-支持哪些日志框架" tabindex="-1">Spring Boot 支持哪些日志框架？ <a class="header-anchor" href="#spring-boot-支持哪些日志框架" aria-label="Permalink to &quot;Spring Boot 支持哪些日志框架？&quot;"></a></h3>
<p>SpringBoot 默认日志框架为 Logback，但是也支持其他日志框架，比如 Log4j、Log4j2、JUL（java.util.logging）和 Logback。</p>
<h2 id="_12-14" tabindex="-1">12-14 <a class="header-anchor" href="#_12-14" aria-label="Permalink to &quot;12-14&quot;"></a></h2>
<h3 id="springbootapplication-由哪些注解组成" tabindex="-1">SpringBootApplication 由哪些注解组成？ <a class="header-anchor" href="#springbootapplication-由哪些注解组成" aria-label="Permalink to &quot;SpringBootApplication 由哪些注解组成？&quot;"></a></h3>
<p><code>@SpringBootApplication</code> 注解源码如下：</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(ElementType.TYPE)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Retention</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Documented</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Inherited</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">SpringBootConfiguration</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">EnableAutoConfiguration</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">ComponentScan</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">excludeFilters</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> FilterType.CUSTOM, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">classes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> TypeExcludeFilter.class),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">		@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> FilterType.CUSTOM, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">classes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> AutoConfigurationExcludeFilter.class) })</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> SpringBootApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    ......</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>该注解由 <code>@SpringBootConfiguration</code>、<code>@EnableAutoConfiguration</code> 和 <code>@ComponentScan</code> 注解组成。</p>
<ul>
<li><code>@SpringBootConfiguration</code> 注解标识一个配置类，该注解继承自 <code>@Configuration</code> 注解，用于定义配置类。</li>
<li><code>@EnableAutoConfiguration</code> 注解用于启用 SpringBoot 的自动配置特性。</li>
<li><code>@ComponentScan</code> 注解用于启用组件扫描，该注解继承自 <code>@ComponentScans</code> 注解，用于定义多个 <code>@ComponentScan</code> 注解。</li>
</ul>
<h2 id="_12-13" tabindex="-1">12-13 <a class="header-anchor" href="#_12-13" aria-label="Permalink to &quot;12-13&quot;"></a></h2>
<h3 id="spring-boot-的核心注解是什么" tabindex="-1">Spring Boot 的核心注解是什么？ <a class="header-anchor" href="#spring-boot-的核心注解是什么" aria-label="Permalink to &quot;Spring Boot 的核心注解是什么？&quot;"></a></h3>
<p>SpringBoot 核心注解是 <code>@SpringBootApplication</code>，该注解标识一个配置类，并同步启用自动配置以及组件扫描。是 SpringBoot 自动配置特性的核心。</p>
<h2 id="_12-12" tabindex="-1">12-12 <a class="header-anchor" href="#_12-12" aria-label="Permalink to &quot;12-12&quot;"></a></h2>
<h3 id="spring-boot-是什么" tabindex="-1">Spring Boot 是什么？ <a class="header-anchor" href="#spring-boot-是什么" aria-label="Permalink to &quot;Spring Boot 是什么？&quot;"></a></h3>
<p>根据 Spring 官网简介，SpringBoot 提供了丰富的 Spring 模块化支持，可以基于 SpringBoot 开发单个微服务，SpringBoot 可以快速构建基于 Spring 的应用程序。</p>
<p>它实现了自动配置，可以基于约定俗成的配置快速构建独立的 Spring 应用程序，简化了 Spring 应用程序的初始搭建和开发过程。</p>
<h2 id="_12-11" tabindex="-1">12-11 <a class="header-anchor" href="#_12-11" aria-label="Permalink to &quot;12-11&quot;"></a></h2>
<h3 id="spring-mvc-框架有什么用" tabindex="-1">Spring MVC 框架有什么用？ <a class="header-anchor" href="#spring-mvc-框架有什么用" aria-label="Permalink to &quot;Spring MVC 框架有什么用？&quot;"></a></h3>
<p>SpringMVC 解决了 V-C 交互的问题，即 V(View:视图) 和 C(Controller:控制器) 之间的交互问题。</p>
<p>用户可以通过视图将请求数据提交给服务器端的控制器，而控制器可以接收到相关数据后进行处理，最终，给予客户端某个视图，使得客户端得到响应结果。</p>
<h2 id="_12-10" tabindex="-1">12-10 <a class="header-anchor" href="#_12-10" aria-label="Permalink to &quot;12-10&quot;"></a></h2>
<h3 id="spring-框架用到了哪些设计模式" tabindex="-1">Spring 框架用到了哪些设计模式？ <a class="header-anchor" href="#spring-框架用到了哪些设计模式" aria-label="Permalink to &quot;Spring 框架用到了哪些设计模式？&quot;"></a></h3>
<ol>
<li>工厂方法：Spring 使用工厂方法模式通过 <code>BeanFactory</code>、<code>ApplicationContext</code> 创建 bean 实例。</li>
<li>单例模式：Spring 中的 bean 默认都是单例的。</li>
<li>代理模式：Spring AOP 功能的实现就是基于动态代理。</li>
<li>模板方法：Spring 中很多类都使用了模板方法模式，比如 <code>JdbcTemplate</code>、<code>RestTemplate</code> 等。</li>
<li>观察者模式：Spring 事件驱动模型就是观察者模式的一种实现。</li>
<li>适配器模式：Spring MVC 中的 <code>HandlerAdapter</code> 就是适配器模式的一种应用。</li>
<li>装饰器模式：Spring 中的 <code>BeanWrapperImpl</code> 就是装饰器模式的一种应用。</li>
<li>策略模式：Spring 中的 <code>InstantiationStrategy</code> 就是策略模式的一种应用。</li>
</ol>
<h2 id="_12-09" tabindex="-1">12-09 <a class="header-anchor" href="#_12-09" aria-label="Permalink to &quot;12-09&quot;"></a></h2>
<h3 id="spring-支持哪些事务管理类型" tabindex="-1">Spring 支持哪些事务管理类型？ <a class="header-anchor" href="#spring-支持哪些事务管理类型" aria-label="Permalink to &quot;Spring 支持哪些事务管理类型？&quot;"></a></h3>
<p>Spring 支持编程式事务管理和声明式事务管理。</p>
<ul>
<li>编程式事务可以满足在代码中显示的调用开启事务、提交事务、回滚事务的相关方法。</li>
<li>声明式事务是建立在 AOP 的基础之上，本质是对方法进行拦截，在目标方法之前创建或加入一个事务，在之后根据执行情况提交或回滚事务。</li>
</ul>
<h2 id="_12-08" tabindex="-1">12-08 <a class="header-anchor" href="#_12-08" aria-label="Permalink to &quot;12-08&quot;"></a></h2>
<h3 id="为什么不推荐使用-autowired-注解注入-bean" tabindex="-1">为什么不推荐使用 <code>@Autowired</code> 注解注入 bean？ <a class="header-anchor" href="#为什么不推荐使用-autowired-注解注入-bean" aria-label="Permalink to &quot;为什么不推荐使用 `@Autowired` 注解注入 bean？&quot;"></a></h3>
<p><code>@Autowired</code> 注解是 Spring 提供的，如果使用了这个注解，那么就会和 Spring 框架产生了耦合，不利于代码的解耦。</p>
<h2 id="_12-07" tabindex="-1">12-07 <a class="header-anchor" href="#_12-07" aria-label="Permalink to &quot;12-07&quot;"></a></h2>
<h3 id="spring-自动装配有哪些方式" tabindex="-1">Spring 自动装配有哪些方式？ <a class="header-anchor" href="#spring-自动装配有哪些方式" aria-label="Permalink to &quot;Spring 自动装配有哪些方式？&quot;"></a></h3>
<p>Spring 自动装配有三种方式，分别是 <code>byName</code>、<code>byType</code> 和 <code>constructor</code>。</p>
<ul>
<li><code>byName</code>：根据 bean 的名称进行装配，如果 bean 的名称和属性名称一致，那么就会进行装配。</li>
<li><code>byType</code>：根据 bean 的类型进行装配，如果 bean 的类型和属性类型一致，那么就会进行装配。</li>
<li><code>constructor</code>：根据构造器进行装配，如果 bean 的构造器参数类型和属性类型一致，那么就会进行装配。</li>
</ul>
<h2 id="_12-6" tabindex="-1">12-6 <a class="header-anchor" href="#_12-6" aria-label="Permalink to &quot;12-6&quot;"></a></h2>
<h3 id="spring-装配是指什么" tabindex="-1">Spring 装配是指什么？ <a class="header-anchor" href="#spring-装配是指什么" aria-label="Permalink to &quot;Spring 装配是指什么？&quot;"></a></h3>
<p>Spring 装配是指创建应用对象之间协作关系的行为，Spring 通过依赖注入（DI）来进行装配。</p>
<h2 id="_12-5" tabindex="-1">12-5 <a class="header-anchor" href="#_12-5" aria-label="Permalink to &quot;12-5&quot;"></a></h2>
<h3 id="spring-怎么注入-java-集合类型" tabindex="-1">Spring 怎么注入 Java 集合类型？ <a class="header-anchor" href="#spring-怎么注入-java-集合类型" aria-label="Permalink to &quot;Spring 怎么注入 Java 集合类型？&quot;"></a></h3>
<p>Spring 可以通过 <code>util</code> 命名空间注入集合类型，比如 <code>List</code>、<code>Set</code>、<code>Map</code> 等。</p>
<div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">util:list</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"list"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>1&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>2&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>3&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">util:list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><h2 id="_12-4" tabindex="-1">12-4 <a class="header-anchor" href="#_12-4" aria-label="Permalink to &quot;12-4&quot;"></a></h2>
<h3 id="spring-required-注解有什么用" tabindex="-1">Spring @Required 注解有什么用？ <a class="header-anchor" href="#spring-required-注解有什么用" aria-label="Permalink to &quot;Spring @Required 注解有什么用？&quot;"></a></h3>
<p><code>@Required</code> 注解可以用在字段、方法和构造器上，用来检查 bean 的必需属性是否已经被设置。</p>
<p>如果设置了 required 属性为 true，那么当检查到 bean 的属性没有被设置时，会抛出 <code>BeanInitializationException</code> 异常。</p>
<h2 id="_12-3" tabindex="-1">12-3 <a class="header-anchor" href="#_12-3" aria-label="Permalink to &quot;12-3&quot;"></a></h2>
<h3 id="spring-autowired-注解有什么用" tabindex="-1">Spring @Autowired 注解有什么用？ <a class="header-anchor" href="#spring-autowired-注解有什么用" aria-label="Permalink to &quot;Spring @Autowired 注解有什么用？&quot;"></a></h3>
<p><code>@Autowired</code> 注解可以用在字段、构造器、方法和参数上，让 Spring 完成 bean 的自动装配工作。</p>
<p>默认按照类匹配的方式进行装配，如果匹配到多个 bean，那么会按照字段名或者参数名进行匹配。
使用 <code>@Qualifier</code> 注解可以指定 bean 的名称，从而避免歧义。</p>
<h2 id="_12-2" tabindex="-1">12-2 <a class="header-anchor" href="#_12-2" aria-label="Permalink to &quot;12-2&quot;"></a></h2>
<h3 id="spring-bean-为什么默认为单例" tabindex="-1">Spring bean 为什么默认为单例？ <a class="header-anchor" href="#spring-bean-为什么默认为单例" aria-label="Permalink to &quot;Spring bean 为什么默认为单例？&quot;"></a></h3>
<p>Spring bean 默认为单例，这是因为 Spring 容器中的 bean 默认都是单例的，这样做的好处是减少了创建 bean 的开销，节省了内存资源。</p>
<p>但是单例的 bean 也有一些缺点，比如线程安全问题，如果一个单例的 bean 中有一个成员变量，如果这个成员变量是可变的，那么就会出现线程安全问题。</p>
<h2 id="_12-1" tabindex="-1">12-1 <a class="header-anchor" href="#_12-1" aria-label="Permalink to &quot;12-1&quot;"></a></h2>
<h3 id="请描述-bean-的作用域。" tabindex="-1">请描述 bean 的作用域。 <a class="header-anchor" href="#请描述-bean-的作用域。" aria-label="Permalink to &quot;请描述 bean 的作用域。&quot;"></a></h3>
<p>Spring 创建的 Bean 默认是单利的，每一个实例只会被创建一次，通过 <code>getBean()</code> 方法获取的是同一个实例。可以直接通过 scope 来制定一个 Bean 的作用域。</p>
<div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">&#x3C;!-- 作用域：prototype --></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">bean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"accountDao"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"prototype"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">     class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"com.zejian.spring.springIoc.dao.impl.AccountDaoImpl"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">/></span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[9-30]]></title>
            <link>https://www.imufeng.cn/interview/question-by-day/2023/9.html</link>
            <guid>https://www.imufeng.cn/interview/question-by-day/2023/9.html</guid>
            <pubDate>Sat, 05 Oct 2024 12:44:16 GMT</pubDate>
            <description><![CDATA[9-30
 Java中的重载和重写有什么区别？
- 重载（Overloading）：在同一个类中，方法名相同但参数列表不同，可以有不同的返回类型。编译器根据方法参数的类型、个数、顺序来选择调用相应的方]]></description>
            <content:encoded><![CDATA[<h2 id="_9-30" tabindex="-1">9-30 <a class="header-anchor" href="#_9-30" aria-label="Permalink to &quot;9-30&quot;"></a></h2>
<h3 id="java中的重载和重写有什么区别" tabindex="-1">Java中的重载和重写有什么区别？ <a class="header-anchor" href="#java中的重载和重写有什么区别" aria-label="Permalink to &quot;Java中的重载和重写有什么区别？&quot;"></a></h3>
<ul>
<li>重载（Overloading）：在同一个类中，方法名相同但参数列表不同，可以有不同的返回类型。编译器根据方法参数的类型、个数、顺序来选择调用相应的方法。</li>
<li>重写（Overriding）：在子类中重新实现父类的方法，方法名、参数列表和返回类型必须相同。重写用于改变父类方法的实现，以适应子类的特定需求。</li>
</ul>
<h2 id="_9-29" tabindex="-1">9-29 <a class="header-anchor" href="#_9-29" aria-label="Permalink to &quot;9-29&quot;"></a></h2>
<h3 id="java中的四种访问修饰符是什么" tabindex="-1">Java中的四种访问修饰符是什么？ <a class="header-anchor" href="#java中的四种访问修饰符是什么" aria-label="Permalink to &quot;Java中的四种访问修饰符是什么？&quot;"></a></h3>
<ul>
<li><code>public</code>：对所有类可见。</li>
<li><code>private</code>：仅对类本身可见。</li>
<li><code>protected</code>：对同一包内的类和所有子类可见。</li>
<li><code>default</code>（不使用修饰符）：对同一包内的类可见。</li>
</ul>
<h2 id="_9-28" tabindex="-1">9-28 <a class="header-anchor" href="#_9-28" aria-label="Permalink to &quot;9-28&quot;"></a></h2>
<h3 id="请用-java-写一个冒泡排序" tabindex="-1">请用 JAVA 写一个冒泡排序？ <a class="header-anchor" href="#请用-java-写一个冒泡排序" aria-label="Permalink to &quot;请用 JAVA 写一个冒泡排序？&quot;"></a></h3>
<p>冒泡排序原理是逐一比较相邻元素，通过交换位置逐步将较大的数移动到末尾。</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> BubbleSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">     * 对整数数组进行冒泡排序，将数组按升序排列</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">     * </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">     * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70"> array</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"> 待排序的整数数组</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">     */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> bubbleSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> array.length;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        // 外层循环控制每轮比较的次数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">            // 内层循环比较相邻元素，将较大的元素移到后面</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">                // 如果前一个元素大于后一个元素，则交换它们的位置</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">                if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (array[j] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> array[j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">                    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> temp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> array[j];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                    array[j] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> array[j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                    array[j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> temp;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[] nums </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">34</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">22</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">90</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"原始数组:"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> nums) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> " "</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">        bubbleSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(nums);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">排序后的数组:"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> nums) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> " "</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="_9-27" tabindex="-1">9-27 <a class="header-anchor" href="#_9-27" aria-label="Permalink to &quot;9-27&quot;"></a></h2>
<h3 id="什么是前后端分离" tabindex="-1">什么是前后端分离？ <a class="header-anchor" href="#什么是前后端分离" aria-label="Permalink to &quot;什么是前后端分离？&quot;"></a></h3>
<blockquote>
<p>前后端分离技术目前已经成为互联网项目研发的基础，JAVA 中一般使用 <code>Nginx</code> + <code>Tomcat</code> 的架构实现。将数据处理与页面展示有效的进行解耦。为多客户端、大型分布式架构、微服务架构等都打下了坚实的基础。</p>
</blockquote>
<p>这里以 <code>VUE</code> + <code>SpringBoot</code> 的系统举例，通常来讲，前端部署在 <code>Nginx</code>、<code>Apache</code> 等 Web 服务器，后端通常部署在 <code>Tomcat</code> 等应用服务器，使用 <code>JSON</code> 交互数据。后端根据 <code>Rustful Api</code>  规范开发数据接口，并通过 <code>Token</code>、<code>Session</code> 等安全机制进行认证，使用 <code>Mybatis</code> 等持久层框架与数据库进行通信。这些接口必须通过接口的相关规定进行调用。前端使用 <code>Ajax</code> 技术通过 <code>HTTP</code> 等协议实现对后端接口的调用，在后端主导的项目开发中，后端可以通过 <code>SpringDoc</code> 等方式提供接口文档，说明接口调用规范，供前端开发人员阅读。</p>
<p><strong>优点：</strong></p>
<p>前后端分离架构的主要优点是实现了数据与页面显示的解耦，开发人员能够专注于自己的方向，提升系统的开发效率、代码的可重用性及用户的体验感，并且由于后端所在的应用服务器一般都部署在内网，通过 web 服务器反向代理实现，能够增强后端数据的安全性。同时，能够同时利用 Web 服务器速度更快的优点以及应用服务器的动态资源处理，更便于开发及部署。</p>
<p><strong>缺点：</strong></p>
<ul>
<li>系统开发对于人员数量及团队的配合度要求变大。</li>
<li>由于系统调整需要同时对前后端都进行调整，这将增大系统迭代的周期。</li>
<li>前端开发通常都要基于后端接口，这增大了对前端开发的技术水平要求及上手难度。</li>
<li>前端开发需要编写更多的代码来处理数据交互和逻辑，这增加了前端开发的工作量。</li>
<li>前后端分离由于浏览器的同源策略限制，会导致前后端之间的访问出现跨域问题。</li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[每日一题 - 2023]]></title>
            <link>https://www.imufeng.cn/interview/question-by-day/2023/</link>
            <guid>https://www.imufeng.cn/interview/question-by-day/2023/</guid>
            <pubDate>Sat, 05 Oct 2024 12:44:16 GMT</pubDate>
            <description><![CDATA[每天至少一道面试题，范围不限。]]></description>
            <content:encoded><![CDATA[<blockquote>
<p>每日一题从 <code>2023年09月27日</code> 开始记录，不限分类，欢迎留言监督。</p>
</blockquote>
<h3 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;"></a></h3>
<table tabindex="0">
<thead>
<tr>
<th>时间</th>
<th>问题</th>
</tr>
</thead>
<tbody>
<tr>
<td>12/31</td>
<td><a href="./12.html#_12-31">Spring Boot 如何配置多个数据源？</a></td>
</tr>
<tr>
<td>12/30</td>
<td><a href="./12.html#_12-30">Spring Boot 如何定义不同环境配置？</a></td>
</tr>
<tr>
<td>12/29</td>
<td><a href="./12.html#_12-29">Spring Boot 配置加载顺序是怎样的？</a></td>
</tr>
<tr>
<td>12/28</td>
<td><a href="./12.html#_12-28">Spring Boot 有哪几种热部署方式？</a></td>
</tr>
<tr>
<td>12/27</td>
<td><a href="./12.html#_12-27">Spring Boot 怎么注册 Servlet？</a></td>
</tr>
<tr>
<td>12/26</td>
<td><a href="./12.html#_12-26">Spring Boot 中的 Starters 是什么？</a></td>
</tr>
<tr>
<td>12/25</td>
<td><a href="./12.html#_12-25">SpringBoot 如何开启自动注解？</a></td>
</tr>
<tr>
<td>12/24</td>
<td><a href="./12.html#_12-24">Spring Boot 自动配置原理是什么？</a></td>
</tr>
<tr>
<td>12/23</td>
<td><a href="./12.html#_12-23">Spring Boot 中的默认内嵌容器是？</a></td>
</tr>
<tr>
<td>12/22</td>
<td><a href="./12.html#_12-22">什么是 restful？</a></td>
</tr>
<tr>
<td>12/21</td>
<td><a href="./12.html#_12-21">SpringBoot 如何提供网络服务？</a></td>
</tr>
<tr>
<td>12/20</td>
<td><a href="./12.html#_12-20">SpringBoot 怎么解决跨域问题？</a></td>
</tr>
<tr>
<td>12/19</td>
<td><a href="./12.html#_12-19">SpringBoot 怎么根据指定条件注册 bean？</a></td>
</tr>
<tr>
<td>12/18</td>
<td><a href="./12.html#_12-18">Spring Boot 如何配置随机端口？</a></td>
</tr>
<tr>
<td>12/17</td>
<td><a href="./12.html#_12-17">Spring Boot 有哪几种运行方式？</a></td>
</tr>
<tr>
<td>12/16</td>
<td><a href="./12.html#_12-16">为什么要用 SpringBoot？</a></td>
</tr>
<tr>
<td>12/15</td>
<td><a href="./12.html#_12-15">Spring Boot 支持哪些日志框架？</a></td>
</tr>
<tr>
<td>12/14</td>
<td><a href="./12.html#_12-14">SpringBootApplication 由哪些注解组成？</a></td>
</tr>
<tr>
<td>12/13</td>
<td><a href="./12.html#_12-13">SpringBootApplication 由哪些注解组成？</a></td>
</tr>
<tr>
<td>12/12</td>
<td><a href="./12.html#_12-12">Spring Boot 是什么？</a></td>
</tr>
<tr>
<td>12/11</td>
<td><a href="./12.html#_12-11">Spring MVC 框架有什么用？</a></td>
</tr>
<tr>
<td>12/10</td>
<td><a href="./12.html#_12-10">Spring 框架用到了哪些设计模式？</a></td>
</tr>
<tr>
<td>12/09</td>
<td><a href="./12.html#_12-9">Spring 支持哪些事务管理类型？</a></td>
</tr>
<tr>
<td>12/08</td>
<td><a href="./12.html#_12-8">为什么不推荐使用 <code>@Autowired</code> 注解注入 bean？</a></td>
</tr>
<tr>
<td>12/07</td>
<td><a href="./12.html#_12-7">Spring 自动装配有哪些方式？</a></td>
</tr>
<tr>
<td>12/06</td>
<td><a href="./12.html#_12-6">Spring 装配是指什么？</a></td>
</tr>
<tr>
<td>12/05</td>
<td><a href="./12.html#_12-5">Spring 怎么注入 Java 集合类型？</a></td>
</tr>
<tr>
<td>12/04</td>
<td><a href="./12.html#_12-4">Spring @Required 注解有什么用？</a></td>
</tr>
<tr>
<td>12/03</td>
<td><a href="./12.html#_12-3">Spring @Autowired 注解有什么用？</a></td>
</tr>
<tr>
<td>12/02</td>
<td><a href="./12.html#_12-2">Spring Bean 的生命周期有哪些？</a></td>
</tr>
<tr>
<td>12/01</td>
<td><a href="./12.html#_12-1">请描述 bean 的作用域。</a></td>
</tr>
<tr>
<td>11/30</td>
<td><a href="./11.html#_11-30">依赖注入的方法有哪些？</a></td>
</tr>
<tr>
<td>11/29</td>
<td><a href="./11.html#_11-29">BeanFactory 和 FactoryBean 的区别？</a></td>
</tr>
<tr>
<td>11/28</td>
<td><a href="./11.html#_11-28">描述 Bean 的生命周期.</a></td>
</tr>
<tr>
<td>11/27</td>
<td><a href="./11.html#_11-27">什么是 BeanDefinition？</a></td>
</tr>
<tr>
<td>11/26</td>
<td><a href="./11.html#_11-26">描述 Spring 的两种 IOC 容器。</a></td>
</tr>
<tr>
<td>11/25</td>
<td><a href="./11.html#_11-25">请描述 Spring AOP 的动态代理。</a></td>
</tr>
<tr>
<td>11/24</td>
<td><a href="./11.html#_11-24">描述 AOP 的两种实现方式。</a></td>
</tr>
<tr>
<td>11/23</td>
<td><a href="./11.html#_11-23">CountDownLatch 和 CyclicBarrier 的区别。</a></td>
</tr>
<tr>
<td>11/22</td>
<td><a href="./11.html#_11-22">什么是 CyclicBarrier？</a></td>
</tr>
<tr>
<td>11/21</td>
<td><a href="./11.html#_11-21">什么是 CountdownLatch？</a></td>
</tr>
<tr>
<td>11/20</td>
<td><a href="./11.html#_11-20">线程池都有哪些状态？</a></td>
</tr>
<tr>
<td>11/19</td>
<td><a href="./11.html#_11-19">notify() 和 notifyAll() 有什么区别？</a></td>
</tr>
<tr>
<td>11/18</td>
<td><a href="./11.html#_11-18">sleep() 和 wait() 有什么区别？</a></td>
</tr>
<tr>
<td>11/17</td>
<td><a href="./11.html#_11-17">ThreadLocal 内存泄漏原因，如何避免？</a></td>
</tr>
<tr>
<td>11/16</td>
<td><a href="./11.html#_11-16">线程之间如何进行通信？</a></td>
</tr>
<tr>
<td>11/15</td>
<td><a href="./11.html#_11-15">什么是 ThreadLocal？</a></td>
</tr>
<tr>
<td>11/14</td>
<td><a href="./11.html#_11-14">synchronized 关键字的作用？</a></td>
</tr>
<tr>
<td>11/13</td>
<td><a href="./11.html#_11-13">线程池有几种创建方式？</a></td>
</tr>
<tr>
<td>11/12</td>
<td><a href="./11.html#_11-12">线程的 run()和 start()有什么区别？</a></td>
</tr>
<tr>
<td>11/11</td>
<td><a href="./11.html#_11-11">守护线程与用户线程有什么区别？</a></td>
</tr>
<tr>
<td>11/10</td>
<td><a href="./11.html#_11-10">主线程是不是守护线程？</a></td>
</tr>
<tr>
<td>11/09</td>
<td><a href="./11.html#_11-8">什么是守护线程？</a></td>
</tr>
<tr>
<td>11/08</td>
<td><a href="./11.html#_11-8">线程的状态有哪些？</a></td>
</tr>
<tr>
<td>11/07</td>
<td><a href="./11.html#_11-7">创建线程有哪几种方式？</a></td>
</tr>
<tr>
<td>11/06</td>
<td><a href="./11.html#_11-6">都有哪些原子类？请举例说明。</a></td>
</tr>
<tr>
<td>11/05</td>
<td><a href="./11.html#_11-5">什么是原子操作?</a></td>
</tr>
<tr>
<td>11/04</td>
<td><a href="./11.html#_11-4">execute 与 submit 的用法与区别。</a></td>
</tr>
<tr>
<td>11/03</td>
<td><a href="./11.html#_11-3">Runnable 与 Callable 的区别。</a></td>
</tr>
<tr>
<td>11/02</td>
<td><a href="./11.html#_11-2">请描述 Executor 框架的执行过程。</a></td>
</tr>
<tr>
<td>11/01</td>
<td><a href="./11.html#_11-1">说一说你理解的 Executor 框架。</a></td>
</tr>
<tr>
<td>10/31</td>
<td><a href="./10.html#_10-31">什么是原子操作？</a></td>
</tr>
<tr>
<td>10/30</td>
<td><a href="./10.html#_10-30">为什么使用Executor框架？</a></td>
</tr>
<tr>
<td>10/29</td>
<td><a href="./10.html#_10-29">什么是Executor框架？</a></td>
</tr>
<tr>
<td>10/28</td>
<td><a href="./10.html#_10-28">什么是线程组？</a></td>
</tr>
<tr>
<td>10/27</td>
<td><a href="./10.html#_10-27">产生死锁的必要条件。</a></td>
</tr>
<tr>
<td>10/26</td>
<td><a href="./10.html#_10-26">什么是上下文切换？</a></td>
</tr>
<tr>
<td>10/25</td>
<td><a href="./10.html#_10-25">如何停止一个正在运行的线程？</a></td>
</tr>
<tr>
<td>10/24</td>
<td><a href="./10.html#_10-24">出现线程不安全的本质什么？</a></td>
</tr>
<tr>
<td>10/23</td>
<td><a href="./10.html#_10-23">AOP 的实现方式？</a></td>
</tr>
<tr>
<td>10/22</td>
<td><a href="./10.html#_10-22">什么是 AOP？</a></td>
</tr>
<tr>
<td>10/21</td>
<td><a href="./10.html#_10-21">什么是 IOC？</a></td>
</tr>
<tr>
<td>10/20</td>
<td><a href="./10.html#_10-20">请简单介绍JAVA8新特性？</a></td>
</tr>
<tr>
<td>10/19</td>
<td><a href="./10.html#_10-19">Integer和int的区别？</a></td>
</tr>
<tr>
<td>10/18</td>
<td><a href="./10.html#_10-18">抽象类和接口的区别？</a></td>
</tr>
<tr>
<td>10/17</td>
<td><a href="./10.html#_10-17">构造器是否可被重写？</a></td>
</tr>
<tr>
<td>10/16</td>
<td><a href="./10.html#_10-16">请描述 &amp; 和 &amp;&amp; 的区别。</a></td>
</tr>
<tr>
<td>10/15</td>
<td><a href="./10.html#_10-15">请描述面向对象的特征。</a></td>
</tr>
<tr>
<td>10/14</td>
<td><a href="./10.html#_10-14">Java 中 throw 和 throws 区别？</a></td>
</tr>
<tr>
<td>10/13</td>
<td><a href="./10.html#_10-13">运行时异常与受检异常有何异同？</a></td>
</tr>
<tr>
<td>10/12</td>
<td><a href="./10.html#_10-12">是否可以继承String类？</a></td>
</tr>
<tr>
<td>10/11</td>
<td><a href="./10.html#_10-11">String 类的长度有限制吗？</a></td>
</tr>
<tr>
<td>10/10</td>
<td><a href="./10.html#_10-10">什么是<strong>节流</strong>和<strong>防抖</strong>？应用场景有哪些？</a></td>
</tr>
<tr>
<td>10/09</td>
<td><a href="./10.html#_10-9">请描述 static 修饰符</a></td>
</tr>
<tr>
<td>10/08</td>
<td><a href="./10.html#_10-8">请描述修饰符、访问修饰符，非访问修饰符。</a></td>
</tr>
<tr>
<td>10/07</td>
<td><a href="./10.html#_10-7">什么是方法签名？</a></td>
</tr>
<tr>
<td>10/06</td>
<td><a href="./10.html#_10-6">重载和重写是什么意思？有什么区别？</a></td>
</tr>
<tr>
<td>10/05</td>
<td><a href="./10.html#_10-5">String、StringBuilder、StringBuffer 的区别及使用场景？</a></td>
</tr>
<tr>
<td>10/04</td>
<td><a href="./10.html#_10-4">请描述 <code>instanceof</code> 关键字。</a></td>
</tr>
<tr>
<td>10/03</td>
<td><a href="./10.html#_10-3"><code>==</code> 与 <code>equals</code> 的区别是什么？</a></td>
</tr>
<tr>
<td>10/02</td>
<td><a href="./10.html#_10-2"><code>3*0.1 == 0.3</code> 将会返回什么?</a></td>
</tr>
<tr>
<td>10/01</td>
<td><a href="./10.html#_10-1">请详述 <code>JDK</code> <code>JRE</code> <code>JVM</code> 等的关系。</a></td>
</tr>
<tr>
<td>09/30</td>
<td><a href="./9.html#_9-30">Java中的重载和重写有什么区别？</a></td>
</tr>
<tr>
<td>09/29</td>
<td><a href="./9.html#_9-29">Java中的四种访问修饰符是什么？</a></td>
</tr>
<tr>
<td>09/28</td>
<td><a href="./9.html#_9-28">请用 JAVA 写一个冒泡排序？</a></td>
</tr>
<tr>
<td>09/27</td>
<td><a href="./9.html#_9-27">什么是前后端分离？</a></td>
</tr>
</tbody>
</table>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[每日一题 - 202401]]></title>
            <link>https://www.imufeng.cn/interview/question-by-day/2024/1.html</link>
            <guid>https://www.imufeng.cn/interview/question-by-day/2024/1.html</guid>
            <pubDate>Sat, 05 Oct 2024 12:44:16 GMT</pubDate>
            <description><![CDATA[每日一题 - 202401
 1-31
 什么是同步？
同步 IO 和 非同步 IO 是操作系统级别的，主要描述操作系统在收到程序请求 IO 操作后，
如果 IO 资源没有准备好，该如何响应程序的问题]]></description>
            <content:encoded><![CDATA[<h1 id="每日一题-202401" tabindex="-1">每日一题 - 202401 <a class="header-anchor" href="#每日一题-202401" aria-label="Permalink to &quot;每日一题 - 202401&quot;"></a></h1>
<h2 id="_1-31" tabindex="-1">1-31 <a class="header-anchor" href="#_1-31" aria-label="Permalink to &quot;1-31&quot;"></a></h2>
<h3 id="什么是同步" tabindex="-1">什么是同步？ <a class="header-anchor" href="#什么是同步" aria-label="Permalink to &quot;什么是同步？&quot;"></a></h3>
<p>同步 IO 和 非同步 IO 是操作系统级别的，主要描述操作系统在收到程序请求 IO 操作后，
如果 IO 资源没有准备好，该如何响应程序的问题。前者不响应，直到 IO 资源准备好，后者返回标记，
当 IO 资源准备好之后，再通过事件机制返回给程序。</p>
<h2 id="_1-30" tabindex="-1">1-30 <a class="header-anchor" href="#_1-30" aria-label="Permalink to &quot;1-30&quot;"></a></h2>
<h3 id="什么是阻塞" tabindex="-1">什么是阻塞？ <a class="header-anchor" href="#什么是阻塞" aria-label="Permalink to &quot;什么是阻塞？&quot;"></a></h3>
<p>阻塞 IO 和 非阻塞 IO 是程序级别的，主要描述程序请求操作系统 IO 操作后，
如果 IO 资源没有准备好，那么程序该如何处理的问题，前者等待，后者继续执行（一直轮询）。</p>
<h2 id="_1-29" tabindex="-1">1-29 <a class="header-anchor" href="#_1-29" aria-label="Permalink to &quot;1-29&quot;"></a></h2>
<h3 id="如何理解-io-流" tabindex="-1">如何理解 IO 流？ <a class="header-anchor" href="#如何理解-io-流" aria-label="Permalink to &quot;如何理解 IO 流？&quot;"></a></h3>
<p>从数据传输方式来讲，IO 流分为字节流和字符流，字节流处理二进制文件，字符流读取单个字符，用于处理文本文件。</p>
<p>从数据流向来讲，IO 流分为输入流和输出流，输入流用于读取数据，输出流用于写入数据。</p>
<p>从数据操作类型来讲，IO 流分为文件流、管道流、缓冲流、数据流、对象流、序列化流、打印流、转换流等。</p>
<h2 id="_1-28" tabindex="-1">1-28 <a class="header-anchor" href="#_1-28" aria-label="Permalink to &quot;1-28&quot;"></a></h2>
<h3 id="描述异常的底层" tabindex="-1">描述异常的底层？ <a class="header-anchor" href="#描述异常的底层" aria-label="Permalink to &quot;描述异常的底层？&quot;"></a></h3>
<p>JAVA 代码编译之后，会生成一个异常表（Exception Table），如下：</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> simpleTryCatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">   try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">       testNPE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">   } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (Exception </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">       e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>该段代码编译后生成的字节码如下：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>//javap -c Main</span></span>
<span class="line"><span> public static void simpleTryCatch();</span></span>
<span class="line"><span>    Code:</span></span>
<span class="line"><span>       0: invokestatic  #3                  // Method testNPE:()V</span></span>
<span class="line"><span>       3: goto          11</span></span>
<span class="line"><span>       6: astore_0</span></span>
<span class="line"><span>       7: aload_0</span></span>
<span class="line"><span>       8: invokevirtual #5                  // Method java/lang/Exception.printStackTrace:()V</span></span>
<span class="line"><span>      11: return</span></span>
<span class="line"><span>    Exception table:</span></span>
<span class="line"><span>       from    to  target type</span></span>
<span class="line"><span>           0     3     6   Class java/lang/Exception</span></span></code></pre>
</div><p>异常表包含了可能发生异常的起始点、结束点、异常处理代码的起始点、异常类型等信息。当发生异常时，JVM 会根据异常表中的信息来决定如何处理异常。</p>
<h2 id="_1-27" tabindex="-1">1-27 <a class="header-anchor" href="#_1-27" aria-label="Permalink to &quot;1-27&quot;"></a></h2>
<h3 id="java-7-的-try-with-resource" tabindex="-1">Java 7 的 try-with-resource? <a class="header-anchor" href="#java-7-的-try-with-resource" aria-label="Permalink to &quot;Java 7 的 try-with-resource?&quot;"></a></h3>
<p>Java 7 引入了 try-with-resource 语句，该语句可以自动关闭实现了 AutoCloseable 接口的资源。
大部分的 JAVA 标准资源都继承了该接口。当在 try 代码块执行后货异常处理后，会自动调用资源的 close() 方法。</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> TryWithResourceTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> IOException {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (FileInputStream fis </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"test.txt"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> fis.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">!=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">((</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> fis.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="_1-26" tabindex="-1">1-26 <a class="header-anchor" href="#_1-26" aria-label="Permalink to &quot;1-26&quot;"></a></h2>
<h3 id="java-throw-和-throws-的区别" tabindex="-1">JAVA throw 和 throws 的区别？ <a class="header-anchor" href="#java-throw-和-throws-的区别" aria-label="Permalink to &quot;JAVA throw 和 throws 的区别？&quot;"></a></h3>
<ul>
<li>throw 用在方法体内，用来抛出一个异常对象，将这个异常对象传递到调用者处，并终止当前方法的执行。</li>
<li>throws 用在方法声明后面，跟的是异常类名，可以跟多个异常类名，用逗号隔开，表示当前方法不处理异常，而是提醒该方法的调用者来处理异常（将异常抛给调用者），
如果调用者也不处理异常，那么继续往上抛，最终抛给 JVM 处理，JVM 会终止程序的运行。</li>
</ul>
<h2 id="_1-25" tabindex="-1">1-25 <a class="header-anchor" href="#_1-25" aria-label="Permalink to &quot;1-25&quot;"></a></h2>
<h3 id="getname、getcanonicalname-与-getsimplename-的区别" tabindex="-1">getName、getCanonicalName 与 getSimpleName 的区别? <a class="header-anchor" href="#getname、getcanonicalname-与-getsimplename-的区别" aria-label="Permalink to &quot;getName、getCanonicalName 与 getSimpleName 的区别?&quot;"></a></h3>
<ul>
<li>getName()：获取全限定类名，包含包名。</li>
<li>getCanonicalName()：获取全限定类名，不包含包名。</li>
<li>getSimpleName()：获取类名，不包含包名。</li>
</ul>
<h2 id="_1-24" tabindex="-1">1-24 <a class="header-anchor" href="#_1-24" aria-label="Permalink to &quot;1-24&quot;"></a></h2>
<h3 id="什么是反射" tabindex="-1">什么是反射？ <a class="header-anchor" href="#什么是反射" aria-label="Permalink to &quot;什么是反射？&quot;"></a></h3>
<p>反射是指程序可以访问、检测和修改它本身状态或行为的一种能力。
Java 反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；
对于任意一个对象，都能够调用它的任意一个方法和属性。</p>
<p>如下：</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> classTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() throws Exception {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        // 获取Class对象的三种方式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"根据类名:  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> User.class);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"根据对象:  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> +</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"根据全限定类名:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Class.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">forName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"com.test.User"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        // 常用的方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"获取全限定类名:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> userClass.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"获取类名:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> userClass.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getSimpleName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"实例化:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> userClass.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">newInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span></code></pre>
</div><h2 id="_1-23" tabindex="-1">1-23 <a class="header-anchor" href="#_1-23" aria-label="Permalink to &quot;1-23&quot;"></a></h2>
<h3 id="quartz是做什么用的" tabindex="-1">Quartz是做什么用的？ <a class="header-anchor" href="#quartz是做什么用的" aria-label="Permalink to &quot;Quartz是做什么用的？&quot;"></a></h3>
<p>Quartz 是开源的 JAVA 任务调度框架，能够灵活且简单的管理定时任务。支持数据库集成、集群、插件等。支持使用 <code>cron-like</code> 表达式。</p>
<h2 id="_1-22" tabindex="-1">1-22 <a class="header-anchor" href="#_1-22" aria-label="Permalink to &quot;1-22&quot;"></a></h2>
<h3 id="如何限制规定泛型的范围" tabindex="-1">如何限制规定泛型的范围？ <a class="header-anchor" href="#如何限制规定泛型的范围" aria-label="Permalink to &quot;如何限制规定泛型的范围？&quot;"></a></h3>
<p>可以使用 <code>extends</code> 关键字：
<code>class Test&lt;T extends Number&gt;</code> 限制泛型的范围为 Number 及其子类。</p>
<p>也可以使用 <code>interface</code> 关键字：
<code>class Test&lt;T implements Test&gt;</code> 限制泛型的范围为 Test 的实现方法。</p>
<h2 id="_1-21" tabindex="-1">1-21 <a class="header-anchor" href="#_1-21" aria-label="Permalink to &quot;1-21&quot;"></a></h2>
<h3 id="泛型类如何定义使用" tabindex="-1">泛型类如何定义使用？ <a class="header-anchor" href="#泛型类如何定义使用" aria-label="Permalink to &quot;泛型类如何定义使用？&quot;"></a></h3>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>{                  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 此处可以随便写标识符号，T是type的简称</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> T t;                </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 类型由T指定，即：由外部指定  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> setT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(T </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">){</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> t;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> T </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> t;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> TestDemo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        Test&#x3C;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">> test </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Test&#x3C;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        test.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">setT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"hello"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(test.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="_1-20" tabindex="-1">1-20 <a class="header-anchor" href="#_1-20" aria-label="Permalink to &quot;1-20&quot;"></a></h2>
<h3 id="this-super-在构造方法中的区别" tabindex="-1">this() &amp; super() 在构造方法中的区别？ <a class="header-anchor" href="#this-super-在构造方法中的区别" aria-label="Permalink to &quot;this() &amp; super() 在构造方法中的区别？&quot;"></a></h3>
<ul>
<li>调用super()必须写在子类构造方法的第一行, 否则编译不通过</li>
<li>super从子类调用父类构造, this在同一类中调用其他构造均需要放在第一行</li>
<li>尽管可以用this调用一个构造器, 却不能调用2个</li>
<li>this和super不能出现在同一个构造器中, 否则编译不通过</li>
<li>this()、super()都指的对象,不可以在static环境中使用</li>
<li>本质this指向本对象的指针。super是一个关键字</li>
</ul>
<h2 id="_1-19" tabindex="-1">1-19 <a class="header-anchor" href="#_1-19" aria-label="Permalink to &quot;1-19&quot;"></a></h2>
<h3 id="什么是-java-移位运算符" tabindex="-1">什么是 Java 移位运算符？ <a class="header-anchor" href="#什么是-java-移位运算符" aria-label="Permalink to &quot;什么是 Java 移位运算符？&quot;"></a></h3>
<ul>
<li><code>&lt;&lt;</code> 左移运算符，num &lt;&lt; 1，相当于 num 乘以 2</li>
<li><code>&gt;&gt;</code> 右移运算符，num &gt;&gt; 1，相当于 num 除以 2</li>
<li><code>&gt;&gt;&gt;</code> 无符号右移运算符，忽略符号位，空位都以0补齐</li>
</ul>
<h2 id="_1-18" tabindex="-1">1-18 <a class="header-anchor" href="#_1-18" aria-label="Permalink to &quot;1-18&quot;"></a></h2>
<h3 id="java-能在-switch-中使用-string-吗" tabindex="-1">JAVA 能在 Switch 中使用 String 吗? <a class="header-anchor" href="#java-能在-switch-中使用-string-吗" aria-label="Permalink to &quot;JAVA 能在 Switch 中使用 String 吗?&quot;"></a></h3>
<p>在 Java 7 之前，switch 只能支持 byte、short、char、int、enum 类型，Java 7 之后，可以支持 String 类型。</p>
<h2 id="_1-17" tabindex="-1">1-17 <a class="header-anchor" href="#_1-17" aria-label="Permalink to &quot;1-17&quot;"></a></h2>
<h3 id="为什么dns通常基于-udp" tabindex="-1">为什么DNS通常基于 UDP？ <a class="header-anchor" href="#为什么dns通常基于-udp" aria-label="Permalink to &quot;为什么DNS通常基于 UDP？&quot;"></a></h3>
<p>DNS 通常基于 UDP，因为 UDP 没有连接的开销，而且 DNS 服务需要尽可能快地响应请求，而不是等待连接建立。但当数据长度大于512字节时，为保证传输质量，就会使用基于TCP的实现形式。</p>
<h2 id="_1-16" tabindex="-1">1-16 <a class="header-anchor" href="#_1-16" aria-label="Permalink to &quot;1-16&quot;"></a></h2>
<h3 id="tcp-三次握手中-最后一次回复丢失-会发生什么" tabindex="-1">TCP 三次握手中，最后一次回复丢失，会发生什么？ <a class="header-anchor" href="#tcp-三次握手中-最后一次回复丢失-会发生什么" aria-label="Permalink to &quot;TCP 三次握手中，最后一次回复丢失，会发生什么？&quot;"></a></h3>
<p>如果最后一次回复丢失，客户端会认为服务端没有收到确认信息，会再次发送确认信息，服务端收到确认信息后，会再次发送确认信息，客户端收到确认信息后，会再次发送确认信息，如此循环，直到连接超时。</p>
<h2 id="_1-15" tabindex="-1">1-15 <a class="header-anchor" href="#_1-15" aria-label="Permalink to &quot;1-15&quot;"></a></h2>
<h3 id="什么是-tcp-三次握手" tabindex="-1">什么是 TCP 三次握手？ <a class="header-anchor" href="#什么是-tcp-三次握手" aria-label="Permalink to &quot;什么是 TCP 三次握手？&quot;"></a></h3>
<p>TCP 三次握手是指建立 TCP 连接时，客户端和服务端需要进行三次通信，以确认双方的接收能力和发送能力是否正常。</p>
<ol>
<li>发送端首先发送一个带SYN（synchronize）标志的数据包给接收方【第一次的seq序列号是随机产生的，这样是为了网络安全，如果不是随机产生初始序列号，黑客将会以很容易的方式获取到你与其他主机之间的初始化序列号，并且伪造序列号进行攻击】</li>
<li>接收端收到后，回传一个带有SYN/ACK（acknowledgement）标志的数据包以示传达确认信息【SYN 是为了告诉发送端，发送方到接收方的通道没问题；ACK 用来验证接收方到发送方的通道没问题】</li>
<li>最后，发送端再回传一个带ACK标志的数据包，代表握手结束若在握手某个过程中某个阶段莫名中断，TCP协议会再次以相同的顺序发送相同的数据包</li>
</ol>
<h2 id="_1-14" tabindex="-1">1-14 <a class="header-anchor" href="#_1-14" aria-label="Permalink to &quot;1-14&quot;"></a></h2>
<h3 id="什么是754层网络模型" tabindex="-1">什么是754层网络模型？ <a class="header-anchor" href="#什么是754层网络模型" aria-label="Permalink to &quot;什么是754层网络模型？&quot;"></a></h3>
<p><img src="https://www.pdai.tech/images/develop/network/dev-network-protocol-1.png" alt="754网络模型及对应" title="754网络模型"></p>
<p>OSI依层次结构来划分：应用层（Application）、表示层（Presentation）、会话层（Session）、传输层（Transport）、网络层（Network）、数据链路层（Data Link）、物理层（Physical）</p>
<h2 id="_1-13" tabindex="-1">1-13 <a class="header-anchor" href="#_1-13" aria-label="Permalink to &quot;1-13&quot;"></a></h2>
<h3 id="什么是日志系统和日志门面" tabindex="-1">什么是日志系统和日志门面？ <a class="header-anchor" href="#什么是日志系统和日志门面" aria-label="Permalink to &quot;什么是日志系统和日志门面？&quot;"></a></h3>
<p><strong>日志系统</strong>是用来记录应用程序运行时的状态信息，比如错误日志、警告日志、调试日志等。</p>
<ul>
<li>Log4j</li>
<li>Logback</li>
<li>Log4j2</li>
</ul>
<p><strong>日志门面</strong>是一种日志系统的抽象，它定义了一组日志系统的公共接口，以便于应用程序通过这组公共接口来记录日志，而不用关心具体的日志系统实现。</p>
<ul>
<li>SLF4J</li>
<li>Commons Logging</li>
<li>Log4j-to-SLF4J</li>
</ul>
<h2 id="_1-12" tabindex="-1">1-12 <a class="header-anchor" href="#_1-12" aria-label="Permalink to &quot;1-12&quot;"></a></h2>
<h3 id="什么是-jwt" tabindex="-1">什么是 JWT? <a class="header-anchor" href="#什么是-jwt" aria-label="Permalink to &quot;什么是 JWT?&quot;"></a></h3>
<p>JWT（JSON Web Token）是一个开放标准（RFC 7519），它定义了一种紧凑且自包含的方式，用于作为 JSON 对象在各方之间安全地传输信息。</p>
<p>通过非对称加密算法，可以对 JWT 进行签名，从而保证 JWT 的真实性和完整性。</p>
<h2 id="_1-11" tabindex="-1">1-11 <a class="header-anchor" href="#_1-11" aria-label="Permalink to &quot;1-11&quot;"></a></h2>
<h3 id="spring-security-的原理" tabindex="-1">Spring Security 的原理? <a class="header-anchor" href="#spring-security-的原理" aria-label="Permalink to &quot;Spring Security 的原理?&quot;"></a></h3>
<p>SpringSecurity 的核心是一个过滤器链，它由一系列的过滤器组成，每个过滤器负责一项安全控制功能，比如认证、授权、会话管理等。</p>
<h2 id="_1-10" tabindex="-1">1-10 <a class="header-anchor" href="#_1-10" aria-label="Permalink to &quot;1-10&quot;"></a></h2>
<h3 id="什么是-spring-security" tabindex="-1">什么是 Spring Security？ <a class="header-anchor" href="#什么是-spring-security" aria-label="Permalink to &quot;什么是 Spring Security？&quot;"></a></h3>
<p>SpringSecurity 是基于 Spring 的安全框架，它提供了较为全面的一套安全性解决方案，并且可以与 SpringMVC、SpringBoot 等框架无缝集成。
它充分利用了依赖注入和 AOP 技术，可以将安全性应用到方法调用或 Web 请求上，为应用系统提供声明式的安全访问控制功能。</p>
<h2 id="_1-9" tabindex="-1">1-9 <a class="header-anchor" href="#_1-9" aria-label="Permalink to &quot;1-9&quot;"></a></h2>
<h3 id="谈谈你对-cglib-的理解" tabindex="-1">谈谈你对 CGLib 的理解？ <a class="header-anchor" href="#谈谈你对-cglib-的理解" aria-label="Permalink to &quot;谈谈你对 CGLib 的理解？&quot;"></a></h3>
<p>JDK 动态代理机制只能代理实现接口的类，一般没有实现接口的类不能进行代理。使用 CGLib 实现动态代理，完全不受代理类必须实现接口的限制。</p>
<p>CGLib 的原理是对指定目标类生成一个子类，并覆盖其中方法实现增强，但因为采用的是继承，所以不能对 final 修饰的类进行代理。</p>
<p>CGLib 的调用流程就是通过调用拦截器的 intercept 方法来实现对被代理类的调用。而拦截逻辑可以写在 intercept 方法的 invokeSuper(o, objects);的前后实现拦截。</p>
<h2 id="_1-8" tabindex="-1">1-8 <a class="header-anchor" href="#_1-8" aria-label="Permalink to &quot;1-8&quot;"></a></h2>
<h3 id="有哪些aop-advice通知的类型" tabindex="-1">有哪些AOP Advice通知的类型？ <a class="header-anchor" href="#有哪些aop-advice通知的类型" aria-label="Permalink to &quot;有哪些AOP Advice通知的类型？&quot;"></a></h3>
<ul>
<li><strong>前置通知（Before advice） ：</strong> 这些类型的 Advice 在 joinpoint 方法之前执行，并使用 @Before 注解标记进行配置。</li>
<li><strong>后置通知（After advice） ：</strong> 这些类型的 Advice 在连接点方法之后执行，无论方法退出是正常还是异常返回，并使用 @After 注解标记进行配置。</li>
<li><strong>返回后通知（After return advice） ：</strong> 这些类型的 Advice 在连接点方法正常执行后执行，并使用@AfterReturning 注解标记进行配置。</li>
<li><strong>环绕通知（Around advice） ：</strong> 些类型的 Advice 在连接点之前和之后执行，并使用 @Around 注解标记进行配置。</li>
<li><strong>抛出异常后通知（After throwing advice） ：</strong> 仅在 joinpoint 方法通过抛出异常退出并使用 @AfterThrowing 注解标记配置时执行。</li>
</ul>
<h2 id="_1-7" tabindex="-1">1-7 <a class="header-anchor" href="#_1-7" aria-label="Permalink to &quot;1-7&quot;"></a></h2>
<h3 id="aop-包含的几个概念" tabindex="-1">AOP 包含的几个概念? <a class="header-anchor" href="#aop-包含的几个概念" aria-label="Permalink to &quot;AOP 包含的几个概念?&quot;"></a></h3>
<ul>
<li><strong>切面（Aspect）：</strong> 一个关注点的模块化，这个关注点可能会横切多个对象。</li>
<li><strong>连接点（Joinpoint）：</strong> 程序执行过程中的某个特定的点，比如某方法调用的时候或者处理异常的时候。</li>
<li><strong>通知（Advice）：</strong> 在切面的某个特定的连接点上执行的动作。</li>
<li><strong>切入点（Pointcut）：</strong> 匹配连接点的断言，在 AOP 中通知和一个切入点表达式关联。</li>
<li><strong>引入（Introduction）：</strong> 在不修改代码的前提下，引入可以在运行期为类动态地添加一些方法或字段。</li>
<li><strong>目标对象（Target Object）：</strong> 被一个或者多个切面所通知的对象，也称为被通知（advised）对象。</li>
<li><strong>织入（Weaving）：</strong> 把切面连接到其它的应用程序类型或者对象上，并创建一个被通知的对象，这些可以在运行期完成，也可以在编译期完成。</li>
</ul>
<h2 id="_1-6" tabindex="-1">1-6 <a class="header-anchor" href="#_1-6" aria-label="Permalink to &quot;1-6&quot;"></a></h2>
<h3 id="列举一些重要的spring模块。" tabindex="-1">列举一些重要的Spring模块。 <a class="header-anchor" href="#列举一些重要的spring模块。" aria-label="Permalink to &quot;列举一些重要的Spring模块。&quot;"></a></h3>
<ul>
<li>Spring Core：核心容器，提供 IoC 和 DI 的功能。</li>
<li>Spring AOP：面向切面编程，提供声明式事务管理。</li>
<li>Spring Aspects：提供与 AspectJ 的集成功能。</li>
<li>Spring JDBC：提供了 JAVA 数据库连接功能。</li>
<li>Spring Web：提供了基本的 Web 开发功能。</li>
<li>Spring MVC：提供了 MVC 模式的 Web 开发功能。</li>
<li>Spring ORM：提供了对常见的 ORM 框架的支持，如 Hibernate、JPA 等。</li>
<li>Spring Test：提供了对 JUnit 和 TestNG 的支持。</li>
<li>Spring Session：提供了对 Session 的集成支持。</li>
<li>Spring Security：提供了对安全认证和授权的支持。</li>
</ul>
<h2 id="_1-5" tabindex="-1">1-5 <a class="header-anchor" href="#_1-5" aria-label="Permalink to &quot;1-5&quot;"></a></h2>
<h3 id="什么是监听器" tabindex="-1">什么是监听器？ <a class="header-anchor" href="#什么是监听器" aria-label="Permalink to &quot;什么是监听器？&quot;"></a></h3>
<p>监听器是 Servlet 规范中的一种组件，可以监听 ServletContext、HttpSession、ServletRequest 等域对象的创建和销毁，以及域对象中属性的变化。</p>
<p>配置示例：</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyListener</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ServletContextListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> contextInitialized</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(ServletContextEvent </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">sce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        // ServletContext 创建时执行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> contextDestroyed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(ServletContextEvent </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">sce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        // ServletContext 销毁时执行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>使用示例：</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Configuration</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ServletListenerRegistrationBean&#x3C;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">MyListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">> </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">myListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ServletListenerRegistrationBean&#x3C;>(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="_1-4" tabindex="-1">1-4 <a class="header-anchor" href="#_1-4" aria-label="Permalink to &quot;1-4&quot;"></a></h2>
<h3 id="什么是拦截器" tabindex="-1">什么是拦截器？ <a class="header-anchor" href="#什么是拦截器" aria-label="Permalink to &quot;什么是拦截器？&quot;"></a></h3>
<p>拦截器是 SpringMVC 的一种组件，可以在请求到达控制器之前或之后执行一些操作，比如记录日志、权限校验等。</p>
<p>配置示例：</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyInterceptor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> HandlerInterceptor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> preHandle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(HttpServletRequest </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, HttpServletResponse </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, Object </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">handler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Exception {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        // 在请求到达控制器之前执行</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> postHandle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(HttpServletRequest </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, HttpServletResponse </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, Object </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">handler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, ModelAndView </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">modelAndView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Exception {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        // 在请求到达控制器之后，视图渲染之前执行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> afterCompletion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(HttpServletRequest </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, HttpServletResponse </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, Object </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">handler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, Exception </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">ex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Exception {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        // 在视图渲染之后执行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>使用示例：</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Configuration</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyConfig</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> WebMvcConfigurer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> addInterceptors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(InterceptorRegistry </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">registry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        registry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">addInterceptor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyInterceptor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">addPathPatterns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"/**"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">excludePathPatterns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"/hello"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="_1-3" tabindex="-1">1-3 <a class="header-anchor" href="#_1-3" aria-label="Permalink to &quot;1-3&quot;"></a></h2>
<h3 id="spring-boot-的默认编码是" tabindex="-1">Spring Boot 的默认编码是？ <a class="header-anchor" href="#spring-boot-的默认编码是" aria-label="Permalink to &quot;Spring Boot 的默认编码是？&quot;"></a></h3>
<p>SpringBoot 的默认编码是 <code>UTF-8</code>。可以通过 <code>spring.http.encoding.charset</code> 属性来修改编码。</p>
<h2 id="_1-2" tabindex="-1">1-2 <a class="header-anchor" href="#_1-2" aria-label="Permalink to &quot;1-2&quot;"></a></h2>
<h3 id="spring-boot-应用如何优雅关闭" tabindex="-1">Spring Boot 应用如何优雅关闭？ <a class="header-anchor" href="#spring-boot-应用如何优雅关闭" aria-label="Permalink to &quot;Spring Boot 应用如何优雅关闭？&quot;"></a></h3>
<p>SpringBoot 应用可以通过 <code>SpringApplication.exit()</code> 方法来优雅关闭，该方法可以用在任何地方。</p>
<h2 id="_1-1" tabindex="-1">1-1 <a class="header-anchor" href="#_1-1" aria-label="Permalink to &quot;1-1&quot;"></a></h2>
<h3 id="spring-boot-怎么注册事件监听器" tabindex="-1">Spring Boot 怎么注册事件监听器？ <a class="header-anchor" href="#spring-boot-怎么注册事件监听器" aria-label="Permalink to &quot;Spring Boot 怎么注册事件监听器？&quot;"></a></h3>
<p>SpringBoot 可以通过 <code>@EventListener</code> 注解来注册事件监听器，该注解可以用在方法上，也可以用在类上。</p>
]]></content:encoded>
            <enclosure url="https://www.pdai.tech/images/develop/network/dev-network-protocol-1.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[每日一题 - 202402]]></title>
            <link>https://www.imufeng.cn/interview/question-by-day/2024/2.html</link>
            <guid>https://www.imufeng.cn/interview/question-by-day/2024/2.html</guid>
            <pubDate>Sat, 05 Oct 2024 12:44:16 GMT</pubDate>
            <description><![CDATA[每日一题 - 202402
 2-29
 Mybatis 如何将查询结果封装为对象？
Mybatis 有两种映射形式，第一种是使用``标签，逐一定义数据库列名和对象属性名之间的映射关系。 第二种是使用]]></description>
            <content:encoded><![CDATA[<h1 id="每日一题-202402" tabindex="-1">每日一题 - 202402 <a class="header-anchor" href="#每日一题-202402" aria-label="Permalink to &quot;每日一题 - 202402&quot;"></a></h1>
<h2 id="_2-29" tabindex="-1">2-29 <a class="header-anchor" href="#_2-29" aria-label="Permalink to &quot;2-29&quot;"></a></h2>
<h3 id="mybatis-如何将查询结果封装为对象" tabindex="-1">Mybatis 如何将查询结果封装为对象？ <a class="header-anchor" href="#mybatis-如何将查询结果封装为对象" aria-label="Permalink to &quot;Mybatis 如何将查询结果封装为对象？&quot;"></a></h3>
<p>Mybatis 有两种映射形式，第一种是使用``标签，逐一定义数据库列名和对象属性名之间的映射关系。 第二种是使用sql列的别名功能，将列的别名书写为对象属性名。</p>
<p>有了列名与属性名的映射关系后，Mybatis通过反射创建对象，同时使用反射给对象的属性逐一赋值并返回，那些找不到映射关系的属性，是无法完成赋值的。</p>
<h2 id="_2-28" tabindex="-1">2-28 <a class="header-anchor" href="#_2-28" aria-label="Permalink to &quot;2-28&quot;"></a></h2>
<h3 id="dao-接口的工作原理是什么" tabindex="-1">Dao 接口的工作原理是什么 <a class="header-anchor" href="#dao-接口的工作原理是什么" aria-label="Permalink to &quot;Dao 接口的工作原理是什么&quot;"></a></h3>
<p>Dao 接口即 Mapper 接口，接口的全限名，就是映射文件中的namespace的值；接口的方法名，就是映射文件中 Mapper 的 Statement 的 id 值；
接口方法内的参数，就是传递给 sql 的参数。</p>
<p>Mapper 接口是没有实现类的，当调用接口方法时，接口全限名+方法名拼接字符串作为key值，可唯一定位一个 MapperStatement。
在 Mybatis 中每、、、标签，都会被解析为一个 MapperStatement 对象。</p>
<h2 id="_2-27" tabindex="-1">2-27 <a class="header-anchor" href="#_2-27" aria-label="Permalink to &quot;2-27&quot;"></a></h2>
<h3 id="mybatis-查询时当实体类中的属性名和表中的字段名不一样-怎么办" tabindex="-1">Mybatis 查询时当实体类中的属性名和表中的字段名不一样，怎么办？ <a class="header-anchor" href="#mybatis-查询时当实体类中的属性名和表中的字段名不一样-怎么办" aria-label="Permalink to &quot;Mybatis 查询时当实体类中的属性名和表中的字段名不一样，怎么办？&quot;"></a></h3>
<ol>
<li>通过在查询的sql语句中定义字段名的别名，让字段名的别名和实体类的属性名一致。</li>
<li>通过 `` 来映射字段名和实体类属性名的一一对应的关系。</li>
</ol>
<h2 id="_2-26" tabindex="-1">2-26 <a class="header-anchor" href="#_2-26" aria-label="Permalink to &quot;2-26&quot;"></a></h2>
<h3 id="mybatis-中-和-的区别是什么" tabindex="-1">Mybatis 中 <code>#{}</code> 和 <code>${}</code> 的区别是什么？ <a class="header-anchor" href="#mybatis-中-和-的区别是什么" aria-label="Permalink to &quot;Mybatis 中 `#{}` 和 `${}` 的区别是什么？&quot;"></a></h3>
<ul>
<li><code>#{}</code> 是预编译处理，可以防止 SQL 注入。</li>
<li><code>${}</code> 是字符串替换，不会进行预编译处理，可能会导致 SQL 注入。</li>
</ul>
<div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">select</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"selectBlog"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> resultType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"Blog"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  &#x3C;!-- Mybatis在处理#{}时，会将sql中的#{}替换为?号，调用PreparedStatement的set方法来赋值； --></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  select * from blog where id = #{id}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">select</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"selectBlog"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> resultType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"Blog"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  &#x3C;!-- Mybatis在处理${}时，就是把${}替换成变量的值。--></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  select * from blog where id = ${id}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><h2 id="_2-25" tabindex="-1">2-25 <a class="header-anchor" href="#_2-25" aria-label="Permalink to &quot;2-25&quot;"></a></h2>
<h3 id="什么是-orm" tabindex="-1">什么是 ORM？ <a class="header-anchor" href="#什么是-orm" aria-label="Permalink to &quot;什么是 ORM？&quot;"></a></h3>
<p>ORM（Object-Relational Mapping）对象关系映射，是一种数据持久化技术。它在对象模型和关系型数据库直接建立起对应关系，并且提供一种机制，
通过JavaBean对象去操作数据库表的数据。 MyBatis通过简单的XML或者注解的方式进行配置和原始映射，将实体类和SQL语句之间建立映射关系，
是一种半自动（之所以说是半自动，因为我们要自己写SQL）的ORM实现。</p>
<h2 id="_2-24" tabindex="-1">2-24 <a class="header-anchor" href="#_2-24" aria-label="Permalink to &quot;2-24&quot;"></a></h2>
<h3 id="什么是数据持久化" tabindex="-1">什么是数据持久化？ <a class="header-anchor" href="#什么是数据持久化" aria-label="Permalink to &quot;什么是数据持久化？&quot;"></a></h3>
<p>数据持久化是将内存中的数据模型转换为存储模型，以及将存储模型转换为内存中的数据模型的统称。
例如，文件的存储、数据的读取等都是数据持久化操作。数据模型可以是任何数据结构或对象的模型、XML、二进制流等。
当我们编写应用程序操作数据库，对表数据进行增删改查的操作的时候就是数据持久化的操作。</p>
<h2 id="_2-23" tabindex="-1">2-23 <a class="header-anchor" href="#_2-23" aria-label="Permalink to &quot;2-23&quot;"></a></h2>
<h3 id="怎么确保一个集合不能被修改" tabindex="-1">怎么确保一个集合不能被修改？ <a class="header-anchor" href="#怎么确保一个集合不能被修改" aria-label="Permalink to &quot;怎么确保一个集合不能被修改？&quot;"></a></h3>
<p>可以使用 <code>Collections.unmodifiableList()</code> 方法来确保一个集合不能被修改。</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">List&#x3C;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">> list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ArrayList&#x3C;>();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"a"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"b"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"c"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">List&#x3C;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">> unmodifiableList </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Collections.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">unmodifiableList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(list);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">unmodifiableList.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"d"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 运行时抛出 Java. lang. UnsupportedOperationException 异常。</span></span></code></pre>
</div><h2 id="_2-22" tabindex="-1">2-22 <a class="header-anchor" href="#_2-22" aria-label="Permalink to &quot;2-22&quot;"></a></h2>
<h3 id="iterator-是什么" tabindex="-1">Iterator 是什么？ <a class="header-anchor" href="#iterator-是什么" aria-label="Permalink to &quot;Iterator 是什么？&quot;"></a></h3>
<p>Iterator 是 JAVA 集合框架中的迭代器接口，它是一个对象，它可以遍历并选择集合中的元素。迭代器取代了 JAVA 集合框架中的 Enumeration，迭代器允许调用者在迭代过程中移除元素。</p>
<h2 id="_2-21" tabindex="-1">2-21 <a class="header-anchor" href="#_2-21" aria-label="Permalink to &quot;2-21&quot;"></a></h2>
<h3 id="什么是散列表" tabindex="-1">什么是散列表？ <a class="header-anchor" href="#什么是散列表" aria-label="Permalink to &quot;什么是散列表？&quot;"></a></h3>
<p>散列表（Hash table，也叫哈希表），是根据关键码值（Key value）而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。</p>
<h2 id="_2-20" tabindex="-1">2-20 <a class="header-anchor" href="#_2-20" aria-label="Permalink to &quot;2-20&quot;"></a></h2>
<h3 id="hashmap-是怎么解决-hash-冲突的" tabindex="-1">HashMap 是怎么解决 hash 冲突的？ <a class="header-anchor" href="#hashmap-是怎么解决-hash-冲突的" aria-label="Permalink to &quot;HashMap 是怎么解决 hash 冲突的？&quot;"></a></h3>
<p>HashMap 是基于哈希表实现的，哈希表是数组和链表的结合体，数组是 HashMap 的主体，链表则是主要为了解决哈希冲突而存在的。
HashMap 的做法是用链表和红黑树存储相同 hash 值的 value。当 hash 冲突的个数比较少时，使用链表否则使用红黑树。</p>
<h2 id="_2-19" tabindex="-1">2-19 <a class="header-anchor" href="#_2-19" aria-label="Permalink to &quot;2-19&quot;"></a></h2>
<h3 id="简述快速排序的过程。" tabindex="-1">简述快速排序的过程。 <a class="header-anchor" href="#简述快速排序的过程。" aria-label="Permalink to &quot;简述快速排序的过程。&quot;"></a></h3>
<ol>
<li>选择一个基准元素（第一个或最后一个）。</li>
<li>通过一趟排序将待排序的记录分割成独立的两个部分，其中一部分记录的元素值均比基准元素值小，另一部分记录的元素值比基准值大。</li>
<li>此时基准元素在其排好序后的正确位置。</li>
<li>然后分别对这两部分记录使用相同方法进行排序，直到整个序列有序。</li>
</ol>
<h2 id="_2-18" tabindex="-1">2-18 <a class="header-anchor" href="#_2-18" aria-label="Permalink to &quot;2-18&quot;"></a></h2>
<h3 id="arraylist-和-linkedlist-的区别是什么" tabindex="-1">ArrayList 和 LinkedList 的区别是什么？ <a class="header-anchor" href="#arraylist-和-linkedlist-的区别是什么" aria-label="Permalink to &quot;ArrayList 和 LinkedList 的区别是什么？&quot;"></a></h3>
<ul>
<li>ArrayList 是基于动态数组实现的，LinkedList 是基于双向链表实现的。</li>
<li>ArrayList 支持随机访问，LinkedList 只能顺序访问。</li>
<li>LinkedList 在插入和删除时效率较高，因为 ArrayList 增删操作可能要影响其他数据的下标。</li>
</ul>
<h2 id="_2-17" tabindex="-1">2-17 <a class="header-anchor" href="#_2-17" aria-label="Permalink to &quot;2-17&quot;"></a></h2>
<h3 id="hashmap-的实现原理" tabindex="-1">HashMap 的实现原理？ <a class="header-anchor" href="#hashmap-的实现原理" aria-label="Permalink to &quot;HashMap 的实现原理？&quot;"></a></h3>
<p>HashMap 是基于哈希表实现的，哈希表是数组和链表的结合体，数组是 HashMap 的主体，链表则是主要为了解决哈希冲突而存在的。HashMap 的做法是用链表和红黑树存储相同 hash 值的 value。当 hash 冲突的个数比较少时，使用链表否则使用红黑树。</p>
<h2 id="_2-16" tabindex="-1">2-16 <a class="header-anchor" href="#_2-16" aria-label="Permalink to &quot;2-16&quot;"></a></h2>
<h3 id="hashset-的实现原理" tabindex="-1">HashSet 的实现原理？ <a class="header-anchor" href="#hashset-的实现原理" aria-label="Permalink to &quot;HashSet 的实现原理？&quot;"></a></h3>
<p>HashSet 是基于 HashMap 实现的，HashSet 的元素存储在 HashMap 的 key 上，value 是一个固定的 Object 对象。</p>
<h2 id="_2-15" tabindex="-1">2-15 <a class="header-anchor" href="#_2-15" aria-label="Permalink to &quot;2-15&quot;"></a></h2>
<h3 id="如何决定使用-hashmap-还是-treemap" tabindex="-1">如何决定使用 HashMap 还是 TreeMap？ <a class="header-anchor" href="#如何决定使用-hashmap-还是-treemap" aria-label="Permalink to &quot;如何决定使用 HashMap 还是 TreeMap？&quot;"></a></h3>
<ul>
<li>如果需要按自然顺序或者自定义顺序遍历键，那么使用 TreeMap。</li>
<li>如果需要快速查找键或者值，那么使用 HashMap。</li>
</ul>
<h2 id="_2-14" tabindex="-1">2-14 <a class="header-anchor" href="#_2-14" aria-label="Permalink to &quot;2-14&quot;"></a></h2>
<h3 id="hashmap-和-hashtable-的区别" tabindex="-1">HashMap 和 HashTable 的区别？ <a class="header-anchor" href="#hashmap-和-hashtable-的区别" aria-label="Permalink to &quot;HashMap 和 HashTable 的区别？&quot;"></a></h3>
<ul>
<li>HashMap 是非线程安全的，HashTable 是线程安全的。</li>
<li>HashMap 允许 <code>null</code> 键和 <code>null</code> 值，HashTable 不允许 <code>null</code> 键和 <code>null</code> 值。</li>
</ul>
<h2 id="_2-13" tabindex="-1">2-13 <a class="header-anchor" href="#_2-13" aria-label="Permalink to &quot;2-13&quot;"></a></h2>
<h3 id="hashmap-什么样的类适合作为键" tabindex="-1">HashMap 什么样的类适合作为键？ <a class="header-anchor" href="#hashmap-什么样的类适合作为键" aria-label="Permalink to &quot;HashMap 什么样的类适合作为键？&quot;"></a></h3>
<ul>
<li>作为键的类必须重写 <code>hashCode()</code> 和 <code>equals()</code> 方法。</li>
<li>作为键的类应该是不可变的，不可变的类是指创建后不可改变的类，如 String、Integer、Long 等。</li>
<li>作为键的类应该是唯一的，如果两个键的 <code>hashCode()</code> 相同，那么它们的 <code>equals()</code> 方法也应该返回 <code>true</code>。</li>
</ul>
<h2 id="_2-12" tabindex="-1">2-12 <a class="header-anchor" href="#_2-12" aria-label="Permalink to &quot;2-12&quot;"></a></h2>
<h3 id="list-和-map-的区别" tabindex="-1">List 和 Map 的区别？ <a class="header-anchor" href="#list-和-map-的区别" aria-label="Permalink to &quot;List 和 Map 的区别？&quot;"></a></h3>
<ul>
<li>List 是有序的单列数据集合，可以有重复的元素。</li>
<li>Map 是无序的键值对集合，不允许重复的键，但是允许重复的值。</li>
</ul>
<h2 id="_2-11" tabindex="-1">2-11 <a class="header-anchor" href="#_2-11" aria-label="Permalink to &quot;2-11&quot;"></a></h2>
<h3 id="力扣题库-计算数组最大连续-1-的个数。" tabindex="-1">（力扣题库）计算数组最大连续 1 的个数。 <a class="header-anchor" href="#力扣题库-计算数组最大连续-1-的个数。" aria-label="Permalink to &quot;（力扣题库）计算数组最大连续 1 的个数。&quot;"></a></h3>
<p><strong>输入：</strong> <code>nums = [1,1,0,1,1,1]</code></p>
<p><strong>输出：</strong> <code>3</code></p>
<p><strong>输入：</strong> <code>nums = [1,0,1,1,0,1]</code></p>
<p><strong>输出：</strong> <code>2</code></p>
<blockquote>
<p>开头的两位和最后的三位都是连续 1 ，所以最大连续 1 的个数是 3.</p>
<p>1 &lt;= nums.length &lt;= 105</p>
<p>nums[i] 不是 0 就是 1.</p>
</blockquote>
<p><strong>题解：</strong></p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> findMaxConsecutiveOnes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[] nums) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> max </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, cur </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> nums) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    cur </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> ?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> cur </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    max </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(max, cur);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> max;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="_2-10" tabindex="-1">2-10 <a class="header-anchor" href="#_2-10" aria-label="Permalink to &quot;2-10&quot;"></a></h2>
<h3 id="什么是栈-什么是队列" tabindex="-1">什么是栈，什么是队列？ <a class="header-anchor" href="#什么是栈-什么是队列" aria-label="Permalink to &quot;什么是栈，什么是队列？&quot;"></a></h3>
<p><strong>栈（Stack）</strong> 是一种先进后出（FILO）的数据结构，只允许在栈顶进行插入和删除操作。</p>
<p><strong>队列（Queue）</strong> 是一种先进先出（FIFO）的数据结构，只允许在队列的两端进行插入和删除操作。</p>
<h2 id="_2-9" tabindex="-1">2-9 <a class="header-anchor" href="#_2-9" aria-label="Permalink to &quot;2-9&quot;"></a></h2>
<h3 id="什么是快速失败和安全失败机制" tabindex="-1">什么是快速失败和安全失败机制？ <a class="header-anchor" href="#什么是快速失败和安全失败机制" aria-label="Permalink to &quot;什么是快速失败和安全失败机制？&quot;"></a></h3>
<p><strong>快速失败（Fail-Fast）：</strong> 在用迭代器对集合对象进行遍历的时候，如果A线程正在对集合进行遍历，此时B线程或A线程对集合进行修改（增删改）操作，
都会导致A线程抛出 ConcurrentModificationException 异常。 这是因为迭代器在便利是直接访问集合中的内容，
并且使用一个 modCount 变量，集合在被遍历期间如果内容发生变化，modCount 也会发生变化，迭代器就会抛出异常。</p>
<p><strong>安全失败（Fail-Safe）：</strong> 安全失败机制的集合容器，在便利是不直接访问集合内容吗，而是先复制原有集合，并操作拷贝后的集合。</p>
<h2 id="_2-8" tabindex="-1">2-8 <a class="header-anchor" href="#_2-8" aria-label="Permalink to &quot;2-8&quot;"></a></h2>
<h3 id="arraylist-底层是什么" tabindex="-1">ArrayList 底层是什么？ <a class="header-anchor" href="#arraylist-底层是什么" aria-label="Permalink to &quot;ArrayList 底层是什么？&quot;"></a></h3>
<p>ArrayList 采用 List 数组作为底层实现，是顺序容器，允许放入 <code>null</code> 元素。
ArrayList 具有自动增加底层数组容量的能力，当数组容量不足时，会自动增加容量。</p>
<h2 id="_2-7" tabindex="-1">2-7 <a class="header-anchor" href="#_2-7" aria-label="Permalink to &quot;2-7&quot;"></a></h2>
<h3 id="java-集合有哪些类" tabindex="-1">JAVA 集合有哪些类？ <a class="header-anchor" href="#java-集合有哪些类" aria-label="Permalink to &quot;JAVA 集合有哪些类？&quot;"></a></h3>
<ul>
<li>Set
<ul>
<li>TreeSet 基于红黑树实现，支持有序性操作。</li>
<li>HashSet 基于哈希表实现，支持快速查找。</li>
<li>LinkedHashSet 具有可预知迭代顺序的 Set 接口的哈希表和链接列表实现。</li>
</ul>
</li>
<li>List
<ul>
<li>ArrayList 基于动态数组实现，支持随机访问。</li>
<li>Vector 和 ArrayList 类似，但是它是线程安全的。</li>
<li>LinkedList 基于双向链表实现，只能顺序访问，但是可以快速插入和删除，也可以用作堆栈、队列。</li>
</ul>
</li>
<li>Queue
<ul>
<li>PriorityQueue 基于堆结构实现，可以用它来实现优先队列。</li>
<li>LinkedList 也可以实现双向队列。</li>
</ul>
</li>
</ul>
<h2 id="_2-6" tabindex="-1">2-6 <a class="header-anchor" href="#_2-6" aria-label="Permalink to &quot;2-6&quot;"></a></h2>
<h3 id="所有的-final-修饰的字段都是编译期常量吗" tabindex="-1">所有的 final 修饰的字段都是编译期常量吗? <a class="header-anchor" href="#所有的-final-修饰的字段都是编译期常量吗" aria-label="Permalink to &quot;所有的 final 修饰的字段都是编译期常量吗?&quot;"></a></h3>
<p>不是，final 修饰的字段，如果是基本数据类型或者是不可变对象，那么它是编译期常量，否则不是。</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> FinalTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 编译期常量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">nextInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 运行期常量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 编译期常量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">nextInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 运行期常量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> String e </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "hello"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 运行期常量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> String f </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"hello"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 运行期常量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="_2-5" tabindex="-1">2-5 <a class="header-anchor" href="#_2-5" aria-label="Permalink to &quot;2-5&quot;"></a></h2>
<h3 id="什么是重复注解" tabindex="-1">什么是重复注解？ <a class="header-anchor" href="#什么是重复注解" aria-label="Permalink to &quot;什么是重复注解？&quot;"></a></h3>
<p>重复注解指允许在同一申明类型(类，属性，或方法)的多次使用同一个注解。</p>
<p>在 JAVA 之前，对于重复注解的解决方案如下，不是很友好：</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> Authority</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">     String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">role</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> Authorities</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    Authority</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> RepeatAnnotationUseOldVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Authorities</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Authority</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">role</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"Admin"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">),@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Authority</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">role</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"Manager"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> doSomeThing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>JAVA 8 之后：</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Repeatable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(Authorities.class)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> Authority</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">role</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> Authorities</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Authority</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> RepeatAnnotationUseNewVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Authority</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">role</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"Admin"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Authority</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">role</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"Manager"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> doSomeThing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(){ }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="_2-4" tabindex="-1">2-4 <a class="header-anchor" href="#_2-4" aria-label="Permalink to &quot;2-4&quot;"></a></h2>
<h3 id="什么是类型注解" tabindex="-1">什么是类型注解？ <a class="header-anchor" href="#什么是类型注解" aria-label="Permalink to &quot;什么是类型注解？&quot;"></a></h3>
<p>注解类型被用来支持在 JAVA 程序中做强类型检查。配合插件式的 <code>check framework</code>，可以在编译时检测出 runtime error，以提高代码质量。</p>
<p>创建类实例：<code>new @Interned MyObject();</code></p>
<p>类型映射：<code>myString = (@NonNull String) str;</code></p>
<p>implements 语句中：<code>class UnmodifiableList&lt;T&gt; implements @Readonly List&lt;@Readonly T&gt; { … }</code></p>
<p>throw exception 声明：<code>void monitorTemperature() throws @Critical TemperatureException { … }</code></p>
<blockquote>
<p>类型注解只是语法而不是语义，并不会影响 java 的编译时间，加载时间，以及运行时间，也就是说，编译成 class 文件的时候并不包含类型注解。</p>
</blockquote>
<h2 id="_2-3" tabindex="-1">2-3 <a class="header-anchor" href="#_2-3" aria-label="Permalink to &quot;2-3&quot;"></a></h2>
<h3 id="optional-要解决什么问题" tabindex="-1">Optional 要解决什么问题？ <a class="header-anchor" href="#optional-要解决什么问题" aria-label="Permalink to &quot;Optional 要解决什么问题？&quot;"></a></h3>
<p>在调用一个方法得到了返回值却不能直接将返回值作为参数去调用别的方法，我们首先要判断这个返回值是否为 null，
只有在非空的前提下才能将其作为其他方法的参数。Java 8 引入了一个新的 Optional 类：这是一个可以为 null 的容器对象，
如果值存在则 <code>isPresent()</code> 方法会返回 true，调用 <code>get()</code> 方法会返回该对象。</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Optional.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Outer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(Outer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">getNested)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(Nested</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">getInner)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(Inner</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">getFoo)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">ifPresent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(System.out</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">println);</span></span></code></pre>
</div><p>还有一种实现相同作用的方式就是通过利用一个 supplier 函数来解决嵌套路径的问题:</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Outer obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Outer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> obj.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getNested</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getInner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getFoo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">ifPresent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(System.out</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">println);</span></span></code></pre>
</div><h2 id="_2-2" tabindex="-1">2-2 <a class="header-anchor" href="#_2-2" aria-label="Permalink to &quot;2-2&quot;"></a></h2>
<h3 id="什么是-functionalinterface" tabindex="-1">什么是 FunctionalInterface？ <a class="header-anchor" href="#什么是-functionalinterface" aria-label="Permalink to &quot;什么是 FunctionalInterface？&quot;"></a></h3>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Documented</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Retention</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(ElementType.TYPE)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> FunctionalInterface</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{}</span></span></code></pre>
</div><p>FunctionalInterface 函数式接口，是 JAVA 8 中一类特殊类型接口的称呼，这种类只包含一个抽象方法（除了隐含的 Object 对象的公共方法）</p>
<ul>
<li>只能有一个抽象方法。</li>
<li>可以有多个静态方法和默认方法。</li>
<li>默认包含 Object 类的方法。</li>
</ul>
<h2 id="_2-1" tabindex="-1">2-1 <a class="header-anchor" href="#_2-1" aria-label="Permalink to &quot;2-1&quot;"></a></h2>
<h3 id="类加载的生命周期" tabindex="-1">类加载的生命周期？ <a class="header-anchor" href="#类加载的生命周期" aria-label="Permalink to &quot;类加载的生命周期？&quot;"></a></h3>
<p>了加载的过程包括了 加载、验证。准备。解析、初始化五个阶段，
除了解析之外，其余阶段的顺序是确定的，解析阶段可以在初始化之后进行。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[每日一题 - 202403]]></title>
            <link>https://www.imufeng.cn/interview/question-by-day/2024/3.html</link>
            <guid>https://www.imufeng.cn/interview/question-by-day/2024/3.html</guid>
            <pubDate>Sat, 05 Oct 2024 12:44:16 GMT</pubDate>
            <description><![CDATA[每日一题 - 202403
 3-31
 获取 class 对象有哪些方式？
- 通过类名获取： `Class.forName("com.example.User")`
- 通过类对象获取： `Use]]></description>
            <content:encoded><![CDATA[<h1 id="每日一题-202403" tabindex="-1">每日一题 - 202403 <a class="header-anchor" href="#每日一题-202403" aria-label="Permalink to &quot;每日一题 - 202403&quot;"></a></h1>
<h2 id="_3-31" tabindex="-1">3-31 <a class="header-anchor" href="#_3-31" aria-label="Permalink to &quot;3-31&quot;"></a></h2>
<h3 id="获取-class-对象有哪些方式" tabindex="-1">获取 class 对象有哪些方式？ <a class="header-anchor" href="#获取-class-对象有哪些方式" aria-label="Permalink to &quot;获取 class 对象有哪些方式？&quot;"></a></h3>
<ul>
<li><strong>通过类名获取：</strong> <code>Class.forName(&quot;com.example.User&quot;)</code></li>
<li><strong>通过类对象获取：</strong> <code>User.class</code></li>
<li><strong>通过对象获取：</strong> <code>new User().getClass()</code></li>
<li><strong>通过类加载器获取：</strong> <code>ClassLoader.getSystemClassLoader().loadClass(&quot;com.example.User&quot;)</code></li>
</ul>
<h2 id="_3-30" tabindex="-1">3-30 <a class="header-anchor" href="#_3-30" aria-label="Permalink to &quot;3-30&quot;"></a></h2>
<h3 id="反射的应用场景有哪些" tabindex="-1">反射的应用场景有哪些？ <a class="header-anchor" href="#反射的应用场景有哪些" aria-label="Permalink to &quot;反射的应用场景有哪些？&quot;"></a></h3>
<ul>
<li><strong>动态代理：</strong> 反射可以在运行时动态创建代理类，实现动态代理。</li>
<li><strong>工厂模式：</strong> 反射可以通过类名动态创建对象，实现工厂模式。</li>
<li><strong>注解：</strong> 反射可以获取类、方法、字段等的注解信息，实现注解功能。</li>
<li><strong>框架：</strong> 反射可以实现框架的灵活性，如 Spring 框架的依赖注入。</li>
</ul>
<h2 id="_3-29" tabindex="-1">3-29 <a class="header-anchor" href="#_3-29" aria-label="Permalink to &quot;3-29&quot;"></a></h2>
<h3 id="什么是通配符" tabindex="-1">什么是通配符？ <a class="header-anchor" href="#什么是通配符" aria-label="Permalink to &quot;什么是通配符？&quot;"></a></h3>
<p>泛型类型是固定的，在某些场景下的使用不够灵活，所以引入了通配符 <code>?</code>，通配符可以用来表示未知类型。</p>
<p>如 <code>List&lt;?&gt;</code> 表示未知类型的 List 集合，<code>? extends T</code> 表示类型的上界，<code>? super T</code> 表示类型的下界。</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 通配符</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(List</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;?></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> list) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (Object o </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> list) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(o);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 上界通配符</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(List</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> extends Number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> list) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (Number n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> list) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(n);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 下界通配符</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(List</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> list) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (Object o </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> list) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(o);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="_3-28" tabindex="-1">3-28 <a class="header-anchor" href="#_3-28" aria-label="Permalink to &quot;3-28&quot;"></a></h2>
<h3 id="什么是泛型擦除机制" tabindex="-1">什么是泛型擦除机制？ <a class="header-anchor" href="#什么是泛型擦除机制" aria-label="Permalink to &quot;什么是泛型擦除机制？&quot;"></a></h3>
<p>Java的泛型是伪泛型，因为在编译期间会擦除所有泛型信息，即泛型擦除。</p>
<p>编译期间会动态地将泛型 <code>T</code> 擦除为 <code>Object</code> 或将 <code>T extends xxx</code> 擦除为限定类型 <code>xxx</code>。</p>
<p>引入泛型是为了增强代码的可读性以及稳定性，但为了保证引入泛型机制但不创建新的类型，减少虚拟机的开销，所以在编译期间会将泛型擦除。</p>
<h2 id="_3-27" tabindex="-1">3-27 <a class="header-anchor" href="#_3-27" aria-label="Permalink to &quot;3-27&quot;"></a></h2>
<h3 id="泛型的使用方式有哪些" tabindex="-1">泛型的使用方式有哪些？ <a class="header-anchor" href="#泛型的使用方式有哪些" aria-label="Permalink to &quot;泛型的使用方式有哪些？&quot;"></a></h3>
<h4 id="_1、泛型类" tabindex="-1">1、泛型类 <a class="header-anchor" href="#_1、泛型类" aria-label="Permalink to &quot;1、泛型类&quot;"></a></h4>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// HTTP 请求响应类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> CommonResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 状态码</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> code;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 消息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> String message;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> T data;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // getter 泛型方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> T </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> data;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // setter</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>如上方实例，HTTP请求的数据响应类型并不能在编写代码时确定，所以使用泛型类来定义。</p>
<h4 id="_2、泛型方法" tabindex="-1">2、泛型方法 <a class="header-anchor" href="#_2、泛型方法" aria-label="Permalink to &quot;2、泛型方法&quot;"></a></h4>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 泛型方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> &#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> T </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(T t) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> t;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>泛型方法可以在方法调用时指定具体的类型，上方泛型类实例中，data 属性的 getter 方法即为泛型方法。</p>
<h4 id="_3、泛型接口" tabindex="-1">3、泛型接口 <a class="header-anchor" href="#_3、泛型接口" aria-label="Permalink to &quot;3、泛型接口&quot;"></a></h4>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 泛型接口</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Generator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    T </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 实现泛型接口，指定类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> IntegerGenerator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Generator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Integer </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 实现泛型接口，不指定类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> GeneratorImpl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Generator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> T </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "Hello"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="_3-26" tabindex="-1">3-26 <a class="header-anchor" href="#_3-26" aria-label="Permalink to &quot;3-26&quot;"></a></h2>
<h3 id="什么是-aio" tabindex="-1">什么是 AIO？ <a class="header-anchor" href="#什么是-aio" aria-label="Permalink to &quot;什么是 AIO？&quot;"></a></h3>
<p>AIO（Asynchronous IO）异步 IO 模型是 JDK7 引入的异步非阻塞 IO。服务器实现模式为一个有效请求对应一个线程，
客户端的 IO 请求都是由操作系统先完成 IO 操作后再通知服务器应用来直接使用准备好的数据。 适用连接数目多且连接时间长的场景。</p>
<h2 id="_3-25" tabindex="-1">3-25 <a class="header-anchor" href="#_3-25" aria-label="Permalink to &quot;3-25&quot;"></a></h2>
<h3 id="什么是-nio" tabindex="-1">什么是 NIO？ <a class="header-anchor" href="#什么是-nio" aria-label="Permalink to &quot;什么是 NIO？&quot;"></a></h3>
<p>NIO（Non-blocking IO）非阻塞 IO 是一种半同步、半异步的IO模型，在进行IO操作时，程序不会被完全阻塞，但是仍然需要主动轮询IO状态。</p>
<p>在 NIO 中，可以使用选择器（Selector）来管理多个通道（Channel），以达到同时处理多个 IO 操作的目的。</p>
<h2 id="_3-24" tabindex="-1">3-24 <a class="header-anchor" href="#_3-24" aria-label="Permalink to &quot;3-24&quot;"></a></h2>
<h3 id="什么是-bio" tabindex="-1">什么是 BIO？ <a class="header-anchor" href="#什么是-bio" aria-label="Permalink to &quot;什么是 BIO？&quot;"></a></h3>
<p>BIO（Blocking IO）阻塞IO是一种同步的 IO 模型，当一个线程从流中读取或写入数据时，它会一直阻塞直到数据完全被读取或写入。
在 BIO 中，每个 I/O 操作都会阻塞当前线程，直到数据准备好或者操作完成。</p>
<h2 id="_3-23" tabindex="-1">3-23 <a class="header-anchor" href="#_3-23" aria-label="Permalink to &quot;3-23&quot;"></a></h2>
<h3 id="java-中有哪些流" tabindex="-1">JAVA 中有哪些流？ <a class="header-anchor" href="#java-中有哪些流" aria-label="Permalink to &quot;JAVA 中有哪些流？&quot;"></a></h3>
<ul>
<li><strong>IO 流</strong> 数据传输的抽象，对文件中内容进行读写操作。包括输入和输出流，又根据传输数据类型分为字节流、字符流。</li>
<li><strong>Stream 流</strong> JAVA 8 新特性，基于函数式编程操作处理数据，元素流在管道中经过中间操作（intermediate operation）的处理，
最后由最终操作(terminal operation)得到前面处理的结果。</li>
</ul>
<h2 id="_3-22" tabindex="-1">3-22 <a class="header-anchor" href="#_3-22" aria-label="Permalink to &quot;3-22&quot;"></a></h2>
<h3 id="什么是建造者模式" tabindex="-1">什么是建造者模式? <a class="header-anchor" href="#什么是建造者模式" aria-label="Permalink to &quot;什么是建造者模式?&quot;"></a></h3>
<p>建造者模式是将一个复杂的对象的构建与它的表示分离，使得同样的构建过程可以创建不同的方式进行创建。 工厂类模式是提供的是创建单个类的产品，
而建造者模式则是将各种产品集中起来进行管理，用来具有不同的属性的产品</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 产品</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Product</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> String partA;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> String partB;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> String partC;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> setPartA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">partA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.partA </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> partA;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> setPartB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">partB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.partB </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> partB;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> setPartC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">partC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.partC </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> partC;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> show</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(partA </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> partB </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> partC);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 抽象建造者</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> buildPartA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> buildPartB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> buildPartC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> abstract</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Product </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 具体建造者</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ConcreteBuilder</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Product product </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Product</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> buildPartA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        product.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">setPartA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"A"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> buildPartB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        product.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">setPartB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"B"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> buildPartC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        product.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">setPartC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"C"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Product </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> product;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 指挥者</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Director</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Builder builder;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Director</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(Builder </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.builder </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> builder;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Product </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">construct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        builder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">buildPartA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        builder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">buildPartB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        builder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">buildPartC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> builder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 测试</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        Builder builder </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ConcreteBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        Director director </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Director</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(builder);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        Product product </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> director.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">construct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        product.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">show</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="_3-22-1" tabindex="-1">3-22 <a class="header-anchor" href="#_3-22-1" aria-label="Permalink to &quot;3-22&quot;"></a></h2>
<h3 id="什么是动态代理" tabindex="-1">什么是动态代理？ <a class="header-anchor" href="#什么是动态代理" aria-label="Permalink to &quot;什么是动态代理？&quot;"></a></h3>
<p>动态代理是指在运行时动态生成代理类，通过 Java 的反射机制动态生成代理类，然后在代理类中实现接口方法，实现对目标对象的代理访问。</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">//接口</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> UserDao</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> save</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">//接口实现类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> UserDaoImpl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> UserDao</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> save</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"保存数据方法"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 每次生成动态代理类对象时,实现了InvocationHandler接口的调用处理器对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> InvocationHandlerImpl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> InvocationHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 这其实业务实现类对象，用来调用具体的业务方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Object target;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 通过构造函数传入目标对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> InvocationHandlerImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(Object </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> target;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    //动态代理实际运行的代理方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Object </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">invoke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(Object </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, Method </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">method</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Throwable {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"调用开始处理"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        //下面invoke()方法是以反射的方式来创建对象，第一个参数是要创建的对象，第二个是构成方法的参数，由第二个参数来决定创建对象使用哪个构造方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        Object result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> method.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">invoke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(target, args);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"调用结束处理"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">//测试</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        // 被代理对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        UserDao userDaoImpl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> UserDaoImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        InvocationHandlerImpl invocationHandlerImpl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> InvocationHandlerImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(userDaoImpl);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        //类加载器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        ClassLoader loader </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> userDaoImpl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getClassLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        Class&#x3C;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>[] interfaces </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> userDaoImpl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getInterfaces</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        // 主要装载器、一组接口及调用处理动态代理实例</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        UserDao newProxyInstance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (UserDao) Proxy.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">newProxyInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(loader, interfaces, invocationHandlerImpl);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        newProxyInstance.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">save</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="_3-21" tabindex="-1">3-21 <a class="header-anchor" href="#_3-21" aria-label="Permalink to &quot;3-21&quot;"></a></h2>
<h3 id="什么是静态代理" tabindex="-1">什么是静态代理？ <a class="header-anchor" href="#什么是静态代理" aria-label="Permalink to &quot;什么是静态代理？&quot;"></a></h3>
<p>静态代理是指在编译时就已经确定代理的对象，通过在代码中显式定义一个代理类，代理类通过实现与目标对象相同的接口
然后在代理类中维护一个目标对象，通过构造方法或者其他方式传入目标对象，同时在代理类中实现接口方法，实现对目标对象的代理访问。</p>
<p>示例：</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 接口</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ISubject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 目标对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> RealSubject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ISubject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"RealSubject request"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 代理对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ProxySubject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ISubject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ISubject realSubject;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ProxySubject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(ISubject </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">realSubject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.realSubject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> realSubject;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"ProxySubject before request"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        realSubject.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"ProxySubject after request"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 测试</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        ISubject realSubject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> RealSubject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        ISubject proxySubject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ProxySubject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(realSubject);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        proxySubject.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="_3-20" tabindex="-1">3-20 <a class="header-anchor" href="#_3-20" aria-label="Permalink to &quot;3-20&quot;"></a></h2>
<h3 id="代理模式的分类" tabindex="-1">代理模式的分类？ <a class="header-anchor" href="#代理模式的分类" aria-label="Permalink to &quot;代理模式的分类？&quot;"></a></h3>
<p><strong>静态代理：</strong> 简单代理模式，是动态代理的理论基础。常见使用在代理模式
<strong>jdk动态代理：</strong> 使用反射完成代理。需要有顶层接口才能使用，常见是mybatis的mapper文件是代理。
<strong>cglib：</strong> 第三方动态代理，使用反射完成代理，可以直接代理类（jdk动态代理不行），使用字节码技术，不能对 final类进行继承。</p>
<h2 id="_3-19" tabindex="-1">3-19 <a class="header-anchor" href="#_3-19" aria-label="Permalink to &quot;3-19&quot;"></a></h2>
<h3 id="什么是代理模式" tabindex="-1">什么是代理模式？ <a class="header-anchor" href="#什么是代理模式" aria-label="Permalink to &quot;什么是代理模式？&quot;"></a></h3>
<p>通过代理控制对象的访问，可以在这个对象调用方法之前、调用方法之后去处理/添加新的功能。(也就是AOP的微实现)</p>
<p>代理在原有代码乃至原业务流程都不修改的情况下，直接在业务流程中切入新代码，增加新功能，这也和 Spring 的（面向切面编程）很相似</p>
<h2 id="_3-18" tabindex="-1">3-18 <a class="header-anchor" href="#_3-18" aria-label="Permalink to &quot;3-18&quot;"></a></h2>
<h3 id="什么是工厂模式" tabindex="-1">什么是工厂模式？ <a class="header-anchor" href="#什么是工厂模式" aria-label="Permalink to &quot;什么是工厂模式？&quot;"></a></h3>
<p>定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。
工厂模式提供了一种创建对象的最佳方式。在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。
实现了创建者和调用者分离，工厂模式分为简单工厂、工厂方法、抽象工厂模式。</p>
<h2 id="_3-17" tabindex="-1">3-17 <a class="header-anchor" href="#_3-17" aria-label="Permalink to &quot;3-17&quot;"></a></h2>
<h3 id="单例模式有哪些创建方式" tabindex="-1">单例模式有哪些创建方式？ <a class="header-anchor" href="#单例模式有哪些创建方式" aria-label="Permalink to &quot;单例模式有哪些创建方式？&quot;"></a></h3>
<ul>
<li><strong>饿汉式:</strong> 类初始化时,会立即加载该对象，线程天生安全,调用效率高。</li>
<li><strong>懒汉式:</strong>  类初始化时,不会初始化该对象,真正需要使用的时候才会创建该对象,具备懒加载功能。</li>
<li><strong>静态内部方式:</strong> 结合了懒汉式和饿汉式各自的优点，真正需要对象的时候才会加载，加载类是线程安全的。</li>
<li><strong>枚举单例:</strong>  使用枚举实现单例模式 优点:实现简单、调用效率高，枚举本身就是单例，由jvm从根本上提供保障!避免通过反射和反序列化的漏洞， 缺点没有延迟加载。</li>
</ul>
<h2 id="_3-16" tabindex="-1">3-16 <a class="header-anchor" href="#_3-16" aria-label="Permalink to &quot;3-16&quot;"></a></h2>
<h3 id="什么是合成复用原则" tabindex="-1">什么是合成复用原则？ <a class="header-anchor" href="#什么是合成复用原则" aria-label="Permalink to &quot;什么是合成复用原则？&quot;"></a></h3>
<ul>
<li><strong>原则思想：</strong>  它要求在软件复用时，要尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现。</li>
<li><strong>描述：</strong> 合成复用原则是通过将已有的对象纳入新对象中，作为新对象的成员对象来实现的，新对象可以调用已有对象的功能，从而达到复用。</li>
<li><strong>优点：</strong> 它维持了类的封装性，新旧类之间的耦合度低，复用的灵活性高。</li>
</ul>
<h2 id="_3-15" tabindex="-1">3-15 <a class="header-anchor" href="#_3-15" aria-label="Permalink to &quot;3-15&quot;"></a></h2>
<h3 id="什么是迪米特法则" tabindex="-1">什么是迪米特法则？ <a class="header-anchor" href="#什么是迪米特法则" aria-label="Permalink to &quot;什么是迪米特法则？&quot;"></a></h3>
<blockquote>
<p>迪米特法则又称最少知识原则。</p>
</blockquote>
<ul>
<li><strong>原则思想：</strong> 一个对象应该对其他对象保持最少的了解。</li>
<li><strong>描述：</strong> 一个对象应该对其他对象保持最少的了解，即一个类对自己依赖的类知道的越少越好。也就是说，对于被依赖的类不管多么复杂，都应该将逻辑封装在类的内部，对外提供的方法越少越好。</li>
<li><strong>优点：</strong> 迪米特法则可以减少类间的耦合性，提高系统的稳定性，提高代码的可读性和可维护性。</li>
</ul>
<h2 id="_3-14" tabindex="-1">3-14 <a class="header-anchor" href="#_3-14" aria-label="Permalink to &quot;3-14&quot;"></a></h2>
<h3 id="什么是接口隔离原则" tabindex="-1">什么是接口隔离原则？ <a class="header-anchor" href="#什么是接口隔离原则" aria-label="Permalink to &quot;什么是接口隔离原则？&quot;"></a></h3>
<ul>
<li><strong>原则思想：</strong> 使用多个专门的接口，而不使用单一的总接口。</li>
<li><strong>描述：</strong> 接口隔离原则是指客户端不应该依赖它不需要的接口，即一个类对另一个类的依赖应该建立在最小的接口上。</li>
<li><strong>优点：</strong> 接口隔离原则可以减少类间的耦合性，提高系统的稳定性，提高代码的可读性和可维护性。</li>
</ul>
<h2 id="_3-13" tabindex="-1">3-13 <a class="header-anchor" href="#_3-13" aria-label="Permalink to &quot;3-13&quot;"></a></h2>
<h3 id="什么是依赖倒置原则" tabindex="-1">什么是依赖倒置原则？ <a class="header-anchor" href="#什么是依赖倒置原则" aria-label="Permalink to &quot;什么是依赖倒置原则？&quot;"></a></h3>
<ul>
<li><strong>原则思想：</strong> 面向接口编程，依赖于抽象而不依赖于具体。</li>
<li><strong>描述：</strong> 依赖倒置原则是指在设计软件结构时，高层模块不应该依赖于底层模块，二者都应该依赖于抽象。抽象不应该依赖于细节，细节应该依赖于抽象。</li>
<li><strong>优点：</strong> 依赖倒置原则可以减少类间的耦合性，提高系统的稳定性，提高代码的可读性和可维护性。</li>
</ul>
<h2 id="_3-12" tabindex="-1">3-12 <a class="header-anchor" href="#_3-12" aria-label="Permalink to &quot;3-12&quot;"></a></h2>
<h3 id="什么是里氏替换原则" tabindex="-1">什么是里氏替换原则？ <a class="header-anchor" href="#什么是里氏替换原则" aria-label="Permalink to &quot;什么是里氏替换原则？&quot;"></a></h3>
<ul>
<li><strong>原则思想：</strong> 使用的基类可以在任何地方使用继承的子类，完美的替换基类。</li>
<li><strong>描述：</strong> 子类可以扩展父类的功能，但不能改变父类原有的功能。子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法，子类中可以增加自己特有的方法。</li>
<li><strong>优点：</strong> 增加程序的健壮性，即使增加了子类，原有的子类还可以继续运行，互不影响。</li>
</ul>
<h2 id="_3-11" tabindex="-1">3-11 <a class="header-anchor" href="#_3-11" aria-label="Permalink to &quot;3-11&quot;"></a></h2>
<h3 id="什么是开放封闭原则" tabindex="-1">什么是开放封闭原则？ <a class="header-anchor" href="#什么是开放封闭原则" aria-label="Permalink to &quot;什么是开放封闭原则？&quot;"></a></h3>
<ul>
<li><strong>思想：</strong> 尽量通过扩展软件实体来解决需求变化，而不是通过修改已有的代码来完成变化</li>
<li><strong>描述：</strong> 一个软件产品在生命周期内，都会发生变化，既然变化是一个既定的事实，我们就应该在设计的时候尽量适应这些变化，以提高项目的稳定性和灵活性。</li>
<li><strong>优点：</strong> 单一原则告诉我们，每个类都有自己负责的职责，里氏替换原则不能破坏继承关系的体系。</li>
</ul>
<h2 id="_3-10" tabindex="-1">3-10 <a class="header-anchor" href="#_3-10" aria-label="Permalink to &quot;3-10&quot;"></a></h2>
<h3 id="设计模式的六大原则" tabindex="-1">设计模式的六大原则？ <a class="header-anchor" href="#设计模式的六大原则" aria-label="Permalink to &quot;设计模式的六大原则？&quot;"></a></h3>
<ol>
<li>开闭原则：对扩展开放，对修改关闭。</li>
<li>里氏替换原则：子类可以替换父类。</li>
<li>依赖倒置原则：面向接口编程，依赖于抽象而不依赖于具体。</li>
<li>接口隔离原则：使用多个专门的接口，而不使用单一的总接口。</li>
<li>迪米特法则：一个对象应该对其他对象保持最少的了解。</li>
<li>合成复用原则：尽量使用合成/聚合的方式，而不是使用继承。</li>
</ol>
<h2 id="_3-9" tabindex="-1">3-9 <a class="header-anchor" href="#_3-9" aria-label="Permalink to &quot;3-9&quot;"></a></h2>
<h3 id="设计模式有哪些" tabindex="-1">设计模式有哪些？ <a class="header-anchor" href="#设计模式有哪些" aria-label="Permalink to &quot;设计模式有哪些？&quot;"></a></h3>
<p>创建型模式，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。</p>
<p>结构型模式，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。</p>
<p>行为型模式，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</p>
<h2 id="_3-8" tabindex="-1">3-8 <a class="header-anchor" href="#_3-8" aria-label="Permalink to &quot;3-8&quot;"></a></h2>
<h3 id="设计模式有哪些类别" tabindex="-1">设计模式有哪些类别？ <a class="header-anchor" href="#设计模式有哪些类别" aria-label="Permalink to &quot;设计模式有哪些类别？&quot;"></a></h3>
<p>设计模式有 23 种，分为创建型模式、结构型模式和行为型模式。</p>
<h2 id="_3-7" tabindex="-1">3-7 <a class="header-anchor" href="#_3-7" aria-label="Permalink to &quot;3-7&quot;"></a></h2>
<h3 id="什么是设计模式" tabindex="-1">什么是设计模式? <a class="header-anchor" href="#什么是设计模式" aria-label="Permalink to &quot;什么是设计模式?&quot;"></a></h3>
<p>设计模式是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。</p>
<p>使用设计模式是为了可重用代码、让代码更容易被理解、保证代码的可靠性、程序的可维护性。</p>
<h2 id="_3-6" tabindex="-1">3-6 <a class="header-anchor" href="#_3-6" aria-label="Permalink to &quot;3-6&quot;"></a></h2>
<h3 id="mybatis-plus-有哪些主要的-api" tabindex="-1">Mybatis Plus 有哪些主要的 API？ <a class="header-anchor" href="#mybatis-plus-有哪些主要的-api" aria-label="Permalink to &quot;Mybatis Plus 有哪些主要的 API？&quot;"></a></h3>
<ul>
<li>Wrapper API：条件构造器，用于构造查询条件。包括 QueryWrapper、UpdateWrapper、LambdaQueryWrapper、LambdaUpdateWrapper。</li>
<li>Service API：Service 接口，用于定义 Service 层的接口。</li>
<li>Page API：分页插件，用于分页查询。</li>
<li>Entity API：实体类接口，用于定义实体类。</li>
</ul>
<h2 id="_3-5" tabindex="-1">3-5 <a class="header-anchor" href="#_3-5" aria-label="Permalink to &quot;3-5&quot;"></a></h2>
<h3 id="什么是-mybatis-plus" tabindex="-1">什么是 Mybatis Plus？ <a class="header-anchor" href="#什么是-mybatis-plus" aria-label="Permalink to &quot;什么是 Mybatis Plus？&quot;"></a></h3>
<p>Mybatis Plus 是 Mybatis 的增强工具包，它是在 Mybatis 的基础上进行了扩展，简化了 Mybatis 的开发，提供了很多实用的功能，
比如分页、逻辑删除、自动填充、性能分析等。</p>
<h2 id="_3-4" tabindex="-1">3-4 <a class="header-anchor" href="#_3-4" aria-label="Permalink to &quot;3-4&quot;"></a></h2>
<h3 id="mybatis-的接口绑定和实现方式" tabindex="-1">MyBatis 的接口绑定和实现方式 <a class="header-anchor" href="#mybatis-的接口绑定和实现方式" aria-label="Permalink to &quot;MyBatis 的接口绑定和实现方式&quot;"></a></h3>
<p>接口绑定是指在 Mybatis 中任意定义接口，然后把接口中的方法和 SQL 语句绑定，我们直接调用接口方法就可以，
这样比原来 SqlSession 提供的方法更加直观和简洁，也可以更加灵活。</p>
<p>实现方式如下：</p>
<ul>
<li>注解绑定，就是在接口的方法上加<code> @Select</code>，<code>@Update</code> 等注解。</li>
<li>XML 绑定，就是在 XML 文件中定义接口的方法和 SQL 语句的映射关系。</li>
</ul>
<h2 id="_3-3" tabindex="-1">3-3 <a class="header-anchor" href="#_3-3" aria-label="Permalink to &quot;3-3&quot;"></a></h2>
<h3 id="请描述-mybatis-的动态-sql。" tabindex="-1">请描述 Mybatis 的动态 SQL。 <a class="header-anchor" href="#请描述-mybatis-的动态-sql。" aria-label="Permalink to &quot;请描述 Mybatis 的动态 SQL。&quot;"></a></h3>
<p>Mybatis 的动态 SQL 是通过<code>标签来实现的，</code>标签可以根据条件来动态拼接 SQL 语句。</p>
<ul>
<li>if 标签：判断条件是否成立，成立则拼接 SQL 语句。</li>
<li>choose 标签：类似于 Java 中的 switch 语句，根据条件来选择拼接 SQL 语句。</li>
<li>when 标签：配合 choose 标签使用，表示条件成立时拼接 SQL 语句。</li>
<li>otherwise 标签：配合 choose 标签使用，表示条件不成立时拼接 SQL 语句。</li>
<li>trim 标签：去除 SQL 语句中的多余字符。</li>
<li>where 标签：配合 trim 标签使用，去除 SQL 语句中的多余字符。</li>
<li>set 标签：配合 trim 标签使用，去除 SQL 语句中的多余字符。</li>
<li>foreach 标签：遍历集合，拼接 SQL 语句。</li>
</ul>
<h2 id="_3-2" tabindex="-1">3-2 <a class="header-anchor" href="#_3-2" aria-label="Permalink to &quot;3-2&quot;"></a></h2>
<h3 id="请描述-mybatis-的缓存机制。" tabindex="-1">请描述 Mybatis 的缓存机制。 <a class="header-anchor" href="#请描述-mybatis-的缓存机制。" aria-label="Permalink to &quot;请描述 Mybatis 的缓存机制。&quot;"></a></h3>
<p>Mybatis 的缓存机制分为一级缓存和二级缓存。</p>
<p><strong>一级缓存</strong> 是 SqlSession 级别的缓存，当调用 SqlSession 的查询方法时，Mybatis 会将查询结果放入到缓存中，
当再次查询相同的数据时，直接从缓存中获取，不会再次查询数据库。</p>
<p><strong>二级缓存</strong> 是 Mapper 级别的缓存，多个 SqlSession 共享同一个 Mapper 的二级缓存，当调用 SqlSession 的查询方法时，
Mybatis 会将查询结果放入到缓存中，当再次查询相同的数据时，直接从缓存中获取，不会再次查询数据库。</p>
<h2 id="_3-1" tabindex="-1">3-1 <a class="header-anchor" href="#_3-1" aria-label="Permalink to &quot;3-1&quot;"></a></h2>
<h3 id="mybatis-实现一对一有几种方式" tabindex="-1">MyBatis 实现一对一有几种方式? <a class="header-anchor" href="#mybatis-实现一对一有几种方式" aria-label="Permalink to &quot;MyBatis 实现一对一有几种方式?&quot;"></a></h3>
<p>有联合查询和嵌套查询。</p>
<p><strong>联合查询</strong> 是几个表联合查询,只查询一次, 通过在resultMap里面配置association节点配置一对一的类就可以完成；</p>
<p><strong>嵌套查询</strong> 是先查一个表，根据这个表里面的结果的 外键 id，去再另外一个表里面查询数据,也是通过 association 配置，但另外一个表的查询通过 select 属性配置。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[每日一题 - 202404]]></title>
            <link>https://www.imufeng.cn/interview/question-by-day/2024/4.html</link>
            <guid>https://www.imufeng.cn/interview/question-by-day/2024/4.html</guid>
            <pubDate>Sat, 05 Oct 2024 12:44:16 GMT</pubDate>
            <description><![CDATA[每日一题 - 202404
 4-30
 如何理解 ES6 的 Reflect 对象？
Reflect 是一个内置的对象，它提供拦截 JavaScript 操作的方法。
与大多数全局对象不同 Refl]]></description>
            <content:encoded><![CDATA[<h1 id="每日一题-202404" tabindex="-1">每日一题 - 202404 <a class="header-anchor" href="#每日一题-202404" aria-label="Permalink to &quot;每日一题 - 202404&quot;"></a></h1>
<h2 id="_4-30" tabindex="-1">4-30 <a class="header-anchor" href="#_4-30" aria-label="Permalink to &quot;4-30&quot;"></a></h2>
<h3 id="如何理解-es6-的-reflect-对象" tabindex="-1">如何理解 ES6 的 Reflect 对象？ <a class="header-anchor" href="#如何理解-es6-的-reflect-对象" aria-label="Permalink to &quot;如何理解 ES6 的 Reflect 对象？&quot;"></a></h3>
<p>Reflect 是一个内置的对象，它提供拦截 JavaScript 操作的方法。</p>
<p>与大多数全局对象不同 Reflect 并非一个构造函数，所以不能通过 new 运算符对其进行调用，
或者将 Reflect 对象作为一个函数来调用。Reflect 的所有属性和方法都是静态的（就像 Math 对象）。</p>
<p>常用方法：</p>
<ul>
<li><code>Reflect.apply(target, thisArgument, argumentsList)</code>  调用函数，并传入一个数组作为参数</li>
<li><code>Reflect.get(target, propertyKey[, receiver])</code>   获得对象某个属性的值</li>
<li><code>Reflect.has(target, propertyKey)</code>    判断对象是否存在某个属性</li>
<li><code>Reflect.ownKeys(target);</code>    返回对象自身的属性</li>
<li><code>Reflect.set(target, propertyKey, value[, receiver])</code>    给对象添加一个属性。返回 boolean</li>
</ul>
<h2 id="_4-29" tabindex="-1">4-29 <a class="header-anchor" href="#_4-29" aria-label="Permalink to &quot;4-29&quot;"></a></h2>
<h3 id="如何理解-es6-的-proxy-对象" tabindex="-1">如何理解 ES6 的 Proxy 对象？ <a class="header-anchor" href="#如何理解-es6-的-proxy-对象" aria-label="Permalink to &quot;如何理解 ES6 的 Proxy 对象？&quot;"></a></h3>
<p>ES6 用于创建一个对象的代理，从而实现基本操作的拦截和自定义。 <code>const p = new Proxy(target, handler)</code>，
其中，target 表示需要包装的目标对象，可以是任意类型的对象。handler 通常为函数，用于定义代理对象 p 的行为。</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> handler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">obj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">prop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> prop </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> obj[prop] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 37</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({}, handler);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">p.a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">p.b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(p.a, p.b); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 1, undefined</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"c"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> p, p.c); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// false, 37</span></span></code></pre>
</div><h2 id="_4-28" tabindex="-1">4-28 <a class="header-anchor" href="#_4-28" aria-label="Permalink to &quot;4-28&quot;"></a></h2>
<h3 id="如何理解-es6-的-promise-对象" tabindex="-1">如何理解 ES6 的 Promise 对象？ <a class="header-anchor" href="#如何理解-es6-的-promise-对象" aria-label="Permalink to &quot;如何理解 ES6 的 Promise 对象？&quot;"></a></h3>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    doSomeThing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/*正常运行后。。。*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/*报错时。。。*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">finally</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/*结束时操作。。。*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">});</span></span></code></pre>
</div><p>Promise 是异步编程的一种解决方案，用于替代回调函数，更加强大和合理。</p>
<p>传统的回调函数在多个回调中，代码结构会嵌套多层，极大的增加的阅读难度。</p>
<p>Promise 对象通过链式操作降低了代码难度并极大的加强了代码的可读性。</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">doSomething</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> doSomethingElse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(result);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">newResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> doThirdThing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(newResult);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">finalResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'得到最终结果: '</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> finalResult);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(failureCallback);</span></span></code></pre>
</div><h2 id="_4-27" tabindex="-1">4-27 <a class="header-anchor" href="#_4-27" aria-label="Permalink to &quot;4-27&quot;"></a></h2>
<h3 id="什么是-spa" tabindex="-1">什么是 SPA？ <a class="header-anchor" href="#什么是-spa" aria-label="Permalink to &quot;什么是 SPA？&quot;"></a></h3>
<p>SPA 指 single-page application（单页面应用），通过动态重写当前页面 DOM 与用户进行交互，避免了页面之间切换打断用户体验。</p>
<h2 id="_4-26" tabindex="-1">4-26 <a class="header-anchor" href="#_4-26" aria-label="Permalink to &quot;4-26&quot;"></a></h2>
<h3 id="常用的跨域解决方案有哪些" tabindex="-1">常用的跨域解决方案有哪些 <a class="header-anchor" href="#常用的跨域解决方案有哪些" aria-label="Permalink to &quot;常用的跨域解决方案有哪些&quot;"></a></h3>
<h5 id="_1-cors" tabindex="-1">（1）CORS： <a class="header-anchor" href="#_1-cors" aria-label="Permalink to &quot;（1）CORS：&quot;"></a></h5>
<p>跨域资源共享（Cross-Origin Resource Sharing），是一种允许浏览器向跨域服务器发送 Ajax 请求的机制，支持现代浏览器，服务器端需要设置 Access-Control-Allow-Origin 头信息，指定允许的源或通配符，从而实现跨域请求。</p>
<h5 id="_2-代理" tabindex="-1">（2）代理： <a class="header-anchor" href="#_2-代理" aria-label="Permalink to &quot;（2）代理：&quot;"></a></h5>
<p>在同源页面内部发送 AJAX 请求到同域服务器，由服务器代理转发请求到跨域服务器，最后再将结果返回给同源页面。</p>
<h5 id="_3-websocket" tabindex="-1">（3）WebSocket： <a class="header-anchor" href="#_3-websocket" aria-label="Permalink to &quot;（3）WebSocket：&quot;"></a></h5>
<p>WebSocket 是一种 HTML5 协议，它使得浏览器和服务器之间可以建立持久化的连接，可以直接使用 Socket 进行通信，避免了浏览器的跨域限制。</p>
<h2 id="_4-25" tabindex="-1">4-25 <a class="header-anchor" href="#_4-25" aria-label="Permalink to &quot;4-25&quot;"></a></h2>
<h3 id="vue-中的-spa-引用如何优化首屏加载速度" tabindex="-1">vue 中的 spa 引用如何优化首屏加载速度 <a class="header-anchor" href="#vue-中的-spa-引用如何优化首屏加载速度" aria-label="Permalink to &quot;vue 中的 spa 引用如何优化首屏加载速度&quot;"></a></h3>
<ul>
<li>请求优化：<code>CDN</code> 将第三方的类库放到 CDN 上，能够大幅度减少生产环境中的项目体积，另外 CDN 能够实时地根据网络流量和各节点的连接、负载状况以及到用户的距离和响应时间等综合信息将用户的请求重新导向离用户最近的服务节点上。</li>
<li>缓存：将长时间不会改变的第三方类库或者静态资源设置为强缓存，将 max-age 设置为一个非常长的时间，再将访问路径加上哈希达到哈希值变了以后保证获取到最新资源，好的缓存策略有助于减轻服务器的压力，并且显著的提升用户的体验</li>
<li>gzip：开启 <code>gzip</code> 压缩，通常开启 gzip 压缩能够有效的缩小传输资源的大小。</li>
<li>http2：如果系统首屏同一时间需要加载的静态资源非常多，但是浏览器对同域名的<code>tcp</code>连接数量是有限制的(chrome 为 6 个)超过规定数量的 tcp 连接，则必须要等到之前的请求收到响应后才能继续发送，而 http2 则可以在多个 tcp 连接中并发多个请求没有限制，在一些网络较差的环境开启 http2 性能提升尤为明显。</li>
<li>懒加载：当 url 匹配到相应的路径时，通过<code>import</code>动态加载页面组件，这样首屏的代码量会大幅减少，webpack 会把动态加载的页面组件分离成单独的一个 chunk.js 文件</li>
<li>预渲染：由于浏览器在渲染出页面之前，需要先加载和解析相应的 html、css 和 js 文件，为此会有一段白屏的时间，可以添加loading，或者骨架屏幕尽可能的减少白屏对用户的影响体积优化</li>
<li>合理使用第三方库：对于一些第三方 ui 框架、类库，尽量使用按需加载，减少打包体积</li>
<li>使用可视化工具分析打包后的模块体积：webpack-bundle- analyzer 这个插件在每次打包后能够更加直观的分析打包后模块的体积，再对其中比较大的模块进行优化</li>
<li>提高代码使用率：利用代码分割，将脚本中无需立即调用的代码在代码构建时转变为异步加载的过程</li>
<li>封装：构建良好的项目架构，按照项目需求就行全局组件，插件，过滤器，指令，utils 等做一 些公共封装，可以有效减少我们的代码量，而且更容易维护资源优化</li>
<li>图片懒加载：使用图片懒加载可以优化同一时间减少 http 请求开销，避免显示图片导致的画面抖动，提高用户体验</li>
<li>使用 svg 图标：相对于用一张图片来表示图标，svg 拥有更好的图片质量，体积更小，并且不需要开启额外的 http 请求</li>
<li>压缩图片：可以使用 image-webpack-loader，在用户肉眼分辨不清的情况下一定程度上压缩图片</li>
</ul>
<h2 id="_4-24" tabindex="-1">4-24 <a class="header-anchor" href="#_4-24" aria-label="Permalink to &quot;4-24&quot;"></a></h2>
<h3 id="如何实现-vue-项目中的性能优化" tabindex="-1">如何实现 vue 项目中的性能优化 <a class="header-anchor" href="#如何实现-vue-项目中的性能优化" aria-label="Permalink to &quot;如何实现 vue 项目中的性能优化&quot;"></a></h3>
<h5 id="_1-编码阶段" tabindex="-1">（1）编码阶段 <a class="header-anchor" href="#_1-编码阶段" aria-label="Permalink to &quot;（1）编码阶段&quot;"></a></h5>
<ul>
<li>尽量减少 <em>data</em> 中的数据，<em>data</em> 中的数据都会增加 <em>getter</em> 和 <em>setter</em>，会收集对应的 <em>watcher</em></li>
<li><em>v-if</em> 和 <em>v-for</em> 不能连用</li>
<li>如果需要使用 <em>v-for</em> 给每项元素绑定事件时使用事件代理</li>
<li><em>SPA</em> 页面采用 <em>keep-alive</em> 缓存组件</li>
<li>在更多的情况下，使用 <em>v-if</em> 替代 <em>v-show</em></li>
<li><em>key</em> 保证唯一</li>
<li>使用路由懒加载、异步组件</li>
<li>防抖、节流</li>
<li>第三方模块按需导入</li>
<li>长列表滚动到可视区域动态加载</li>
<li>图片懒加载</li>
</ul>
<h5 id="_2-seo-优化" tabindex="-1">（2）*SEO* 优化 <a class="header-anchor" href="#_2-seo-优化" aria-label="Permalink to &quot;（2）*SEO\* 优化&quot;"></a></h5>
<ul>
<li>预渲染</li>
<li>服务端渲染 <em>SSR</em></li>
</ul>
<h5 id="_3-打包优化" tabindex="-1">（3）打包优化 <a class="header-anchor" href="#_3-打包优化" aria-label="Permalink to &quot;（3）打包优化&quot;"></a></h5>
<ul>
<li>压缩代码</li>
<li><em>Tree Shaking/Scope Hoisting</em></li>
<li>使用 <em>cdn</em> 加载第三方模块</li>
<li>多线程打包 <em>happypack</em></li>
<li><em>splitChunks</em> 抽离公共文件</li>
<li><em>sourceMap</em> 优化</li>
</ul>
<h5 id="_4-用户体验" tabindex="-1">（4）用户体验 <a class="header-anchor" href="#_4-用户体验" aria-label="Permalink to &quot;（4）用户体验&quot;"></a></h5>
<ul>
<li>骨架屏</li>
<li><em>PWA</em></li>
</ul>
<p>还可以使用缓存(客户端缓存、服务端缓存)优化、服务端开启 gzip 压缩等。</p>
<h2 id="_4-23" tabindex="-1">4-23 <a class="header-anchor" href="#_4-23" aria-label="Permalink to &quot;4-23&quot;"></a></h2>
<h3 id="vue-修饰符" tabindex="-1">vue 修饰符 <a class="header-anchor" href="#vue-修饰符" aria-label="Permalink to &quot;vue 修饰符&quot;"></a></h3>
<h4 id="_1-事件修饰符" tabindex="-1">（1）事件修饰符 <a class="header-anchor" href="#_1-事件修饰符" aria-label="Permalink to &quot;（1）事件修饰符&quot;"></a></h4>
<p>在事件处理程序中调用 <em>event.preventDefault</em> 或 <em>event.stopPropagation</em> 方法是非常常见的需求。尽管可以在 <em>methods</em> 中轻松实现这点，但更好的方式是：<em>methods</em> 只有纯粹的数据逻辑，而不是去处理 <em>DOM</em> 事件细节。</p>
<p>常见的事件修饰符如下：</p>
<ul>
<li><em>.stop</em>：阻止冒泡。</li>
<li><em>.prevent</em>：阻止默认事件。</li>
<li><em>.capture</em>：使用事件捕获模式。</li>
<li><em>.self</em>：只在当前元素本身触发。</li>
<li><em>.once</em>：只触发一次。</li>
<li><em>.passive</em>：默认行为将会立即触发。</li>
</ul>
<h4 id="_2-按键修饰符" tabindex="-1">（2）按键修饰符 <a class="header-anchor" href="#_2-按键修饰符" aria-label="Permalink to &quot;（2）按键修饰符&quot;"></a></h4>
<p>在 <em>vue</em> 中还提供了有鼠标修饰符，键值修饰符，系统修饰符等功能。</p>
<ul>
<li>.<em>left</em>：左键</li>
<li>.<em>right</em>：右键</li>
<li>.<em>middle</em>：滚轮</li>
<li>.<em>enter</em>：回车</li>
<li>.<em>tab</em>：制表键</li>
<li>.<em>delete</em>：捕获 “删除” 和 “退格” 键</li>
<li>.<em>esc</em>：返回</li>
<li>.<em>space</em>：空格</li>
<li>.<em>up</em>：上</li>
<li>.<em>down</em>：下</li>
<li>.<em>left</em>：左</li>
<li>.<em>right</em>：右</li>
<li>.<em>ctrl</em>：<em>ctrl</em> 键</li>
<li>.<em>alt</em>：<em>alt</em> 键</li>
<li>.<em>shift</em>：<em>shift</em> 键</li>
<li>.<em>meta</em>：<em>meta</em> 键</li>
</ul>
<h4 id="_3-表单修饰符" tabindex="-1">（3）表单修饰符 <a class="header-anchor" href="#_3-表单修饰符" aria-label="Permalink to &quot;（3）表单修饰符&quot;"></a></h4>
<p>常见的有 <em>.lazy</em>、 <em>.number</em> 和 <em>.trim</em>。</p>
<ul>
<li>.<em>lazy</em>：在文本框失去焦点时才会渲染</li>
<li>.<em>number</em>：将文本框中所输入的内容转换为number类型</li>
<li>.<em>trim</em>：可以自动过滤输入首尾的空格</li>
</ul>
<h2 id="_4-22" tabindex="-1">4-22 <a class="header-anchor" href="#_4-22" aria-label="Permalink to &quot;4-22&quot;"></a></h2>
<h3 id="nexttick-的作用" tabindex="-1">nextTick 的作用 <a class="header-anchor" href="#nexttick-的作用" aria-label="Permalink to &quot;nextTick 的作用&quot;"></a></h3>
<p>在下次 DOM 更新循环结束之后执行延迟回调。nextTick主要使用了宏任务和微任务。根据执行环境分别尝试采用</p>
<p>Promise
MutationObserver
setImmediate
如果以上都不行则采用setTimeout</p>
<p>定义了一个异步方法，多次调用nextTick会将方法存入队列中，通过这个异步方法清空当前队列。</p>
<h2 id="_4-21" tabindex="-1">4-21 <a class="header-anchor" href="#_4-21" aria-label="Permalink to &quot;4-21&quot;"></a></h2>
<h3 id="v-if和v-show的区别" tabindex="-1">v-if和v-show的区别 <a class="header-anchor" href="#v-if和v-show的区别" aria-label="Permalink to &quot;v-if和v-show的区别&quot;"></a></h3>
<h4 id="_1-共同点" tabindex="-1">（1）共同点 <a class="header-anchor" href="#_1-共同点" aria-label="Permalink to &quot;（1）共同点&quot;"></a></h4>
<blockquote>
<p><code>v-show</code> 与 <code>v-if</code> 的作用效果是相同的(不含v-else)，都能控制元素在页面是否显示</p>
<p>用法上也是相同的：</p>
<ul>
<li>当表达式为<code>true</code>的时候，都会占据页面的位置</li>
<li>当表达式都为<code>false</code>时，都不会占据页面位置</li>
</ul>
</blockquote>
<h4 id="_2-不同点" tabindex="-1">（2）不同点 <a class="header-anchor" href="#_2-不同点" aria-label="Permalink to &quot;（2）不同点&quot;"></a></h4>
<blockquote>
<p><code>v-show</code>隐藏则是为该元素添加<code>css--display:none</code>，<code>dom</code>元素依旧还在。</p>
<p><code>v-if</code>显示隐藏是将<code>dom</code>元素整个添加或删除。</p>
<p><code>v-if</code>有更高的切换消耗；<code>v-show</code>有更高的初始渲染消耗；</p>
</blockquote>
<h2 id="_4-20" tabindex="-1">4-20 <a class="header-anchor" href="#_4-20" aria-label="Permalink to &quot;4-20&quot;"></a></h2>
<h3 id="vue组件的通信方式" tabindex="-1">vue组件的通信方式 <a class="header-anchor" href="#vue组件的通信方式" aria-label="Permalink to &quot;vue组件的通信方式&quot;"></a></h3>
<h4 id="_1-使用props-属性" tabindex="-1">（1）使用Props（属性）： <a class="header-anchor" href="#_1-使用props-属性" aria-label="Permalink to &quot;（1）使用Props（属性）：&quot;"></a></h4>
<ul>
<li>
<p>父组件可以通过在子组件上绑定属性（props）来向子组件传递数据。</p>
</li>
<li>
<p>子组件通过在模板中使用props来访问这些属性。</p>
</li>
<li>
<p>这是一种父向子组件传递数据的单向通信方式。</p>
<blockquote>
<p>父-&gt;子<code>props</code>，子-&gt;父 <code>$on、$emit</code></p>
<p>获取父子组件实例 <code>$parent、$children</code></p>
</blockquote>
</li>
</ul>
<h4 id="_2-使用自定义事件" tabindex="-1">（2）使用自定义事件： <a class="header-anchor" href="#_2-使用自定义事件" aria-label="Permalink to &quot;（2）使用自定义事件：&quot;"></a></h4>
<ul>
<li>子组件可以触发自定义事件，而父组件可以监听这些事件。</li>
<li>这允许子组件向父组件发送消息。</li>
<li>这是一种子向父组件传递数据的方式。</li>
</ul>
<h4 id="_3-使用-refs" tabindex="-1">（3）使用<code>$refs</code>： <a class="header-anchor" href="#_3-使用-refs" aria-label="Permalink to &quot;（3）使用`$refs`：&quot;"></a></h4>
<ul>
<li>父组件可以通过<code>ref</code>属性引用子组件，并直接访问子组件的属性和方法。</li>
<li>这是一种直接的通信方式，但通常不推荐在多个子组件之间使用。</li>
</ul>
<h4 id="_4-使用vuex-状态管理库" tabindex="-1">（4）使用Vuex（状态管理库）： <a class="header-anchor" href="#_4-使用vuex-状态管理库" aria-label="Permalink to &quot;（4）使用Vuex（状态管理库）：&quot;"></a></h4>
<ul>
<li>如果父子组件之间的通信较复杂，或者涉及多个组件，可以使用Vuex来实现全局状态管理。</li>
<li>Vuex允许不同组件共享数据，并通过触发和监听事件来进行通信。</li>
</ul>
<p>这些方法中的选择取决于您的具体需求和组件之间的关系。<code>在大多数情况下，使用Props和自定义事件是足够</code>的，但在更复杂的情况下，考虑使用Vuex或其他适当的通信模式。</p>
<h2 id="_4-19" tabindex="-1">4-19 <a class="header-anchor" href="#_4-19" aria-label="Permalink to &quot;4-19&quot;"></a></h2>
<h3 id="vue的响应式原理" tabindex="-1">vue的响应式原理 <a class="header-anchor" href="#vue的响应式原理" aria-label="Permalink to &quot;vue的响应式原理&quot;"></a></h3>
<p>Vue在初始化数据时，会遍历组件的data对象，并使用<code>Object.defineProperty</code>重新定义data中的所有属性，将其所有属性值转化为getter和setter的形式。当页面使用对应属性时，首先会进行依赖收集(收集当前组件的<code>watcher</code>)如果属性发生变化会通知相关依赖进行更新操作。</p>
<p>Vue3.x改用<code>Proxy</code>替代Object.defineProperty。因为Proxy可以直接监听对象和数组的变化，并且有多达13种拦截方法。并且作为新标准将受到浏览器厂商重点持续的性能优化。</p>
<blockquote>
<p>Proxy只会代理对象的第一层，Vue3是怎样处理的?</p>
<p>判断当前Reflect.get的返回值是否为Object，如果是则再通过<code>reactive</code>方法做代理， 这样就实现了深度观测。</p>
<p>监测数组的时候可能触发多次get/set，如何防止多次触发？</p>
<p>判断key是否为当前被代理对象target自身属性，也可以判断旧值与新值是否相等，只有满足以上两个条件之一时，才有可能执行trigger。</p>
</blockquote>
<h2 id="_4-18" tabindex="-1">4-18 <a class="header-anchor" href="#_4-18" aria-label="Permalink to &quot;4-18&quot;"></a></h2>
<h3 id="hashmap-和-hashtable-的区别" tabindex="-1">HashMap 和 Hashtable 的区别 <a class="header-anchor" href="#hashmap-和-hashtable-的区别" aria-label="Permalink to &quot;HashMap 和 Hashtable 的区别&quot;"></a></h3>
<ul>
<li>HashMap 是基于哈希表实现的，每一个元素是一个key-value对，其内部通过单链表解决冲突问题，容量不足（超过了阀值）时，同样会自动增长。</li>
<li>HashMap 是非线程安全的，只是用于单线程环境下，多线程环境下可以采用concurrent并发包下的concurrentHashMap。</li>
<li>HashMap 实现了Serializable接口，因此它支持序列化，实现了Cloneable接口，能被克隆。</li>
<li>HashMap 存数据的过程是：HashMap内部维护了一个存储数据的Entry数组，HashMap 采用链表解决冲突，每一个Entry本质上是一个单向链表。当准备添加一个key-value对时，首先通过hash(key)方法计算hash值，然后通过indexFor(hash,length)求该key-value对的存储位置，计算方法是先用hash&amp;0x7FFFFFFF后，再对length取模，这就保证每一个key-value对都能存入HashMap中，当计算出的位置相同时，由于存入位置是一个链表，则把这个key-value对插入链表头。</li>
<li>HashMap 中key和value都允许为null。key为null的键值对永远都放在以 <code>table[0]</code> 为头结点的链表中。</li>
</ul>
<h2 id="_4-17" tabindex="-1">4-17 <a class="header-anchor" href="#_4-17" aria-label="Permalink to &quot;4-17&quot;"></a></h2>
<h3 id="力扣题库-1410-html-实体解析器" tabindex="-1">力扣题库-1410 HTML 实体解析器 <a class="header-anchor" href="#力扣题库-1410-html-实体解析器" aria-label="Permalink to &quot;力扣题库-1410 HTML 实体解析器&quot;"></a></h3>
<p><a href="https://leetcode-cn.com/problems/html-entity-parser/" target="_blank" rel="noreferrer">原题链接 - HTML 实体解析器</a></p>
<p><strong>🔥 题目：</strong> 请实现一个 HTML 实体解析器，实体包括 <code>&amp;quot;</code>，<code>&amp;apos;</code>，<code>&amp;amp;</code>，<code>&amp;gt;</code>，<code>&amp;lt;</code> 和 <code>&amp;frasl;</code>。</p>
<h4 id="题解1" tabindex="-1">题解1 <a class="header-anchor" href="#题解1" aria-label="Permalink to &quot;题解1&quot;"></a></h4>
<blockquote>
<p>回家等通知写法</p>
</blockquote>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">entityParser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(String text) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> text.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"&#x26;quot;"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\"</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"&#x26;apos;"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"'"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"&#x26;amp;"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"&#x26;"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"&#x26;gt;"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">">"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"&#x26;lt;"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"&#x3C;"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"&#x26;frasl;"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"/"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h4 id="题解2" tabindex="-1">题解2 <a class="header-anchor" href="#题解2" aria-label="Permalink to &quot;题解2&quot;"></a></h4>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">entityParser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(String text) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    StringBuilder stringBuilder </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> StringBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> text.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">!</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"&#x26;"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(text.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">substring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(p, p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">))) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            stringBuilder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(text.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">charAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(p));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            continue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (text.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">>=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 6</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> &#x26;&#x26;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "&#x26;quot;"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(text.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">substring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(p, p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">))) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            stringBuilder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\"</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            continue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (text.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">>=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 6</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> &#x26;&#x26;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "&#x26;apos;"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(text.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">substring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(p, p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">))) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            stringBuilder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"'"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            continue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (text.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">>=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> &#x26;&#x26;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "&#x26;amp;"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(text.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">substring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(p, p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">))) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            stringBuilder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"&#x26;"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            continue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (text.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">>=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> &#x26;&#x26;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "&#x26;gt;"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(text.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">substring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(p, p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">))) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            stringBuilder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">">"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            continue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (text.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">>=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> &#x26;&#x26;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "&#x26;lt;"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(text.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">substring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(p, p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">))) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            stringBuilder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"&#x3C;"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            continue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (text.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">>=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 7</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> &#x26;&#x26;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "&#x26;frasl;"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(text.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">substring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(p, p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">))) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            stringBuilder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"/"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            continue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        stringBuilder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(text.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">charAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(p));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> stringBuilder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>🔥 <a href="https://leetcode.cn/problems/html-entity-parser/solutions/2744042/stringbuilder-jie-jue-by-06jdn7fykv-ycrz" target="_blank" rel="noreferrer">查看我的题解</a></p>
<h2 id="_4-16" tabindex="-1">4-16 <a class="header-anchor" href="#_4-16" aria-label="Permalink to &quot;4-16&quot;"></a></h2>
<h3 id="什么是单调栈" tabindex="-1">什么是单调栈？ <a class="header-anchor" href="#什么是单调栈" aria-label="Permalink to &quot;什么是单调栈？&quot;"></a></h3>
<p>单调栈是指栈中的元素是单调递增或者单调递减的栈。主要应用场景是解决 <code>Next Greater Element</code> 问题，即找到数组中每个元素的下一个更大的元素。</p>
<p>单调栈的实现方式是使用栈来存储元素的索引，当遍历到一个新元素时，如果栈为空，则将元素的索引入栈；如果栈不为空，则比较栈顶元素和新元素的大小，
如果新元素大于栈顶元素，则将栈顶元素出栈，并将新元素的索引入栈，直到新元素小于栈顶元素。</p>
<h2 id="_4-15" tabindex="-1">4-15 <a class="header-anchor" href="#_4-15" aria-label="Permalink to &quot;4-15&quot;"></a></h2>
<h3 id="力扣题库-121-买卖股票的最佳时机" tabindex="-1">力扣题库-121 买卖股票的最佳时机 <a class="header-anchor" href="#力扣题库-121-买卖股票的最佳时机" aria-label="Permalink to &quot;力扣题库-121 买卖股票的最佳时机&quot;"></a></h3>
<p><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/description/" target="_blank" rel="noreferrer">原题链接 - 买卖股票的最佳时机</a></p>
<p><strong>🔥 题目：</strong> 给定一个数组 <code>prices</code> ，它的第 <code>i</code> 个元素 <code>prices[i]</code> 表示一支给定股票第 <code>i</code> 天的价格。</p>
<p>如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。</p>
<h4 id="解法1-暴力法" tabindex="-1">解法1 暴力法 <a class="header-anchor" href="#解法1-暴力法" aria-label="Permalink to &quot;解法1 暴力法&quot;"></a></h4>
<p>这道题双重循环很快就可以解决，但是会超时：</p>
<blockquote>
<p>时间复杂度：<mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.832ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 2577.6 1083.9" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width: 3;"/></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width: 3;"/></g></g><g data-mml-node="mo" transform="translate(2188.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></math></mjx-assistive-mml></mjx-container></p>
<p>空间复杂度：<mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.618ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2041 1000" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(1152,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(1652,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></math></mjx-assistive-mml></mjx-container>。</p>
</blockquote>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> maxProfit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[] prices) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> prices.length; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> prices.length; j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (prices[j] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> prices[i] ) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">                if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (prices[j] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> prices[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> x) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                    x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> prices[j] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> prices[i];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> x;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h4 id="方法二-动态规划" tabindex="-1">方法二：动态规划 <a class="header-anchor" href="#方法二-动态规划" aria-label="Permalink to &quot;方法二：动态规划&quot;"></a></h4>
<p>在看完官方题解的思路之后，我自己写了一遍，如下：</p>
<blockquote>
<p>时间复杂度：<mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.844ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2141 1000" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(1752,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></math></mjx-assistive-mml></mjx-container></p>
<p>空间复杂度：<mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.618ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2041 1000" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(1152,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(1652,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></math></mjx-assistive-mml></mjx-container></p>
</blockquote>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> maxProfit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[] prices) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> min </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Integer.MAX_VALUE;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> max </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> prices) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> min) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            min </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> p;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> min </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> max) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            max </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> min;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> max;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="_4-14" tabindex="-1">4-14 <a class="header-anchor" href="#_4-14" aria-label="Permalink to &quot;4-14&quot;"></a></h2>
<h3 id="hashmap-get-方法的执行过程" tabindex="-1">HashMap get 方法的执行过程？ <a class="header-anchor" href="#hashmap-get-方法的执行过程" aria-label="Permalink to &quot;HashMap get 方法的执行过程？&quot;"></a></h3>
<ol>
<li>计算键的哈希值： 首先，HashMap 会通过键的 hashCode() 方法计算键的哈希值。哈希值是一个整数，用于确定键在 HashMap 中的位置。</li>
<li>确定存储位置： 使用哈希值确定键在 HashMap 的存储桶（buckets）中的位置。HashMap 通过对哈希值进行一些位运算，将其映射到存储桶的索引上。</li>
<li>检索键值对： 一旦确定了存储位置，HashMap 会检查该位置上是否存在一个或多个键值对。如果存在多个键值对，可能会使用链表或树等数据结构来存储这些键值对。</li>
<li>比较键： 如果在指定位置找到了键值对，HashMap 会比较目标键和存储的键是否相等。这里使用的是键的 equals() 方法来进行比较。</li>
<li>返回值： 如果找到了匹配的键，HashMap 会返回对应的值；否则，返回 null，表示未找到匹配的键。</li>
</ol>
<h2 id="_4-13" tabindex="-1">4-13 <a class="header-anchor" href="#_4-13" aria-label="Permalink to &quot;4-13&quot;"></a></h2>
<h3 id="hashmap-put-方法的执行过程" tabindex="-1">HashMap put 方法的执行过程？ <a class="header-anchor" href="#hashmap-put-方法的执行过程" aria-label="Permalink to &quot;HashMap put 方法的执行过程？&quot;"></a></h3>
<ol>
<li>计算 Key 的 Hash 值。</li>
<li>根据 Hash 值计算出 Key 在数组中的位置，通常是通过取模运算（hash % 数组长度）来确定位置。</li>
<li>如果该位置没有元素，直接插入。</li>
<li>如果该位置有元素，判断 Key 是否相等，如果相等则覆盖 Value，如果不相等则处理冲突。</li>
<li>通常使用链表或红黑树解决冲突，如果当前位置存在一个链表，则新插入的键值对会被插入到链表（或树）的尾部。</li>
<li>如果链表长度超过阈值（通常为 8），链表会转换为红黑树。</li>
<li>如果插入成功，返回 null，如果覆盖了 Value，则返回被覆盖的 Value。</li>
</ol>
<h2 id="_4-12" tabindex="-1">4-12 <a class="header-anchor" href="#_4-12" aria-label="Permalink to &quot;4-12&quot;"></a></h2>
<h3 id="什么是-cdn" tabindex="-1">什么是 CDN？ <a class="header-anchor" href="#什么是-cdn" aria-label="Permalink to &quot;什么是 CDN？&quot;"></a></h3>
<p>CDN（Content Delivery Network）即内容分发网络，是一种通过在网络中部署节点服务器，将内容缓存到离用户更近的位置，从而提高用户访问速度的技术。</p>
<p>CDN 的工作原理是将内容缓存到离用户更近的位置，当用户请求内容时，CDN 会根据用户的地理位置，选择离用户最近的节点服务器来提供内容，从而减少网络延迟，提高用户访问速度。</p>
<h2 id="_4-11" tabindex="-1">4-11 <a class="header-anchor" href="#_4-11" aria-label="Permalink to &quot;4-11&quot;"></a></h2>
<h3 id="力扣题库-27-移除元素" tabindex="-1">力扣题库-27 移除元素 <a class="header-anchor" href="#力扣题库-27-移除元素" aria-label="Permalink to &quot;力扣题库-27 移除元素&quot;"></a></h3>
<p><a href="https://leetcode-cn.com/problems/remove-element/description/" target="_blank" rel="noreferrer">原题链接 - 移除元素</a></p>
<p>给定一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</p>
<p>必须仅用 O(1) 额外空间并 原地 修改输入数组。</p>
<h4 id="题解" tabindex="-1">题解 <a class="header-anchor" href="#题解" aria-label="Permalink to &quot;题解&quot;"></a></h4>
<p>这道题目相对简单，题目摆明了使用双指针，轻松拿捏😂。</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> removeElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[] nums, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> val) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> p1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, p2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> nums.length;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (p1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> p2) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (nums[p1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> val) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            nums[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">p1] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> nums[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">p2];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> p1;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>在力扣查看我的<a href="https://leetcode.cn/problems/remove-element/solutions/2734707/problem-27-yi-chu-yuan-su-shuang-zhi-zhe-e1f0" target="_blank" rel="noreferrer">详细题解</a></p>
<h2 id="_4-10" tabindex="-1">4-10 <a class="header-anchor" href="#_4-10" aria-label="Permalink to &quot;4-10&quot;"></a></h2>
<h3 id="合并和变基有什么区别" tabindex="-1">合并和变基有什么区别？ <a class="header-anchor" href="#合并和变基有什么区别" aria-label="Permalink to &quot;合并和变基有什么区别？&quot;"></a></h3>
<p><strong>合并（merge）</strong> 和 <strong>变基（rebase）</strong> 的最终目的都是整合来自不同分支的修改。</p>
<p>合并是一种非破坏性的操作，它不会对现有分支中的提交进行修改，而是创建一个新的提交来整合不同分支的修改。</p>
<p>变基会为原始分支中的每个提交创建全新的提交来重写项目历史记录，能够让代码提交记录更加清晰明了。</p>
<p>参考地址：<a href="https://www.atlassian.com/zh/git/tutorials/merging-vs-rebasing" target="_blank" rel="noreferrer">Merging vs. rebasing</a></p>
<h2 id="_4-9" tabindex="-1">4-9 <a class="header-anchor" href="#_4-9" aria-label="Permalink to &quot;4-9&quot;"></a></h2>
<h3 id="力扣题库-1-两数之和" tabindex="-1">力扣题库-1 两数之和 <a class="header-anchor" href="#力扣题库-1-两数之和" aria-label="Permalink to &quot;力扣题库-1 两数之和&quot;"></a></h3>
<p><a href="https://leetcode-cn.com/problems/two-sum/description/" target="_blank" rel="noreferrer">原题链接 - 两数之和</a></p>
<p><strong>🔥 题目：</strong> 给定一个整数数组 <code>nums</code> 和一个整数 <code>target</code>，请你在该数组中找出和为 <code>target</code> 的两个整数，并返回它们的数组下标。</p>
<h4 id="题解1-暴力方法" tabindex="-1">题解1 暴力方法 <a class="header-anchor" href="#题解1-暴力方法" aria-label="Permalink to &quot;题解1 暴力方法&quot;"></a></h4>
<p>由于过于简单，所以不再赘述。</p>
<p>时间复杂度：<mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="6.606ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 2919.8 1083.9" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width: 3;"/></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(975.3,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width: 3;"/></g></g><g data-mml-node="mo" transform="translate(2530.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>O</mi><mo stretchy="false">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy="false">)</mo></math></mjx-assistive-mml></mjx-container> 其中 <mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.009ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 888 683" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>N</mi></math></mjx-assistive-mml></mjx-container> 是数组中的元素数量。最坏情况下数组中任意两个数都要被匹配一次。</p>
<p>空间复杂度：<mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.618ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2041 1000" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(1152,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(1652,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></math></mjx-assistive-mml></mjx-container>。</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">twoSum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[] nums, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> target) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> nums.length; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> i1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; i1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> nums.length; i1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">                if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> i1) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">                    continue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">                if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (nums[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> nums[i1] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> target) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">                    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[]{i, i1};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span></code></pre>
</div><h4 id="题解2-哈希表" tabindex="-1">题解2 哈希表 <a class="header-anchor" href="#题解2-哈希表" aria-label="Permalink to &quot;题解2 哈希表&quot;"></a></h4>
<p>对于哈希表的运用我还是不够熟练，这个题解是看完官方题解思路后完成的。</p>
<p>时间复杂度：<mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.495ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2429 1000" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(2040,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></math></mjx-assistive-mml></mjx-container> 。其中 <mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.009ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 888 683" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>N</mi></math></mjx-assistive-mml></mjx-container> 是数组中的元素数量。</p>
<p>空间复杂度：<mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.495ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2429 1000" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(2040,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></math></mjx-assistive-mml></mjx-container> 。其中 <mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.009ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 888 683" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>N</mi></math></mjx-assistive-mml></mjx-container> 是数组中的元素数量。</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">twoSum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[] nums, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> target) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        Map&#x3C;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">> map </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> HashMap&#x3C;>();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> nums.length; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> complement </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> nums[i];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (map.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">containsKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(complement)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">                return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[]{map.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(complement), i};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            map.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">put</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(nums[i], i);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span></code></pre>
</div><h2 id="_4-8" tabindex="-1">4-8 <a class="header-anchor" href="#_4-8" aria-label="Permalink to &quot;4-8&quot;"></a></h2>
<h3 id="为什么推荐使用-isempty-方法判空" tabindex="-1">为什么推荐使用 isEmpty() 方法判空？ <a class="header-anchor" href="#为什么推荐使用-isempty-方法判空" aria-label="Permalink to &quot;为什么推荐使用 isEmpty() 方法判空？&quot;"></a></h3>
<p>根据《阿里巴巴 Java 开发手册》：</p>
<blockquote>
<p>判断所有集合内部的元素是否为空，使用 isEmpty() 方法，而不是 size()==0 的方式。</p>
</blockquote>
<ul>
<li><code>isEmpty()</code> 方法可读性更好，更优雅，</li>
<li><code>isEmpty()</code> 方法的时间复杂度是 O(1)，而 <code>size()</code> 方法在有些集合中的时间复杂度不是 O(1)。</li>
</ul>
<h2 id="_4-7" tabindex="-1">4-7 <a class="header-anchor" href="#_4-7" aria-label="Permalink to &quot;4-7&quot;"></a></h2>
<h3 id="力扣题库-88-合并两个有序数组" tabindex="-1">力扣题库-88 合并两个有序数组 <a class="header-anchor" href="#力扣题库-88-合并两个有序数组" aria-label="Permalink to &quot;力扣题库-88 合并两个有序数组&quot;"></a></h3>
<p><a href="https://leetcode.cn/problems/merge-sorted-array/description/" target="_blank" rel="noreferrer">原题链接 - 合并两个有序数组</a></p>
<p><strong>🔥 题目：</strong> 给定两个 <strong>非递减顺序</strong> 排列的整数数组 <code>nums1</code> 和 <code>nums2</code>，以及其长度 <code>m</code>、<code>n</code>，需要将 <code>nums2</code> 合并到 <code>nums1</code> 中，使 <code>nums1</code> 成为一个有序数组。</p>
<h4 id="题解-1" tabindex="-1">题解 1 <a class="header-anchor" href="#题解-1" aria-label="Permalink to &quot;题解 1&quot;"></a></h4>
<p>如果不考虑时间及空间复杂度，可以直接将 <code>nums2</code> 数组拷贝到 <code>nums1</code> 数组后，再进行排序：</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> merge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[] nums1, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> m, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[] nums2, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> n) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">>=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">arraycopy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(nums2, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, nums1, m, n);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    Arrays.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">sort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(nums1);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h4 id="题解-2" tabindex="-1">题解 2 <a class="header-anchor" href="#题解-2" aria-label="Permalink to &quot;题解 2&quot;"></a></h4>
<p>基于<a href="https://leetcode.cn/problems/merge-sorted-array/solutions/666608/he-bing-liang-ge-you-xu-shu-zu-by-leetco-rrb0" target="_blank" rel="noreferrer">官方题解3</a>
双指针的结题思路，进行简单优化得出如下空间复杂度为 O(1) 的解法：</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Solution</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> merge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">nums1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70"> m</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">nums2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70"> n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        // 创建两个双指针指向各个数组的末尾</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> p1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, p2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (p1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">>=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> p2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">>=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">            // 如果一个数组遍历结束，则直接保留剩余元素即可。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (p2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (p1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                nums1[p2] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> nums2[p2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">                // 从后往前遍历，比较大小，将较大的元素放到 nums1 的末尾，并移动指正</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                nums1[p1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> p2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> nums1[p1] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> nums2[p2] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> nums1[p1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> nums2[p2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p><a href="https://leetcode.cn/problems/merge-sorted-array/solutions/2727444/ti-jie-3-jian-hua-ban-by-06jdn7fykv-p1z2" target="_blank" rel="noreferrer">💗 点击查看详细题解</a></p>
<h2 id="_4-6" tabindex="-1">4-6 <a class="header-anchor" href="#_4-6" aria-label="Permalink to &quot;4-6&quot;"></a></h2>
<h3 id="bigdecimal-类有哪些常见方法。" tabindex="-1"><code>BigDecimal</code> 类有哪些常见方法。 <a class="header-anchor" href="#bigdecimal-类有哪些常见方法。" aria-label="Permalink to &quot;`BigDecimal` 类有哪些常见方法。&quot;"></a></h3>
<ul>
<li><code>add(BigDecimal value)</code>：加法</li>
<li><code>subtract(BigDecimal value)</code>：减法</li>
<li><code>multiply(BigDecimal value)</code>：乘法</li>
<li><code>divide(BigDecimal value)</code>：除法</li>
<li><code>pow(int n)</code>：幂运算</li>
<li><code>abs()</code>：绝对值</li>
<li><code>negate()</code>：取反</li>
<li><code>setScale(int newScale, RoundingMode roundingMode)</code>：设置精度</li>
<li><code>compareTo(BigDecimal value)</code>：比较大小</li>
</ul>
<h2 id="_4-5" tabindex="-1">4-5 <a class="header-anchor" href="#_4-5" aria-label="Permalink to &quot;4-5&quot;"></a></h2>
<h3 id="什么是-bigdecimal-类" tabindex="-1">什么是 <code>BigDecimal</code> 类？ <a class="header-anchor" href="#什么是-bigdecimal-类" aria-label="Permalink to &quot;什么是 `BigDecimal` 类？&quot;"></a></h3>
<p>《阿里巴巴 Java 开发手册》中提到：“为了避免精度丢失，可以使用 BigDecimal 来进行浮点数的运算”。</p>
<p>这是由于计算机中，十进制小数无法精确表示，会存在类似于 <code>2.0f - 1.9f != 1.8f - 1.7f</code>的情况，所以在 JAVA 中提供了 <code>BigDecimal</code> 类来解决这个问题。</p>
<p><code>BigDecimal</code> 类是 JAVA 中用于精确计算浮点数的类，它提供了大量的方法用于精确计算浮点数，避免了浮点数计算时的精度丢失问题。</p>
<h2 id="_4-4" tabindex="-1">4-4 <a class="header-anchor" href="#_4-4" aria-label="Permalink to &quot;4-4&quot;"></a></h2>
<h3 id="java-如何做序列化" tabindex="-1">JAVA 如何做序列化？ <a class="header-anchor" href="#java-如何做序列化" aria-label="Permalink to &quot;JAVA 如何做序列化？&quot;"></a></h3>
<p>在 JAVA 中，如果要对一个对象进行序列化，需要实现 <code>java.io.Serializable</code> 接口，并且添加 <code>serialVersionUID</code> 字段。</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> java.io.Serial;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> java.io.Serializable;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> User</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Serializable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Serial</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"> // java14 引入的注解，表示该字段是序列化的一部分。详见 {java.io.Serial}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> serialVersionUID </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> String name;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> age;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> String address;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70"> age</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">address</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> name;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> age;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.address </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> address;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="_4-3" tabindex="-1">4-3 <a class="header-anchor" href="#_4-3" aria-label="Permalink to &quot;4-3&quot;"></a></h2>
<h3 id="什么是序列化和反序列化" tabindex="-1">什么是序列化和反序列化？ <a class="header-anchor" href="#什么是序列化和反序列化" aria-label="Permalink to &quot;什么是序列化和反序列化？&quot;"></a></h3>
<p>在 JAVA 中，如果需要将 JAVA 对象持久存储，或者在网络传输，就需要将对象转变为为字节流，这个过程就是序列化。</p>
<p>将在序列化过程中所生成的二进制字节流转换成数据结构或者对象的过程，就是反序列化。</p>
<h2 id="_4-2" tabindex="-1">4-2 <a class="header-anchor" href="#_4-2" aria-label="Permalink to &quot;4-2&quot;"></a></h2>
<h3 id="java-中有没有引用传递" tabindex="-1">JAVA 中有没有引用传递？ <a class="header-anchor" href="#java-中有没有引用传递" aria-label="Permalink to &quot;JAVA 中有没有引用传递？&quot;"></a></h3>
<p>JAVA 中没有引用传递，只有值传递。</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[] args) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[] arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(arr[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">      change</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(arr);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(arr[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> change</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[] array) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">      // 将数组的第一个元素变为0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      array[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span></code></pre>
</div><p>上方案例中，输出的结果为 <code>1 0</code> ，说明在 <code>change</code> 方法中修改了数组的第一个元素，但是并没有改变数组的引用。</p>
<h2 id="_4-1" tabindex="-1">4-1 <a class="header-anchor" href="#_4-1" aria-label="Permalink to &quot;4-1&quot;"></a></h2>
<h3 id="值传递-引用传递" tabindex="-1">值传递&amp;引用传递 <a class="header-anchor" href="#值传递-引用传递" aria-label="Permalink to &quot;值传递&amp;引用传递&quot;"></a></h3>
<ul>
<li>值传递：传递的是实际的值，会创建一个副本，对形参的修改不会影响实参。</li>
<li>引用传递：传递的是实际的地址，对形参的修改会影响实参。</li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[每日一题 - 202405]]></title>
            <link>https://www.imufeng.cn/interview/question-by-day/2024/5.html</link>
            <guid>https://www.imufeng.cn/interview/question-by-day/2024/5.html</guid>
            <pubDate>Sat, 05 Oct 2024 12:44:16 GMT</pubDate>
            <description><![CDATA[
# 每日一题 - 202405

## 5-31

### 如何压缩前端项目中 JS 的体积

1. `terser` 或者 `uglify`，及流行的使用 Rust 编写的 `swc` 压缩混淆化 JS。
2. `gzip` 或者 `brotli` 压缩，在网关处(nginx)开启
3. 使用 `webpack-bundle-analyzer` 分析打包体积，替换占用较大体积的库，如 `moment` -> `dayjs`
4. 使用支持 Tree-Shaking 的库，对无引用的库或函数进行删除，如 `lodash` -> `lodash/es`
5. 对无法 Tree Shaking 的库，进行按需引入模块，如使用 `import Button from 'antd/lib/Button'`，此处可手写 `babel-plugin` 自动完成，但不推荐
6. 使用 babel (css 为 postcss) 时采用 `browserlist`，越先进的浏览器所需要的 polyfill 越少，体积更小
7. code spliting，路由懒加载，只加载当前路由的包，按需加载其余的 chunk，首页 JS 体积变小 (PS: 次条不减小总体积，但减小首页体积)
8. 使用 webpack 的 splitChunksPlugin，把运行时、被引用多次的库进行分包，在分包时要注意避免某一个库被多次引用多次打包。此时分为多个 chunk，虽不能把总体积变小，但可提高加载性能 (PS: 此条不减小总体积，但可提升加载性能)
9. 去除多余字符，eg：空格，换行、注释
10. 使用更简单的表达，eg：合并声明、布尔值简化


## 5-30

### prefetch 与 preload 的区别是什么

`preload` 提供了一种声明式的命令，让浏览器提前加载指定资源(加载后并不执行)，在需要执行的时候再执行。提供的好处主要是

- 将加载和执行分离开，可不阻塞渲染和 document 的 onload 事件
- 提前加载指定资源，不再出现依赖的font字体隔了一段时间才刷出

```html
<link rel="prefetch" href="style.css" as="style" />
<link rel="preload" href="main.js" as="script" />
```

1. `preload` 优先级高，是告诉浏览器页面**必定**需要的资源，浏览器**一定会**加载这些资源。一般对于 Bundle Spliting 资源与 Code Spliting 资源做 preload
2. `prefetch` 优先级低，是告诉浏览器页面**可能**需要的资源，浏览器**不一定会**加载这些资源。一般用以加载其它路由资源，如当页面出现 Link，可 prefetch 当前 Link 的路由资源。（next.js 默认会对 link 做懒加载+prefetch，即当某条 Link 出现页面中，即自动 prefetch 该 Link 指向的路由资源

> 若不确定资源是必定会加载的，则不要错误使用 preload，以免本末倒置，给页面带来更沉重的负担。
>
> 当然，可以在 PC 中使用 preload 来刷新资源的缓存，但在移动端则需要特别慎重，因为可能会浪费用户的带宽。
>
> `preload 和 prefetch` 混用的话，并不会复用资源，而是会重复加载。
>
> 若 css 中有应用于已渲染到 DOM 树的元素的选择器，且设置了` @font-face `规则时，会触发字体文件的加载。 而字体文件加载中时，DOM 中的这些元素，是处于不可见的状态。对已知必加载的 font 文件进行预加载，除了有性能提升外，更有体验优化的效果。


## 5-29

### 简述 node/v8 中的垃圾回收机制

`v8` 中的垃圾回收机制分为三种

1. `Scavenge`，工作在新生代，把 `from space` 中的存活对象移至 `to space`
2. `Mark-Sweep`，标记清除。新生代的某些对象由于过度活跃会被移至老生代，此时对老生代中活对象进行标记，并清理死对象
3. `Mark-Compact`，标记整理。

> 当一个函数执行结束之后，JavaScript 引擎会通过向下移动 ESP 来销毁该函数保存在栈中的执行上下文。 要回收堆中的垃圾数据，就需要用到 JavaScript 中的垃圾回收器了。 代际假说（The Generational Hypothesis），是垃圾回收领域中一个重要的术语，后续垃圾回收的策略都是建立在该假说的基础之上的，所以很是重要。 代际假说有以下两个特点：
>
> 1. 大部分对象在内存中存在的时间很短，简单来说，就是很多对象一经分配内存，很快就变得不可访问；
>
> 2. 是不死的对象，会活得更久。 在 V8 中会把堆分为新生代和老生代两个区域，新生代中存放的是生存时间短的对象，老生代中存放的生存时间久的对象。
     >
     >    ● 副垃圾回收器，主要负责新生代的垃圾回收。
     >
     >    ● 主垃圾回收器，主要负责老生代的垃圾回收。
>
> **全停顿**![1620974853612-a480b43e-b3bb-452f-a502-3a0162548a7f](https://user-images.githubusercontent.com/19986739/153329224-c2120a5d-4f25-4659-9347-d6217d5a5ce8.png)
>
> **增量标记**![1620975019709-efc33748-fbfc-4fb5-a19d-97abadbf8f97](https://user-images.githubusercontent.com/19986739/153329251-e6a21086-f646-48d5-a23c-c2e3351497ef.png)
>
> 使用增量标记算法，可以把一个完整的垃圾回收任务拆分为很多小的任务，这些小的任务执行时间比较短，可以穿插在其他的 JavaScript 任务中间执行，增强用户体验。


## 5-28

### JS如何在url中传递数组

在 URL 中如何传递数组这种复杂的数据，完全**取决于项目中前后端成员关于复杂数据在 URL 中传输的约定**，一般情况下可以使用以下方式来传递数组：

```javascript
a = 3 & a = 4 & a = 5;

a = 3, 4, 5;

a[] = 3 & a[] = 4 & a[] = 5;

a[0] = 3 & a[1] = 4 & a[2] = 5;
```

> 但同样，需要后端开发者写一个 `querystring.parse` 来对指定的格式解析进行支持，同时也有对各种复杂 qs 支持较好的 package，如：[qs: 据说是对 querystring 复杂对象解析最好的库](https://github.com/ljharb/qs#parsing-arrays)


## 5-27

### Vue3中的ref、toRef和toRefs

`ref`:接收一个内部值，生成对应的响应式数据，该内部值挂载在ref对象的value属性上；该对象可以用于模版和reactive。使用ref是为了解决值类型在setup、computed、合成函数等情况下的响应式丢失问题。

`toRef`:为响应式对象（reactive）的一个属性创建对应的ref，且该方式创建的ref与源属性保持同步。

`toRefs`：将响应式对象转换成普通对象，对象的每个属性都是对应的ref，两者间保持同步。使用toRefs进行对象解构。

```javascript
function ref(val) {
    const wrapper = {value: val}
    Object.defineProperty(wrapper, '__v_isRef', {value: true})
    return reactive(wrapper)
}

function toRef(obj, key) {
    const wrapper = {
        get value() {
            return obj[key]
        },
        set value(val) {
            obj[key] = val
        }
    }
    Object.defineProperty(wrapper, '__v_isRef', {value: true})
    return wrapper
}

function toRefs(obj) {
    const ret = {}
    for (const key in obj) {
        ret[key] = toRef(obj, key)
    }
    
    return ret
}

// 自动脱ref
function proxyRefs(target) {
    return new Proxy(target, {
        get(target, key, receiver) {
            const value = Reflect.get(target, key, receiver)
            return value.__v_isRef ? value.value : value
        },
        set(target, key, newValue, receiver) {
            const value = target[key]
            if(value.__v_isRef) {
                value.value = newValue
                return true
            }
            return Reflect.set(target, key, newValue, receiver)
        }
    })
}
```


## 5-26

### TypeScript中any、unknown、never

`any和unkonwn`在TS类型中属于最顶层的Top Type，即所有的类型都是它俩的子类型。

`never`则相反，它作为Bottom Type是所有类型的子类型。


## 5-25

### 浏览器的事件循环机制

> JavaScript是单线程的（指的是js引擎在执行代码的时候只有一个主线程，每次只能干一件事），同时还是非阻塞运行的（执行异步任务的时候，会先挂起相应任务，待异步返回结果再执行回调）

在js代码执行时，会将对象存在`堆（heap）`中，在`栈（stack）`中存放一些基础类型变量和对象的指针。在执行方法时，会根据当前方法的执行上下文，来进行一个执行。对于普通函数就是正常的入栈出栈即可，涉及到异步任务的时候，js执行会将对应的任务放到事件队列中（微任务队列、宏任务队列）。

> - 常见微任务：queueMicrotask、Promise、MutationObserve等。
> - 常见宏任务：ajax、setTimeout、setInterval、script（js整体代码）、IO操作、UI交互、postMessage等。

故事件循环可以理解为是一个`桥梁`，连接着应用程序的js和系统调用之间的通道。其过程为：

1. 执行一个宏任务（一般为一段script），若没有可选的宏任务，就直接处理微任务。
2. 执行中遇到微任务，就将其添加到微任务的任务队列中。
3. 执行中遇到宏任务，就将其提交到宏任务队列中。
4. 执行完当前执行的宏任务后，去查询当前有无需要执行的微任务，有就执行
5. 检查渲染，若需要渲染，浏览器执行渲染任务
6. 渲染完毕后，Js线程会去执行下一个宏任务。。。（如此循环）

```javascript
console.log("script start");

const promiseA = new Promise((resolve, reject) => {
  console.log("init promiseA");
  resolve("promiseA");
});

const promiseB = new Promise((resolve, reject) => {
  console.log("init promiseB");
  resolve("promiseB");
});

setTimeout(() => {
  console.log("setTimeout run");
  promiseB.then(res => {
    console.log("promiseB res :>> ", res);
  });
  console.log("setTimeout end");
}, 500);

promiseA.then(res => {
  console.log("promiseA res :>> ", res);
});

queueMicrotask(() => {
  console.log("queue Microtask run");
});

console.log("script end");

// script start
// init promiseA
// init promiseB
// script end
// promiseA res :>>  promiseA
// queue Microtask run
// setTimeout run
// setTimeout end
// promiseB res :>>  promiseB
```


## 5-24

### 箭头函数和普通函数的区别

箭头函数不会创建自身的this，只会从上一级`继承this`，箭头函数的this在定义的时候就已经确认了，之后不会改变。同时箭头函数无法作为构造函数使用，**没有自身的prototype，也没有arguments**。

```javascript
this.id = "global";

console.log("this.id :>> ", this.id); // this.id :>>  global

function normalFun() {
  return this.id;
}

const arrowFun = () => {
  return this.id;
};

const newNormal = new normalFun();
console.log("newNormal :>> ", newNormal); // newNormal :>>  normalFun {}
try {
  const newArrow = new arrowFun();
} catch (error) {
  console.log("error :>> ", error); // error :>>  TypeError: arrowFun is not a constructor
}

console.log("normalFun :>> ", normalFun()); // normalFun :>>  undefined
console.log("arrowFun() :>> ", arrowFun()); // arrowFun() :>>  global

const obj = {
  id: "obj",
  normalFun,
  arrowFun,
};

const normalFunBindObj = normalFun.bind(obj);
const arrowFunBindObj = arrowFun.bind(obj);
console.log("normalFun.call(obj) :>> ", normalFun.call(obj)); // normalFun.call(obj) :>>  obj
console.log("normalFunBindObj() :>> ", normalFunBindObj()); // normalFunBindObj() :>>  obj
console.log("arrowFun.call(obj) :>> :>> ", arrowFun.call(obj)); // arrowFun.call(obj) :>> :>>  global
console.log("arrowFunBindObj() :>> ", arrowFunBindObj()); // arrowFunBindObj() :>>  global
console.log("obj.normalFun() :>> ", obj.normalFun()); // obj.normalFun() :>>  obj
console.log("obj.arrowFun() :>> ", obj.arrowFun()); // obj.arrowFun() :>>  global
```


## 5-23

### 实现一个类似关键字new功能的函数

在js中`new`关键字主要做了：首先创建一个空对象，这个对象会作为执行new构造函数之后返回的对象实例，将创建的空对象原型（`__proto__`）指向构造函数的prototype属性，同时将这个空对象赋值给构造函数内部的`this`，并执行构造函数逻辑，根据构造函数的执行逻辑，返回初始创建的对象或构造函数的显式返回值。

```javascript
function newFn(...args) {
  const constructor = args.shift();
  const obj = Object.create(constructor.prototype);
  const result = constructor.apply(obj, args);
  return typeof result === "object" && result !== null ? result : obj;
}

function Person(name) {
  this.name = name;
}

const p = newFn(Person, "Jerome");

console.log("p.name :>> ", p.name); // p.name :>>  Jerome
```


## 5-22

### 数组的forEach和map方法的区别

`forEach`是对数组的每一个元素执行一次给定的函数。

`map`是创建一个新数组，该新数组由原数组的每个元素都调用一次提供的函数返回值。

```javascript
const arr = [1,2,3,4,5,6];

arr.forEach(x =>{
    x = x + 1;
    console.log("x :>> ", x);
})
// x :>>  2
// x :>>  3
// x :>>  4
// x :>>  5
// x :>>  6
// x :>>  7
console.log("arr :>> ", arr); // arr :>>  [1,2,3,4,5,6]

const mapArr = arr.map(x =>{
    x = x * 2;
    return x;
})
console.log("mapArr :>> ", mapArr); // mapArr :>>  [2,4,6,8,10,12]
console.log("arr :>> ", arr);  // arr :>>  [1,2,3,4,5,6]
```

> pop()：删除数组后面的最后一个元素，返回值为被删除的那个元素。
> 
> push()：将一个元素或多个元素添加到数组末尾，并返回新的长度。
> 
> shift()：删除数组中的第一个元素，并返回被删除元素的值。
> 
> unshift()：将一个或多个元素添加到数组的**开头**，并返回该数组的**新长度**。
> 
> splice()：通过删除或替换现有元素或者原地添加新的元素来修改数组，并以数组形式返回被修改的内容。
> 
> reverse(): 反转数组。


## 5-21

### TS中type和interface的区别

`interface`可以重复声明，type不行，继承方式不一样，type使用交叉类型方式，`interface使用extends实现`。在对象扩展的情况下，使用接口继承要比交叉类型的性能更好。建议使用interface来描述对象对外暴露的借口，使用type将一组类型重命名（或对类型进行复杂编程）。

```typescript
interface iMan {
  name: string;
  age: number;
}
// 接口可以进行声明合并
interface iMan {
  hobby: string;
}

type tMan = {
  name: string;
  age: number;
};
// type不能重复定义
// type tMan = {}

// 继承方式不同,接口继承使用extends
interface iManPlus extends iMan {
  height: string;
}
// type继承使用&，又称交叉类型
type tManPlus = { height: string } & tMan;

const aMan: iManPlus = {
  name: "aa",
  age: 15,
  height: "175cm",
  hobby: "eat",
};

const bMan: tManPlus = {
  name: "bb",
  age: 15,
  height: "150cm",
};
```


## 5-20

### 理解provide与inject

> 1、provide和inject是一对新的API，用于在父组件中提供数据，然后在子组件中注入数据。
>
> 2、provide：是一个对象，或者是一个返回对象的函数。里面呢就包含要给子孙后代的东西，也就是属性和属性值。
>
> 3、inject：一个字符串数组，或者是一个对象。属性值可以是一个对象，包含from和default默认值。

```vue
//在父组件中，使用provide提供数据：
//name：定义提供 property的 name。
//value ：property的值。
 setup(){
    provide('info',"值")
  }
//在子组件中，使用inject注入数据
//name：接收 provide提供的属性名。
//default：设置默认值，可以不写，是可选参数。
setup(){
    const info = inject("info")
    inject('info',"设置默认值")
    return {
        info
    }
  }
```

> provide和inject只能在setup函数中使用，而且provide提供的数据只能在其子组件中使用。如果要在兄弟组件中共享数据，可以使用一个共享的对象或者使用Vuex等状态管理库。


## 5-19

### js-tool-big-box工具包

js-tool-big-box工具主要解决防抖（`debounce`）和节流（`throttle`）的公共方法

**防抖**：

```javascript
<template>
  <div>
    <input @keyup="handleChange" v-model="inputVal" />
  </div>
</template>
<script>
import { eventBox } from 'js-tool-big-box';
export default {
  data() {
    return {
      inputVal: ''
    }
  },
    created() {
        this.myDebounce = eventBox.debounce((data) => {
          this.sendAjax(data);
        }, 2000);
      },
methods: {
    handleChange(event) {
      const val = event.target.value;
      this.myDebounce(val);
    },
    sendAjax(data) {
      console.log('发送时间：：', new Date().getTime());
      console.log('发送请求：', data);
    },
  }
}
</script>
```

**节流**：

```javascript
<script>
import { eventBox } from 'js-tool-big-box';
 
export default {
  name: 'dj',
  data () {
    return {
      inputVal: ''
    }
  },
  created() {
    this.myThrottle = eventBox.throttle((data) => {
      this.sendAjax(data);
    }, 2000);
  },
  methods: {
    handleChange(event) {
      const val = event.target.value;
      this.myThrottle(val);
    },
    sendAjax(data) {
      console.log('发送时间：：', new Date().getTime());
      console.log('发送请求：', data);
    },
  }
}
</script>
```


## 5-18

### Flutter状态管理

以下是常用的状态管理框架：

**1、state状态管理**

```dart
 @override
  InheritedWidget inheritFromWidgetOfExactType(Type targetType, { Object aspect }) {
    /// 在共享 map _inheritedWidgets 中查找
    final InheritedElement ancestor = _inheritedWidgets == null ? null : _inheritedWidgets[targetType];
    if (ancestor != null) {
      /// 返回找到的 InheritedWidget ，同时添加当前 element 处理
      return inheritFromElement(ancestor, aspect: aspect);
    }
    _hadUnsatisfiedDependencies = true;
    return null;
  }

  @override
  InheritedWidget inheritFromElement(InheritedElement ancestor, { Object aspect }) {
    _dependencies ??= HashSet<InheritedElement>();
    _dependencies.add(ancestor);
   /// 就是将当前 element（this） 添加到  _dependents 里
   /// 也就是 InheritedElement 的 _dependents
   /// _dependents[dependent] = value;
    ancestor.updateDependencies(this, aspect);
    return ancestor.widget;
  }

  @override
  void notifyClients(InheritedWidget oldWidget) {
    for (Element dependent in _dependents.keys) {
      notifyDependent(oldWidget, dependent);
    }
  }
```

**2、Provider状态管理**

优点： `不复杂，好理解，代码量不大的情况下，可以方便组合和控制刷新颗粒度` ， 其实一开始官方也有一个 `flutter-provide` ，不过后来无了， `Provider`成了它的替代品。

缺点：`相对依赖Flutter 和 Widget；需要依赖Context`

```dart
class _ProviderPageState extends State<ProviderPage> {
  @override
  Widget build(BuildContext context) {
    return MultiProvider(
      providers: [
        ChangeNotifierProvider(builder: (_) => ProviderModel()),
      ],
      child: Scaffold(
        appBar: AppBar(
          title: LayoutBuilder(
            builder: (BuildContext context, BoxConstraints constraints) {
              var counter =  Provider.of<ProviderModel>(context);
              return new Text("Provider ${counter.count.toString()}");
            },
          )
        ),
        body: CountWidget(),
      ),
    );
  }
}

class CountWidget extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Consumer<ProviderModel>(builder: (context, counter, _) {
      return new Column(
        children: <Widget>[
          new Expanded(child: new Center(child: new Text(counter.count.toString()))),
          new Center(
            child: new FlatButton(
                onPressed: () {
                  counter.add();
                },
                color: Colors.blue,
                child: new Text("+")),
          )
        ],
      );
    });
  }
}

class ProviderModel extends ChangeNotifier {
  int _count = 0;

  int get count => _count;

  void add() {
    _count++;
    notifyListeners();
  }
}
```

**3、Bloc状态管理**

BLoC算是 Flutter 早期比较知名的状态管理框架，它同样是存在 `bloc` 和 `flutter_bloc` 这样的依赖关系，**它是基于事件驱动来实现的状态管理**。

优点：`代码更加解耦，这是事件驱动的特性,把状态更新和事件绑定，可以灵活得实现状态拦截，重试甚至撤回`

缺点：`需要写更多的代码，开发节奏会有点影响,接收代码的新维护人员，缺乏有效文档时容易陷入对着事件和业务蒙圈,项目后期事件容易混乱交织`

```dart
BlocSelector<BlocA, BlocAState, SelectedState>(
  selector: (state) {
    // return selected state based on the provided state.
  },
  builder: (context, state) {
    // return widget here based on the selected state.
  },
)

MultiBlocListener(
  listeners: [
    BlocListener<BlocA, BlocAState>(
      listener: (context, state) {},
    ),
    BlocListener<BlocB, BlocBState>(
      listener: (context, state) {},
    ),
    BlocListener<BlocC, BlocCState>(
      listener: (context, state) {},
    ),
  ],
  child: ChildA(),
)
```

**4、flutter_redux状态管理**

优点：`解耦,对 redux 开发友好,适合中大型项目里协作开发`

缺点：`影响开发速度，要写一堆模版,不是很贴合 Flutter 开发思路`

**5、GetX状态管理**

优点：`瑞士军刀式护航；对新人友好；可以减少很多代码`

缺点：`全家桶，做的太多对于一些使用者来说是致命缺点，需要解决的 Bug 也多；“魔法”使用较多，脱离 Flutter 原本轨迹；入侵性极强`


## 5-17

### 了解Flutter

`Flutter`是由Google推出的开源UI软件开发工具包，用于构建原生、精美的移动、web和桌面应用。它使用Dart语言作为开发语言，并通过自己的渲染引擎绘制UI。

> **Flutter的优势：**
>
> - 提高开发效率
    >   - 同一份代码开发iOS和Android
>   - 用更少的代码做更多的事情
>   - 轻松迭代
      >     - 在应用程序运行时更改代码并重新加载（通过热重载）
>     - 修复崩溃并继续从应用程序停止的地方进行调试
> - 创建美观，高度定制的用户体验
    >   - 受益于使用Flutter框架提供的丰富的Material Design和Cupertino（iOS风格）的widget
>   - 实现定制、美观、品牌驱动的设计，而不受原生控件的限制


## 5-16

### 理解keep-alive

`keep-alive` 是 Vue 内置的一个组件，可以使被包含的组件保留状态，避免重新渲染 ，其有以下特性：

- 一般结合路由和动态组件一起使用，用于缓存组件；
- 提供 include 和 exclude 属性，两者都支持字符串或正则表达式， include 表示只有名称匹配的组件会被缓存，exclude 表示任何名称匹配的组件都不会被缓存 ，其中 exclude 的优先级比 include 高；
- 对应两个钩子函数 activated 和 deactivated ，当组件被激活时，触发钩子函数 activated，当组件被移除时，触发钩子函数 deactivated。


## 5-15

### Vue 的父组件和子组件生命周期钩子函数执行顺序

Vue 的父组件和子组件生命周期钩子函数执行顺序可以归类为以下 4 部分：

- **加载渲染过程**

  父 beforeCreate -> 父 created -> 父 beforeMount -> 子 beforeCreate -> 子 created -> 子 beforeMount -> 子 mounted -> 父 mounted

- **子组件更新过程**

  父 beforeUpdate -> 子 beforeUpdate -> 子 updated -> 父 updated

- **父组件更新过程**

  父 beforeUpdate -> 父 updated

- **销毁过程**

  父 beforeDestroy -> 子 beforeDestroy -> 子 destroyed -> 父 destroyed


## 5-14

### Vue 生命周期

Vue 实例有一个完整的生命周期，也就是从`开始创建、初始化数据、编译模版、挂载 Dom -> 渲染、更新 -> 渲染、卸载`等一系列过程，我们称这是 Vue 的生命周期。

| **生命周期**  | **描述**                                                     |
| ]]></description>
            <content:encoded><![CDATA[<h1 id="每日一题-202405" tabindex="-1">每日一题 - 202405 <a class="header-anchor" href="#每日一题-202405" aria-label="Permalink to &quot;每日一题 - 202405&quot;"></a></h1>
<h2 id="_5-31" tabindex="-1">5-31 <a class="header-anchor" href="#_5-31" aria-label="Permalink to &quot;5-31&quot;"></a></h2>
<h3 id="如何压缩前端项目中-js-的体积" tabindex="-1">如何压缩前端项目中 JS 的体积 <a class="header-anchor" href="#如何压缩前端项目中-js-的体积" aria-label="Permalink to &quot;如何压缩前端项目中 JS 的体积&quot;"></a></h3>
<ol>
<li><code>terser</code> 或者 <code>uglify</code>，及流行的使用 Rust 编写的 <code>swc</code> 压缩混淆化 JS。</li>
<li><code>gzip</code> 或者 <code>brotli</code> 压缩，在网关处(nginx)开启</li>
<li>使用 <code>webpack-bundle-analyzer</code> 分析打包体积，替换占用较大体积的库，如 <code>moment</code> -&gt; <code>dayjs</code></li>
<li>使用支持 Tree-Shaking 的库，对无引用的库或函数进行删除，如 <code>lodash</code> -&gt; <code>lodash/es</code></li>
<li>对无法 Tree Shaking 的库，进行按需引入模块，如使用 <code>import Button from 'antd/lib/Button'</code>，此处可手写 <code>babel-plugin</code> 自动完成，但不推荐</li>
<li>使用 babel (css 为 postcss) 时采用 <code>browserlist</code>，越先进的浏览器所需要的 polyfill 越少，体积更小</li>
<li>code spliting，路由懒加载，只加载当前路由的包，按需加载其余的 chunk，首页 JS 体积变小 (PS: 次条不减小总体积，但减小首页体积)</li>
<li>使用 webpack 的 splitChunksPlugin，把运行时、被引用多次的库进行分包，在分包时要注意避免某一个库被多次引用多次打包。此时分为多个 chunk，虽不能把总体积变小，但可提高加载性能 (PS: 此条不减小总体积，但可提升加载性能)</li>
<li>去除多余字符，eg：空格，换行、注释</li>
<li>使用更简单的表达，eg：合并声明、布尔值简化</li>
</ol>
<h2 id="_5-30" tabindex="-1">5-30 <a class="header-anchor" href="#_5-30" aria-label="Permalink to &quot;5-30&quot;"></a></h2>
<h3 id="prefetch-与-preload-的区别是什么" tabindex="-1">prefetch 与 preload 的区别是什么 <a class="header-anchor" href="#prefetch-与-preload-的区别是什么" aria-label="Permalink to &quot;prefetch 与 preload 的区别是什么&quot;"></a></h3>
<p><code>preload</code> 提供了一种声明式的命令，让浏览器提前加载指定资源(加载后并不执行)，在需要执行的时候再执行。提供的好处主要是</p>
<ul>
<li>将加载和执行分离开，可不阻塞渲染和 document 的 onload 事件</li>
<li>提前加载指定资源，不再出现依赖的font字体隔了一段时间才刷出</li>
</ul>
<div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"prefetch"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"style.css"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"style"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> /></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"preload"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"main.js"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"script"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> /></span></span></code></pre>
</div><ol>
<li><code>preload</code> 优先级高，是告诉浏览器页面<strong>必定</strong>需要的资源，浏览器<strong>一定会</strong>加载这些资源。一般对于 Bundle Spliting 资源与 Code Spliting 资源做 preload</li>
<li><code>prefetch</code> 优先级低，是告诉浏览器页面<strong>可能</strong>需要的资源，浏览器<strong>不一定会</strong>加载这些资源。一般用以加载其它路由资源，如当页面出现 Link，可 prefetch 当前 Link 的路由资源。（next.js 默认会对 link 做懒加载+prefetch，即当某条 Link 出现页面中，即自动 prefetch 该 Link 指向的路由资源</li>
</ol>
<blockquote>
<p>若不确定资源是必定会加载的，则不要错误使用 preload，以免本末倒置，给页面带来更沉重的负担。</p>
<p>当然，可以在 PC 中使用 preload 来刷新资源的缓存，但在移动端则需要特别慎重，因为可能会浪费用户的带宽。</p>
<p><code>preload 和 prefetch</code> 混用的话，并不会复用资源，而是会重复加载。</p>
<p>若 css 中有应用于已渲染到 DOM 树的元素的选择器，且设置了<code>@font-face</code>规则时，会触发字体文件的加载。 而字体文件加载中时，DOM 中的这些元素，是处于不可见的状态。对已知必加载的 font 文件进行预加载，除了有性能提升外，更有体验优化的效果。</p>
</blockquote>
<h2 id="_5-29" tabindex="-1">5-29 <a class="header-anchor" href="#_5-29" aria-label="Permalink to &quot;5-29&quot;"></a></h2>
<h3 id="简述-node-v8-中的垃圾回收机制" tabindex="-1">简述 node/v8 中的垃圾回收机制 <a class="header-anchor" href="#简述-node-v8-中的垃圾回收机制" aria-label="Permalink to &quot;简述 node/v8 中的垃圾回收机制&quot;"></a></h3>
<p><code>v8</code> 中的垃圾回收机制分为三种</p>
<ol>
<li><code>Scavenge</code>，工作在新生代，把 <code>from space</code> 中的存活对象移至 <code>to space</code></li>
<li><code>Mark-Sweep</code>，标记清除。新生代的某些对象由于过度活跃会被移至老生代，此时对老生代中活对象进行标记，并清理死对象</li>
<li><code>Mark-Compact</code>，标记整理。</li>
</ol>
<blockquote>
<p>当一个函数执行结束之后，JavaScript 引擎会通过向下移动 ESP 来销毁该函数保存在栈中的执行上下文。 要回收堆中的垃圾数据，就需要用到 JavaScript 中的垃圾回收器了。 代际假说（The Generational Hypothesis），是垃圾回收领域中一个重要的术语，后续垃圾回收的策略都是建立在该假说的基础之上的，所以很是重要。 代际假说有以下两个特点：</p>
<ol>
<li>
<p>大部分对象在内存中存在的时间很短，简单来说，就是很多对象一经分配内存，很快就变得不可访问；</p>
</li>
<li>
<p>是不死的对象，会活得更久。 在 V8 中会把堆分为新生代和老生代两个区域，新生代中存放的是生存时间短的对象，老生代中存放的生存时间久的对象。</p>
<p>● 副垃圾回收器，主要负责新生代的垃圾回收。</p>
<p>● 主垃圾回收器，主要负责老生代的垃圾回收。</p>
</li>
</ol>
<p><strong>全停顿</strong><img src="https://user-images.githubusercontent.com/19986739/153329224-c2120a5d-4f25-4659-9347-d6217d5a5ce8.png" alt="1620974853612-a480b43e-b3bb-452f-a502-3a0162548a7f"></p>
<p><strong>增量标记</strong><img src="https://user-images.githubusercontent.com/19986739/153329251-e6a21086-f646-48d5-a23c-c2e3351497ef.png" alt="1620975019709-efc33748-fbfc-4fb5-a19d-97abadbf8f97"></p>
<p>使用增量标记算法，可以把一个完整的垃圾回收任务拆分为很多小的任务，这些小的任务执行时间比较短，可以穿插在其他的 JavaScript 任务中间执行，增强用户体验。</p>
</blockquote>
<h2 id="_5-28" tabindex="-1">5-28 <a class="header-anchor" href="#_5-28" aria-label="Permalink to &quot;5-28&quot;"></a></h2>
<h3 id="js如何在url中传递数组" tabindex="-1">JS如何在url中传递数组 <a class="header-anchor" href="#js如何在url中传递数组" aria-label="Permalink to &quot;JS如何在url中传递数组&quot;"></a></h3>
<p>在 URL 中如何传递数组这种复杂的数据，完全<strong>取决于项目中前后端成员关于复杂数据在 URL 中传输的约定</strong>，一般情况下可以使用以下方式来传递数组：</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> &#x26;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> &#x26;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">a[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> &#x26;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> a[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> &#x26;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> a[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">a[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> &#x26;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> a[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> &#x26;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> a[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span></code></pre>
</div><blockquote>
<p>但同样，需要后端开发者写一个 <code>querystring.parse</code> 来对指定的格式解析进行支持，同时也有对各种复杂 qs 支持较好的 package，如：<a href="https://github.com/ljharb/qs#parsing-arrays" target="_blank" rel="noreferrer">qs: 据说是对 querystring 复杂对象解析最好的库</a></p>
</blockquote>
<h2 id="_5-27" tabindex="-1">5-27 <a class="header-anchor" href="#_5-27" aria-label="Permalink to &quot;5-27&quot;"></a></h2>
<h3 id="vue3中的ref、toref和torefs" tabindex="-1">Vue3中的ref、toRef和toRefs <a class="header-anchor" href="#vue3中的ref、toref和torefs" aria-label="Permalink to &quot;Vue3中的ref、toRef和toRefs&quot;"></a></h3>
<p><code>ref</code>:接收一个内部值，生成对应的响应式数据，该内部值挂载在ref对象的value属性上；该对象可以用于模版和reactive。使用ref是为了解决值类型在setup、computed、合成函数等情况下的响应式丢失问题。</p>
<p><code>toRef</code>:为响应式对象（reactive）的一个属性创建对应的ref，且该方式创建的ref与源属性保持同步。</p>
<p><code>toRefs</code>：将响应式对象转换成普通对象，对象的每个属性都是对应的ref，两者间保持同步。使用toRefs进行对象解构。</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> wrapper</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {value: val}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">defineProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(wrapper, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'__v_isRef'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, {value: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> reactive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(wrapper)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> toRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">obj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> wrapper</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        get</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> obj[key]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        },</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        set</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            obj[key] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> val</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">defineProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(wrapper, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'__v_isRef'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, {value: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> wrapper</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> toRefs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">obj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> ret</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> obj) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        ret[key] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> toRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(obj, key)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ret</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 自动脱ref</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> proxyRefs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(target, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">receiver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Reflect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(target, key, receiver)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> value.__v_isRef </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> value.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">        set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">newValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">receiver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> target[key]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(value.__v_isRef) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                value.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> newValue</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">                return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Reflect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(target, key, newValue, receiver)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="_5-26" tabindex="-1">5-26 <a class="header-anchor" href="#_5-26" aria-label="Permalink to &quot;5-26&quot;"></a></h2>
<h3 id="typescript中any、unknown、never" tabindex="-1">TypeScript中any、unknown、never <a class="header-anchor" href="#typescript中any、unknown、never" aria-label="Permalink to &quot;TypeScript中any、unknown、never&quot;"></a></h3>
<p><code>any和unkonwn</code>在TS类型中属于最顶层的Top Type，即所有的类型都是它俩的子类型。</p>
<p><code>never</code>则相反，它作为Bottom Type是所有类型的子类型。</p>
<h2 id="_5-25" tabindex="-1">5-25 <a class="header-anchor" href="#_5-25" aria-label="Permalink to &quot;5-25&quot;"></a></h2>
<h3 id="浏览器的事件循环机制" tabindex="-1">浏览器的事件循环机制 <a class="header-anchor" href="#浏览器的事件循环机制" aria-label="Permalink to &quot;浏览器的事件循环机制&quot;"></a></h3>
<blockquote>
<p>JavaScript是单线程的（指的是js引擎在执行代码的时候只有一个主线程，每次只能干一件事），同时还是非阻塞运行的（执行异步任务的时候，会先挂起相应任务，待异步返回结果再执行回调）</p>
</blockquote>
<p>在js代码执行时，会将对象存在<code>堆（heap）</code>中，在<code>栈（stack）</code>中存放一些基础类型变量和对象的指针。在执行方法时，会根据当前方法的执行上下文，来进行一个执行。对于普通函数就是正常的入栈出栈即可，涉及到异步任务的时候，js执行会将对应的任务放到事件队列中（微任务队列、宏任务队列）。</p>
<blockquote>
<ul>
<li>常见微任务：queueMicrotask、Promise、MutationObserve等。</li>
<li>常见宏任务：ajax、setTimeout、setInterval、script（js整体代码）、IO操作、UI交互、postMessage等。</li>
</ul>
</blockquote>
<p>故事件循环可以理解为是一个<code>桥梁</code>，连接着应用程序的js和系统调用之间的通道。其过程为：</p>
<ol>
<li>执行一个宏任务（一般为一段script），若没有可选的宏任务，就直接处理微任务。</li>
<li>执行中遇到微任务，就将其添加到微任务的任务队列中。</li>
<li>执行中遇到宏任务，就将其提交到宏任务队列中。</li>
<li>执行完当前执行的宏任务后，去查询当前有无需要执行的微任务，有就执行</li>
<li>检查渲染，若需要渲染，浏览器执行渲染任务</li>
<li>渲染完毕后，Js线程会去执行下一个宏任务。。。（如此循环）</li>
</ol>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"script start"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> promiseA</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"init promiseA"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"promiseA"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> promiseB</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"init promiseB"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"promiseB"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"setTimeout run"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  promiseB.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"promiseB res :>> "</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, res);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"setTimeout end"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">promiseA.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"promiseA res :>> "</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, res);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">queueMicrotask</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"queue Microtask run"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"script end"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// script start</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// init promiseA</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// init promiseB</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// script end</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// promiseA res :>>  promiseA</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// queue Microtask run</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// setTimeout run</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// setTimeout end</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// promiseB res :>>  promiseB</span></span></code></pre>
</div><h2 id="_5-24" tabindex="-1">5-24 <a class="header-anchor" href="#_5-24" aria-label="Permalink to &quot;5-24&quot;"></a></h2>
<h3 id="箭头函数和普通函数的区别" tabindex="-1">箭头函数和普通函数的区别 <a class="header-anchor" href="#箭头函数和普通函数的区别" aria-label="Permalink to &quot;箭头函数和普通函数的区别&quot;"></a></h3>
<p>箭头函数不会创建自身的this，只会从上一级<code>继承this</code>，箭头函数的this在定义的时候就已经确认了，之后不会改变。同时箭头函数无法作为构造函数使用，<strong>没有自身的prototype，也没有arguments</strong>。</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "global"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"this.id :>> "</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.id); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// this.id :>>  global</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> normalFun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.id;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> arrowFun</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.id;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> newNormal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> normalFun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"newNormal :>> "</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, newNormal); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// newNormal :>>  normalFun {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> newArrow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> arrowFun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (error) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"error :>> "</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, error); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// error :>>  TypeError: arrowFun is not a constructor</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"normalFun :>> "</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">normalFun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// normalFun :>>  undefined</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"arrowFun() :>> "</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">arrowFun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// arrowFun() :>>  global</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"obj"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  normalFun,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  arrowFun,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> normalFunBindObj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> normalFun.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">bind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(obj);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> arrowFunBindObj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> arrowFun.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">bind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(obj);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"normalFun.call(obj) :>> "</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, normalFun.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(obj)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// normalFun.call(obj) :>>  obj</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"normalFunBindObj() :>> "</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">normalFunBindObj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// normalFunBindObj() :>>  obj</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"arrowFun.call(obj) :>> :>> "</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, arrowFun.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(obj)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// arrowFun.call(obj) :>> :>>  global</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"arrowFunBindObj() :>> "</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">arrowFunBindObj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// arrowFunBindObj() :>>  global</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"obj.normalFun() :>> "</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, obj.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">normalFun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// obj.normalFun() :>>  obj</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"obj.arrowFun() :>> "</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, obj.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">arrowFun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// obj.arrowFun() :>>  global</span></span></code></pre>
</div><h2 id="_5-23" tabindex="-1">5-23 <a class="header-anchor" href="#_5-23" aria-label="Permalink to &quot;5-23&quot;"></a></h2>
<h3 id="实现一个类似关键字new功能的函数" tabindex="-1">实现一个类似关键字new功能的函数 <a class="header-anchor" href="#实现一个类似关键字new功能的函数" aria-label="Permalink to &quot;实现一个类似关键字new功能的函数&quot;"></a></h3>
<p>在js中<code>new</code>关键字主要做了：首先创建一个空对象，这个对象会作为执行new构造函数之后返回的对象实例，将创建的空对象原型（<code>__proto__</code>）指向构造函数的prototype属性，同时将这个空对象赋值给构造函数内部的<code>this</code>，并执行构造函数逻辑，根据构造函数的执行逻辑，返回初始创建的对象或构造函数的显式返回值。</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> newFn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> constructor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> args.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">shift</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> constructor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(obj, args);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "object"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> &#x26;&#x26;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">!==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> ?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> obj;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> newFn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(Person, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"Jerome"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"p.name :>> "</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, p.name); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// p.name :>>  Jerome</span></span></code></pre>
</div><h2 id="_5-22" tabindex="-1">5-22 <a class="header-anchor" href="#_5-22" aria-label="Permalink to &quot;5-22&quot;"></a></h2>
<h3 id="数组的foreach和map方法的区别" tabindex="-1">数组的forEach和map方法的区别 <a class="header-anchor" href="#数组的foreach和map方法的区别" aria-label="Permalink to &quot;数组的forEach和map方法的区别&quot;"></a></h3>
<p><code>forEach</code>是对数组的每一个元素执行一次给定的函数。</p>
<p><code>map</code>是创建一个新数组，该新数组由原数组的每个元素都调用一次提供的函数返回值。</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">arr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"x :>> "</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, x);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// x :>>  2</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// x :>>  3</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// x :>>  4</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// x :>>  5</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// x :>>  6</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// x :>>  7</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"arr :>> "</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, arr); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// arr :>>  [1,2,3,4,5,6]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> mapArr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> arr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> x;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"mapArr :>> "</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, mapArr); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// mapArr :>>  [2,4,6,8,10,12]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"arr :>> "</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, arr);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// arr :>>  [1,2,3,4,5,6]</span></span></code></pre>
</div><blockquote>
<p>pop()：删除数组后面的最后一个元素，返回值为被删除的那个元素。</p>
<p>push()：将一个元素或多个元素添加到数组末尾，并返回新的长度。</p>
<p>shift()：删除数组中的第一个元素，并返回被删除元素的值。</p>
<p>unshift()：将一个或多个元素添加到数组的<strong>开头</strong>，并返回该数组的<strong>新长度</strong>。</p>
<p>splice()：通过删除或替换现有元素或者原地添加新的元素来修改数组，并以数组形式返回被修改的内容。</p>
<p>reverse(): 反转数组。</p>
</blockquote>
<h2 id="_5-21" tabindex="-1">5-21 <a class="header-anchor" href="#_5-21" aria-label="Permalink to &quot;5-21&quot;"></a></h2>
<h3 id="ts中type和interface的区别" tabindex="-1">TS中type和interface的区别 <a class="header-anchor" href="#ts中type和interface的区别" aria-label="Permalink to &quot;TS中type和interface的区别&quot;"></a></h3>
<p><code>interface</code>可以重复声明，type不行，继承方式不一样，type使用交叉类型方式，<code>interface使用extends实现</code>。在对象扩展的情况下，使用接口继承要比交叉类型的性能更好。建议使用interface来描述对象对外暴露的借口，使用type将一组类型重命名（或对类型进行复杂编程）。</p>
<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> iMan</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 接口可以进行声明合并</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> iMan</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  hobby</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> tMan</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// type不能重复定义</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// type tMan = {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 继承方式不同,接口继承使用extends</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> iManPlus</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> iMan</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">  height</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// type继承使用&#x26;，又称交叉类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> tManPlus</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">height</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x26;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> tMan</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> aMan</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> iManPlus</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"aa"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  height: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"175cm"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  hobby: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"eat"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> bMan</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> tManPlus</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"bb"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  height: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"150cm"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span></code></pre>
</div><h2 id="_5-20" tabindex="-1">5-20 <a class="header-anchor" href="#_5-20" aria-label="Permalink to &quot;5-20&quot;"></a></h2>
<h3 id="理解provide与inject" tabindex="-1">理解provide与inject <a class="header-anchor" href="#理解provide与inject" aria-label="Permalink to &quot;理解provide与inject&quot;"></a></h3>
<blockquote>
<p>1、provide和inject是一对新的API，用于在父组件中提供数据，然后在子组件中注入数据。</p>
<p>2、provide：是一个对象，或者是一个返回对象的函数。里面呢就包含要给子孙后代的东西，也就是属性和属性值。</p>
<p>3、inject：一个字符串数组，或者是一个对象。属性值可以是一个对象，包含from和default默认值。</p>
</blockquote>
<div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">//在父组件中，使用provide提供数据：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">//name：定义提供 property的 name。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">//value ：property的值。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> setup(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    provide('info',"值")</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">//在子组件中，使用inject注入数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">//name：接收 provide提供的属性名。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">//default：设置默认值，可以不写，是可选参数。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">setup(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    const info = inject("info")</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    inject('info',"设置默认值")</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    return {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        info</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span></code></pre>
</div><blockquote>
<p>provide和inject只能在setup函数中使用，而且provide提供的数据只能在其子组件中使用。如果要在兄弟组件中共享数据，可以使用一个共享的对象或者使用Vuex等状态管理库。</p>
</blockquote>
<h2 id="_5-19" tabindex="-1">5-19 <a class="header-anchor" href="#_5-19" aria-label="Permalink to &quot;5-19&quot;"></a></h2>
<h3 id="js-tool-big-box工具包" tabindex="-1">js-tool-big-box工具包 <a class="header-anchor" href="#js-tool-big-box工具包" aria-label="Permalink to &quot;js-tool-big-box工具包&quot;"></a></h3>
<p>js-tool-big-box工具主要解决防抖（<code>debounce</code>）和节流（<code>throttle</code>）的公共方法</p>
<p><strong>防抖</strong>：</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">input</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic"> @keyup="handleChange"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> v-model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"inputVal"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> /></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">import { eventBox } from 'js-tool-big-box';</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">export default {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    return {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">      inputVal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">''</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    created</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        this.myDebounce </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> eventBox.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">debounce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">          this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">sendAjax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">methods: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    handleChange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> event.target.value;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">myDebounce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(val);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    sendAjax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'发送时间：：'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'发送请求：'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><p><strong>节流</strong>：</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">import { eventBox } from 'js-tool-big-box';</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">export default {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'dj'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    return {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">      inputVal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">''</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  created</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    this.myThrottle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> eventBox.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">throttle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">sendAjax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  methods: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    handleChange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> event.target.value;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">myThrottle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(val);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    sendAjax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'发送时间：：'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'发送请求：'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><h2 id="_5-18" tabindex="-1">5-18 <a class="header-anchor" href="#_5-18" aria-label="Permalink to &quot;5-18&quot;"></a></h2>
<h3 id="flutter状态管理" tabindex="-1">Flutter状态管理 <a class="header-anchor" href="#flutter状态管理" aria-label="Permalink to &quot;Flutter状态管理&quot;"></a></h3>
<p>以下是常用的状态管理框架：</p>
<p><strong>1、state状态管理</strong></p>
<div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> @override</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  InheritedWidget</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> inheritFromWidgetOfExactType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> targetType, { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> aspect }) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    /// 在共享 map _inheritedWidgets 中查找</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    final</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> InheritedElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ancestor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> _inheritedWidgets </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> ?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> _inheritedWidgets[targetType];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (ancestor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">      /// 返回找到的 InheritedWidget ，同时添加当前 element 处理</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> inheritFromElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(ancestor, aspect</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> aspect);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    _hadUnsatisfiedDependencies </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  @override</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  InheritedWidget</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> inheritFromElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">InheritedElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ancestor, { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> aspect }) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    _dependencies </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">??=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> HashSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">InheritedElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    _dependencies.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(ancestor);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">   /// 就是将当前 element（this） 添加到  _dependents 里</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">   /// 也就是 InheritedElement 的 _dependents</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">   /// _dependents</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">[dependent]</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"> = value;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    ancestor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">updateDependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, aspect);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ancestor.widget;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  @override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> notifyClients</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">InheritedWidget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> oldWidget) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">Element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> dependent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> _dependents.keys) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">      notifyDependent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(oldWidget, dependent);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span></code></pre>
</div><p><strong>2、Provider状态管理</strong></p>
<p>优点： <code>不复杂，好理解，代码量不大的情况下，可以方便组合和控制刷新颗粒度</code> ， 其实一开始官方也有一个 <code>flutter-provide</code> ，不过后来无了， <code>Provider</code>成了它的替代品。</p>
<p>缺点：<code>相对依赖Flutter 和 Widget；需要依赖Context</code></p>
<div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> _ProviderPageState</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> extends</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> State</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">ProviderPage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  @override</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  Widget</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">BuildContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> context) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> MultiProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      providers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        ChangeNotifierProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(builder</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (_) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> ProviderModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      child</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> Scaffold</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        appBar</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> AppBar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">          title</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> LayoutBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            builder</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">BuildContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> context, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">BoxConstraints</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> constraints) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">              var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> counter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  Provider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">ProviderModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>(context);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">              return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"Provider </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">${</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">counter</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">count</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">toString</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">()}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">          )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        ),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        body</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> CountWidget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      ),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> CountWidget</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> extends</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> StatelessWidget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  @override</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  Widget</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">BuildContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> context) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> Consumer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">ProviderModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>(builder</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (context, counter, _) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> Column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        children</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> &#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">Widget</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">          new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> Expanded</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(child</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> Center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(child</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(counter.count.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()))),</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">          new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> Center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            child</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> FlatButton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                onPressed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                  counter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                color</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> Colors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.blue,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                child</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"+"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">          )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> ProviderModel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> extends</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> ChangeNotifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> _count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> _count;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    _count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    notifyListeners</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p><strong>3、Bloc状态管理</strong></p>
<p>BLoC算是 Flutter 早期比较知名的状态管理框架，它同样是存在 <code>bloc</code> 和 <code>flutter_bloc</code> 这样的依赖关系，<strong>它是基于事件驱动来实现的状态管理</strong>。</p>
<p>优点：<code>代码更加解耦，这是事件驱动的特性,把状态更新和事件绑定，可以灵活得实现状态拦截，重试甚至撤回</code></p>
<p>缺点：<code>需要写更多的代码，开发节奏会有点影响,接收代码的新维护人员，缺乏有效文档时容易陷入对着事件和业务蒙圈,项目后期事件容易混乱交织</code></p>
<div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">BlocSelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">BlocA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">BlocAState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">SelectedState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  selector</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (state) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // return selected state based on the provided state.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  builder</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (context, state) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // return widget here based on the selected state.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">MultiBlocListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  listeners</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    BlocListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">BlocA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">BlocAState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      listener</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (context, state) {},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    ),</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    BlocListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">BlocB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">BlocBState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      listener</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (context, state) {},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    ),</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    BlocListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">BlocC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">BlocCState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      listener</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (context, state) {},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    ),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  child</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> ChildA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span></code></pre>
</div><p><strong>4、flutter_redux状态管理</strong></p>
<p>优点：<code>解耦,对 redux 开发友好,适合中大型项目里协作开发</code></p>
<p>缺点：<code>影响开发速度，要写一堆模版,不是很贴合 Flutter 开发思路</code></p>
<p><strong>5、GetX状态管理</strong></p>
<p>优点：<code>瑞士军刀式护航；对新人友好；可以减少很多代码</code></p>
<p>缺点：<code>全家桶，做的太多对于一些使用者来说是致命缺点，需要解决的 Bug 也多；“魔法”使用较多，脱离 Flutter 原本轨迹；入侵性极强</code></p>
<h2 id="_5-17" tabindex="-1">5-17 <a class="header-anchor" href="#_5-17" aria-label="Permalink to &quot;5-17&quot;"></a></h2>
<h3 id="了解flutter" tabindex="-1">了解Flutter <a class="header-anchor" href="#了解flutter" aria-label="Permalink to &quot;了解Flutter&quot;"></a></h3>
<p><code>Flutter</code>是由Google推出的开源UI软件开发工具包，用于构建原生、精美的移动、web和桌面应用。它使用Dart语言作为开发语言，并通过自己的渲染引擎绘制UI。</p>
<blockquote>
<p><strong>Flutter的优势：</strong></p>
<ul>
<li>提高开发效率
<ul>
<li>同一份代码开发iOS和Android</li>
<li>用更少的代码做更多的事情</li>
<li>轻松迭代
<ul>
<li>在应用程序运行时更改代码并重新加载（通过热重载）</li>
<li>修复崩溃并继续从应用程序停止的地方进行调试</li>
</ul>
</li>
</ul>
</li>
<li>创建美观，高度定制的用户体验
<ul>
<li>受益于使用Flutter框架提供的丰富的Material Design和Cupertino（iOS风格）的widget</li>
<li>实现定制、美观、品牌驱动的设计，而不受原生控件的限制</li>
</ul>
</li>
</ul>
</blockquote>
<h2 id="_5-16" tabindex="-1">5-16 <a class="header-anchor" href="#_5-16" aria-label="Permalink to &quot;5-16&quot;"></a></h2>
<h3 id="理解keep-alive" tabindex="-1">理解keep-alive <a class="header-anchor" href="#理解keep-alive" aria-label="Permalink to &quot;理解keep-alive&quot;"></a></h3>
<p><code>keep-alive</code> 是 Vue 内置的一个组件，可以使被包含的组件保留状态，避免重新渲染 ，其有以下特性：</p>
<ul>
<li>一般结合路由和动态组件一起使用，用于缓存组件；</li>
<li>提供 include 和 exclude 属性，两者都支持字符串或正则表达式， include 表示只有名称匹配的组件会被缓存，exclude 表示任何名称匹配的组件都不会被缓存 ，其中 exclude 的优先级比 include 高；</li>
<li>对应两个钩子函数 activated 和 deactivated ，当组件被激活时，触发钩子函数 activated，当组件被移除时，触发钩子函数 deactivated。</li>
</ul>
<h2 id="_5-15" tabindex="-1">5-15 <a class="header-anchor" href="#_5-15" aria-label="Permalink to &quot;5-15&quot;"></a></h2>
<h3 id="vue-的父组件和子组件生命周期钩子函数执行顺序" tabindex="-1">Vue 的父组件和子组件生命周期钩子函数执行顺序 <a class="header-anchor" href="#vue-的父组件和子组件生命周期钩子函数执行顺序" aria-label="Permalink to &quot;Vue 的父组件和子组件生命周期钩子函数执行顺序&quot;"></a></h3>
<p>Vue 的父组件和子组件生命周期钩子函数执行顺序可以归类为以下 4 部分：</p>
<ul>
<li>
<p><strong>加载渲染过程</strong></p>
<p>父 beforeCreate -&gt; 父 created -&gt; 父 beforeMount -&gt; 子 beforeCreate -&gt; 子 created -&gt; 子 beforeMount -&gt; 子 mounted -&gt; 父 mounted</p>
</li>
<li>
<p><strong>子组件更新过程</strong></p>
<p>父 beforeUpdate -&gt; 子 beforeUpdate -&gt; 子 updated -&gt; 父 updated</p>
</li>
<li>
<p><strong>父组件更新过程</strong></p>
<p>父 beforeUpdate -&gt; 父 updated</p>
</li>
<li>
<p><strong>销毁过程</strong></p>
<p>父 beforeDestroy -&gt; 子 beforeDestroy -&gt; 子 destroyed -&gt; 父 destroyed</p>
</li>
</ul>
<h2 id="_5-14" tabindex="-1">5-14 <a class="header-anchor" href="#_5-14" aria-label="Permalink to &quot;5-14&quot;"></a></h2>
<h3 id="vue-生命周期" tabindex="-1">Vue 生命周期 <a class="header-anchor" href="#vue-生命周期" aria-label="Permalink to &quot;Vue 生命周期&quot;"></a></h3>
<p>Vue 实例有一个完整的生命周期，也就是从<code>开始创建、初始化数据、编译模版、挂载 Dom -&gt; 渲染、更新 -&gt; 渲染、卸载</code>等一系列过程，我们称这是 Vue 的生命周期。</p>
<table tabindex="0">
<thead>
<tr>
<th><strong>生命周期</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>beforeCreate</td>
<td>组件实例被创建之初，组件的属性生效之前</td>
</tr>
<tr>
<td>created</td>
<td>组件实例已经完全创建，属性也绑定，但真实 dom 还没有生成，$el 还不可用</td>
</tr>
<tr>
<td>beforeMount</td>
<td>在挂载开始之前被调用：相关的 render 函数首次被调用</td>
</tr>
<tr>
<td>mounted</td>
<td>el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子</td>
</tr>
<tr>
<td>beforeUpdate</td>
<td>组件数据更新之前调用，发生在虚拟 DOM 打补丁之前</td>
</tr>
<tr>
<td>update</td>
<td>组件数据更新之后</td>
</tr>
<tr>
<td>activited</td>
<td>keep-alive 专属，组件被激活时调用</td>
</tr>
<tr>
<td>deactivated</td>
<td>keep-alive 专属，组件被销毁时调用</td>
</tr>
<tr>
<td>beforeDestory</td>
<td>组件销毁前调用</td>
</tr>
<tr>
<td>destoryed</td>
<td>组件销毁后调用</td>
</tr>
</tbody>
</table>
<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/19/16ca74f183827f46~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="1.png"></p>
<h2 id="_5-13" tabindex="-1">5-13 <a class="header-anchor" href="#_5-13" aria-label="Permalink to &quot;5-13&quot;"></a></h2>
<h3 id="js-双色球机选一注" tabindex="-1">JS 双色球机选一注 <a class="header-anchor" href="#js-双色球机选一注" aria-label="Permalink to &quot;JS 双色球机选一注&quot;"></a></h3>
<h4 id="描述" tabindex="-1">描述 <a class="header-anchor" href="#描述" aria-label="Permalink to &quot;描述&quot;"></a></h4>
<p>双色球由33个红球和16个蓝球组成，1注双色球包括6个不重复的红球和1个蓝球。
请阅读给出的页面和代码，完成 randomFn 函数，实现“随机一注”功能，要求如下：</p>
<p><strong>函数返回：</strong></p>
<p>`1.以字符串形式输出“随机一注”结果，选中的红蓝球用&quot;|&quot;隔开，红球在前，号码间用半角逗号隔开，如&quot;06,10,13,18,23,27|05&quot;</p>
<p>2.红球和蓝球号码排列顺序 需与页面展示的顺序对应`</p>
<p><strong>页面交互：</strong></p>
<p>1.将选中的红球和蓝球（页面中对应DOM元素）用class=&quot;active&quot;高亮</p>
<p>2.将选中的球按号码从小到大排列，移至所属组的前方，结果如示意图所示</p>
<p>3.每次执行 randomFn 函数，输出符合要求且不完全重复</p>
<p><img src="https://uploadfiles.nowcoder.com/images/20180912/56_1536742847965_6A5DCE935C2B11A7798DAD3BC7BBD64B" alt="img"></p>
<blockquote>
<p>注意：</p>
<p>1、请使用原生JavaScript操作DOM元素，不要增加、删除DOM元素或修改css</p>
<p>2、请使用ES5语法</p>
<p>3、答题时不要使用第三方插件</p>
<p>4、运行浏览器为chrome浏览器</p>
</blockquote>
<div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;!</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">DOCTYPE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> charset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"UTF-8"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    &#x3C;!-- 填写标签 --></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"main"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"balls red"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>红球&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"balls-wp"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>01&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>02&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>03&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>04&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>05&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>06&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>07&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>08&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>09&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>10&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>11&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>12&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>13&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>14&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>15&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>16&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>17&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>18&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>19&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>20&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>21&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>22&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>23&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>24&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>25&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>26&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>27&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>28&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>29&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>30&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>31&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>32&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>33&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"balls blue"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>蓝球&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"balls-wp"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>01&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>02&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>03&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>04&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>05&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>06&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>07&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>08&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>09&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>10&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>11&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>12&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>13&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>14&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>15&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>16&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"text/javascript"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        // 填写JavaScript</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">        randomFn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> randomFn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">	        let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> redballs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">querySelectorAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">".red .balls-wp b"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> blueballs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">querySelectorAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">".blue .balls-wp b"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> reddiv </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">".red .balls-wp"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> bluediv </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">".blue .balls-wp"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> red </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> []</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> redB </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> []</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(red.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">                let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> num</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">floor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">33</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">                if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">red.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">includes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(num)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                    red.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(num)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">                    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> redb </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> redballs[num</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                    redb.classList.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"active"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                    redB.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(redb)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> blue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">floor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> blueB </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> blueballs[blue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">            //不能直接接在后面写 因为add返回的是undefined</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            blueB.classList.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"active"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">            //按照从大到小 指的是b标签的内部</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            redB </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> redB.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">sort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">b.innerHTML</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">a.innerHTML)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                redballs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">querySelectorAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'.red .balls-wp b'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">                //insertBefore是如果原来是子节点则将子节点移动到对应节点前面(删除原本位置)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">                //反之如果原来不是子节点 则将新节点插入到对应节点前面</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                reddiv.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">insertBefore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(redB[i],redballs[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            bluediv.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">insertBefore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(blueB,blueballs[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">])</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">            //因为涉及到06这种 而redb只是纯数值而已</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> redB.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">ball</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ball.innerHTML).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">reverse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">','</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> '|'</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> blueB.innerHTML</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><h2 id="_5-12" tabindex="-1">5-12 <a class="header-anchor" href="#_5-12" aria-label="Permalink to &quot;5-12&quot;"></a></h2>
<h3 id="js-购物车" tabindex="-1">JS 购物车 <a class="header-anchor" href="#js-购物车" aria-label="Permalink to &quot;JS 购物车&quot;"></a></h3>
<p>HTML模块为一个简化版的购物车，tbody为商品列表，tfoot为统计信息，系统会随机在列表中生成一些初始商品信息</p>
<p><code>1、请完成add函数，在列表后面显示items商品信息。参数items为{name: String, price: Number}组成的数组</code></p>
<p><code>2、请完成bind函数，点击每一行的删除按钮(包括通过add增加的行)，从列表中删除对应行</code></p>
<p><code>3、请注意同步更新统计信息，价格保留小数点后两位</code></p>
<p><code>4、列表和统计信息格式请与HTML示例保持一致</code></p>
<p><code>5、不要直接手动修改HTML中的代码</code></p>
<p><code>6、不要使用第三方库</code></p>
<div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;!</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">DOCTYPE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> charset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"UTF-8"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    &#x3C;!-- 填写标签 --></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">table</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"jsTrolley"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">thead</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">tr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">th</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>名称&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">th</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">th</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>价格&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">th</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">th</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>操作&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">th</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">tr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">thead</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">tbody</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">tr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">td</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>产品1&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">td</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">td</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>10.00&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">td</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">td</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"javascript:void(0);"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>删除&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">td</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">tr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">tr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">td</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>产品2&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">td</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">td</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>30.20&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">td</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">td</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"javascript:void(0);"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>删除&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">td</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">tr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">tr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">td</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>产品3&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">td</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">td</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>20.50&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">td</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">td</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"javascript:void(0);"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>删除&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">td</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">tr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">tbody</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">tfoot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">tr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">th</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>总计&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">th</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">td</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> colspan</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"2"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>60.70(3件商品)&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">td</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">tr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">tfoot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"text/javascript"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        // 填写JavaScript</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        // 新增行</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">items</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> tbody </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getElementsByTagName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'tbody'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> tfoot </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getElementsByTagName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'tfoot'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">            // 获取初始数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> tbody.children.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">length</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> parseFloat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(tfoot.innerText.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">.\d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">])</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">            // 新增行</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> tr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> ''</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> items.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> items[i].price</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                tr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> `&#x3C;tr>&#x3C;td>${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">items</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">[</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">].</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">}&#x3C;/td>&#x3C;td>${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">items</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">[</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">].</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">price</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">toFixed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">}&#x3C;/td>&#x3C;td>&#x3C;a href="javascript:void(0);">删除&#x3C;/a>&#x3C;/td>&#x3C;/tr>`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            tbody.innerHTML </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> tr</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            tfoot.innerHTML </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> `&#x3C;tr>&#x3C;th>总计&#x3C;/th>&#x3C;td colspan="2">${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">price</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">toFixed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">}(${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">count</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">}件商品)&#x3C;/td>&#x3C;/tr>`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        // 绑定事件，事件代理</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> bind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> tbody </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getElementsByTagName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'tbody'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> tfoot </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getElementsByTagName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'tfoot'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            tbody.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'click'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">                let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> tbody.children.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">length</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">                // 过滤点击的是否是a标签</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">                if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (e.target.tagName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "A"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">                    // 获取数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">                    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> parseFloat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(e.target.parentElement.parentElement.innerHTML.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">.\d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">                    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> total </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> tfoot.innerHTML.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">.\d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                    e.target.parentElement.parentElement.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                    tfoot.innerHTML </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> `&#x3C;tr>&#x3C;th>总计&#x3C;/th>&#x3C;td colspan="2">${</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">total</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> price</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">toFixed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">}(${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">num</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">}件商品)&#x3C;/td>&#x3C;/tr>`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        // 执行绑定事件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">        bind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><h2 id="_5-11" tabindex="-1">5-11 <a class="header-anchor" href="#_5-11" aria-label="Permalink to &quot;5-11&quot;"></a></h2>
<h3 id="js-数组排序" tabindex="-1">JS 数组排序 <a class="header-anchor" href="#js-数组排序" aria-label="Permalink to &quot;JS 数组排序&quot;"></a></h3>
<p>请补全JavaScript代码，根据预设代码中的数组，实现以下功能：</p>
<ol>
<li>列表只展示数组中的name属性</li>
<li>实现点击&quot;销量升序&quot;按钮，列表内容按照销量升序重新渲染</li>
<li>实现点击&quot;销量降序&quot;按钮，列表内容按照销量降序重新渲染</li>
</ol>
<blockquote>
<p>注意：</p>
<ol>
<li>必须使用DOM0级标准事件（onclick）</li>
</ol>
</blockquote>
<div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;!</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">DOCTYPE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">html</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"en"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> charset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"UTF-8"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'up'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>销量升序&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'down'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>销量降序&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> cups </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                { type: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, price: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, color: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'black'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, sales: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">3000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'牛客logo马克杯'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                { type: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, price: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">40</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, color: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'blue'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, sales: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'无盖星空杯'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                { type: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, price: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">60</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, color: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'green'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, sales: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'老式茶杯'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                { type: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, price: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, color: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'green'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, sales: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">600</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'欧式印花杯'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            ]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ul </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'ul'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> upbtn </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'.up'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> downbtn </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'.down'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">            // 补全代码</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">             function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ulRender</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                ul.innerHTML </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> cups.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =></span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> `&#x3C;li>${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">}&#x3C;/li>`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">''</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            upbtn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">onclick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                cups.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">sort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> a.sales </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> b.sales);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">                ulRender</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            downbtn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">onclick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                cups.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">sort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> b.sales </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> a.sales);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">                ulRender</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><h2 id="_5-10" tabindex="-1">5-10 <a class="header-anchor" href="#_5-10" aria-label="Permalink to &quot;5-10&quot;"></a></h2>
<h3 id="js模块编程题" tabindex="-1">JS模块编程题 <a class="header-anchor" href="#js模块编程题" aria-label="Permalink to &quot;JS模块编程题&quot;"></a></h3>
<h4 id="题目" tabindex="-1">题目： <a class="header-anchor" href="#题目" aria-label="Permalink to &quot;题目：&quot;"></a></h4>
<p>完成函数 createModule，调用之后满足如下要求：</p>
<p>1、返回一个对象</p>
<p>2、对象的 greeting 属性值等于 str1， name 属性值等于 str2</p>
<p>3、对象存在一个 sayIt 方法，该方法返回的字符串为 greeting属性值 + ', ' + name属性值</p>
<h4 id="题解" tabindex="-1">题解： <a class="header-anchor" href="#题解" aria-label="Permalink to &quot;题解：&quot;"></a></h4>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> createModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">str1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">str2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> res </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        greeting: str1,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        name: str2,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">sayIt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.greeting </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> ', '</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> res;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="_5-9" tabindex="-1">5-9 <a class="header-anchor" href="#_5-9" aria-label="Permalink to &quot;5-9&quot;"></a></h2>
<h3 id="computed-和-watch-的区别" tabindex="-1">computed 和 watch 的区别？ <a class="header-anchor" href="#computed-和-watch-的区别" aria-label="Permalink to &quot;computed 和 watch 的区别？&quot;"></a></h3>
<p><strong>computed：</strong> 是计算属性，依赖其它属性值，并且 computed 的值有缓存，只有它依赖的属性值发生改变，下一次获取 computed 的值时才会重新计算 computed  的值；</p>
<p><strong>watch：</strong> 更多的是「观察」的作用，类似于某些数据的监听回调 ，每当监听的数据变化时都会执行回调进行后续操作；</p>
<h2 id="_5-8" tabindex="-1">5-8 <a class="header-anchor" href="#_5-8" aria-label="Permalink to &quot;5-8&quot;"></a></h2>
<h3 id="webpack的构建流程" tabindex="-1">webpack的构建流程？ <a class="header-anchor" href="#webpack的构建流程" aria-label="Permalink to &quot;webpack的构建流程？&quot;"></a></h3>
<h4 id="_1、运行流程" tabindex="-1">1、运行流程 <a class="header-anchor" href="#_1、运行流程" aria-label="Permalink to &quot;1、运行流程&quot;"></a></h4>
<p><code>webpack</code> 的运行流程是一个串行的过程，它的工作流程就是将各个插件串联起来</p>
<p>在运行过程中会广播事件，插件只需要监听它所关心的事件，就能加入到这条<code>webpack</code>机制中，去改变<code>webpack</code>的运作，使得整个系统扩展性良好</p>
<p>从启动到结束会依次执行以下三大步骤：</p>
<ul>
<li>初始化流程：从配置文件和 <code>Shell</code> 语句中读取与合并参数，并初始化需要使用的插件和配置插件等执行环境所需要的参数</li>
<li>编译构建流程：从 Entry 发出，针对每个 Module 串行调用对应的 Loader 去翻译文件内容，再找到该 Module 依赖的 Module，递归地进行编译处理</li>
<li>输出流程：对编译后的 Module 组合成 Chunk，把 Chunk 转换成文件，输出到文件系统</li>
</ul>
<p><img src="https://static.vue-js.com/b566d400-a658-11eb-85f6-6fac77c0c9b3.png" alt="img"></p>
<h4 id="_2、初始化流程" tabindex="-1">2、初始化流程 <a class="header-anchor" href="#_2、初始化流程" aria-label="Permalink to &quot;2、初始化流程&quot;"></a></h4>
<p>从配置文件和 <code>Shell</code> 语句中读取与合并参数，得出最终的参数</p>
<p>配置文件默认下为<code>webpack.config.js</code>，也或者通过命令的形式指定配置文件，主要作用是用于激活<code>webpack</code>的加载项和插件</p>
<p><code>webpack</code> 将 <code>webpack.config.js</code> 中的各个配置项拷贝到 <code>options</code> 对象中，并加载用户配置的 <code>plugins</code></p>
<p>完成上述步骤之后，则开始初始化<code>Compiler</code>编译对象，该对象掌控者<code>webpack</code>声明周期，不执行具体的任务，只是进行一些调度工作</p>
<h4 id="_3、编译构建流程" tabindex="-1">3、编译构建流程 <a class="header-anchor" href="#_3、编译构建流程" aria-label="Permalink to &quot;3、编译构建流程&quot;"></a></h4>
<p>根据配置中的 <code>entry</code> 找出所有的入口文件</p>
<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  entry: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'./src/file.js'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>初始化完成后会调用<code>Compiler</code>的<code>run</code>来真正启动<code>webpack</code>编译构建流程，主要流程如下：</p>
<ul>
<li><code>compile</code> 开始编译</li>
<li><code>make</code> 从入口点分析模块及其依赖的模块，创建这些模块对象</li>
<li><code>build-module</code> 构建模块</li>
<li><code>seal</code> 封装构建结果</li>
<li><code>emit</code> 把各个chunk输出到结果文件</li>
</ul>
<h6 id="compile-编译" tabindex="-1">compile 编译 <a class="header-anchor" href="#compile-编译" aria-label="Permalink to &quot;compile 编译&quot;"></a></h6>
<p>执行了<code>run</code>方法后，首先会触发<code>compile</code>，主要是构建一个<code>Compilation</code>对象</p>
<p>该对象是编译阶段的主要执行者，主要会依次下述流程：执行模块创建、依赖收集、分块、打包等主要任务的对象</p>
<h6 id="make-编译模块" tabindex="-1">make 编译模块 <a class="header-anchor" href="#make-编译模块" aria-label="Permalink to &quot;make 编译模块&quot;"></a></h6>
<p>当完成了上述的<code>compilation</code>对象后，就开始从<code>Entry</code>入口文件开始读取，主要执行<code>_addModuleChain()</code>函数，如下：</p>
<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">_addModuleChain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(context, dependency, onModule, callback) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">   // 根据依赖查找对应的工厂函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">   const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> Dep</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"> /** </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">@type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> {DepConstructor}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"> */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (dependency.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">   const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> moduleFactory</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.dependencyFactories.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(Dep);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">   </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">   // 调用工厂函数NormalModuleFactory的create来生成一个空的NormalModule对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">   moduleFactory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">       dependencies: [dependency]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">   }, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">       const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> afterBuild</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">processModuleDependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">err</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">         if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (err) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(err);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">         callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">           });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">       </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">       this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">buildModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">err</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">           afterBuild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">       })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">   })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>过程如下：</p>
<p><code>_addModuleChain</code>中接收参数<code>dependency</code>传入的入口依赖，使用对应的工厂函数<code>NormalModuleFactory.create</code>方法生成一个空的<code>module</code>对象</p>
<p>回调中会把此<code>module</code>存入<code>compilation.modules</code>对象和<code>dependencies.module</code>对象中，由于是入口文件，也会存入<code>compilation.entries</code>中</p>
<p>随后执行<code>buildModule</code>进入真正的构建模块<code>module</code>内容的过程</p>
<h6 id="build-module-完成模块编译" tabindex="-1">build module 完成模块编译 <a class="header-anchor" href="#build-module-完成模块编译" aria-label="Permalink to &quot;build module 完成模块编译&quot;"></a></h6>
<p>这里主要调用配置的<code>loaders</code>，将我们的模块转成标准的<code>JS</code>模块</p>
<p>在用<code>Loader</code> 对一个模块转换完后，使用 <code>acorn</code> 解析转换后的内容，输出对应的抽象语法树（<code>AST</code>），以方便 <code>Webpack</code>后面对代码的分析</p>
<p>从配置的入口模块开始，分析其 <code>AST</code>，当遇到<code>require</code>等导入其它模块语句时，便将其加入到依赖的模块列表，同时对新找出的依赖模块递归分析，最终搞清所有模块的依赖关系</p>
<h4 id="_4、输出流程" tabindex="-1">4、输出流程 <a class="header-anchor" href="#_4、输出流程" aria-label="Permalink to &quot;4、输出流程&quot;"></a></h4>
<h6 id="seal-输出资源" tabindex="-1">seal 输出资源 <a class="header-anchor" href="#seal-输出资源" aria-label="Permalink to &quot;seal 输出资源&quot;"></a></h6>
<p><code>seal</code>方法主要是要生成<code>chunks</code>，对<code>chunks</code>进行一系列的优化操作，并生成要输出的代码</p>
<p><code>webpack</code> 中的 <code>chunk</code> ，可以理解为配置在 <code>entry</code> 中的模块，或者是动态引入的模块</p>
<p>根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 <code>Chunk</code>，再把每个 <code>Chunk</code> 转换成一个单独的文件加入到输出列表</p>
<h6 id="emit-输出完成" tabindex="-1">emit 输出完成 <a class="header-anchor" href="#emit-输出完成" aria-label="Permalink to &quot;emit 输出完成&quot;"></a></h6>
<p>在确定好输出内容后，根据配置确定输出的路径和文件名</p>
<p>在 <code>Compiler</code> 开始生成文件前，钩子 <code>emit</code> 会被执行，这是我们修改最终文件的最后一个机会</p>
<p>从而<code>webpack</code>整个打包过程则结束了</p>
<h2 id="_5-7" tabindex="-1">5-7 <a class="header-anchor" href="#_5-7" aria-label="Permalink to &quot;5-7&quot;"></a></h2>
<h3 id="bind、call、apply-区别" tabindex="-1">bind、call、apply 区别？ <a class="header-anchor" href="#bind、call、apply-区别" aria-label="Permalink to &quot;bind、call、apply 区别？&quot;"></a></h3>
<p><code>call</code>、<code>apply</code>、<code>bind</code>作用是改变函数执行时的上下文，简而言之就是改变函数运行时的<code>this</code>指向</p>
<h4 id="apply" tabindex="-1">apply <a class="header-anchor" href="#apply" aria-label="Permalink to &quot;apply&quot;"></a></h4>
<p><code>apply</code>接受两个参数，第一个参数是<code>this</code>的指向，第二个参数是函数接受的参数，以数组的形式传入</p>
<p>改变<code>this</code>指向后原函数会立即执行，且此方法只是临时改变<code>this</code>指向一次</p>
<h4 id="call" tabindex="-1">call <a class="header-anchor" href="#call" aria-label="Permalink to &quot;call&quot;"></a></h4>
<p><code>call</code>方法的第一个参数也是<code>this</code>的指向，后面传入的是一个参数列表</p>
<p>跟<code>apply</code>一样，改变<code>this</code>指向后原函数会立即执行，且此方法只是临时改变<code>this</code>指向一次</p>
<h4 id="bind" tabindex="-1">bind <a class="header-anchor" href="#bind" aria-label="Permalink to &quot;bind&quot;"></a></h4>
<p>bind方法和call很相似，第一参数也是<code>this</code>的指向，后面传入的也是一个参数列表(但是这个参数列表可以分多次传入)</p>
<p>改变<code>this</code>指向后不会立即执行，而是返回一个永久改变<code>this</code>指向的函数</p>
<blockquote>
<p>从上面可以看到，<code>apply</code>、<code>call</code>、<code>bind</code>三者的区别在于：</p>
<ul>
<li>三者都可以改变函数的<code>this</code>对象指向</li>
<li>三者第一个参数都是<code>this</code>要指向的对象，如果如果没有这个参数或参数为<code>undefined</code>或<code>null</code>，则默认指向全局<code>window</code></li>
<li>三者都可以传参，但是<code>apply</code>是数组，而<code>call</code>是参数列表，且<code>apply</code>和<code>call</code>是一次性传入参数，而<code>bind</code>可以分为多次传入</li>
<li><code>bind</code>是返回绑定this之后的函数，<code>apply</code>、<code>call</code> 则是立即执行</li>
</ul>
</blockquote>
<h2 id="_5-6" tabindex="-1">5-6 <a class="header-anchor" href="#_5-6" aria-label="Permalink to &quot;5-6&quot;"></a></h2>
<h3 id="如何理解this对象" tabindex="-1">如何理解this对象？ <a class="header-anchor" href="#如何理解this对象" aria-label="Permalink to &quot;如何理解this对象？&quot;"></a></h3>
<p>函数的 <code>this</code> 关键字在 <code>JavaScript</code> 中的表现略有不同，此外，在严格模式和非严格模式之间也会有一些差别</p>
<p>在绝大多数情况下，函数的调用方式决定了 <code>this</code> 的值（运行时绑定）</p>
<p><code>this</code> 关键字是函数运行时自动生成的一个内部对象，只能在函数内部使用，总指向调用它的对象；同时，<code>this</code>在函数执行过程中，<code>this</code>一旦被确定了，就不可以再更改</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> baz</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 当前调用栈是：baz</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 因此，当前调用位置是全局作用域</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"baz"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> );</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// &#x3C;-- bar的调用位置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 当前调用栈是：baz --> bar</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 因此，当前调用位置在baz中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"bar"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> );</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// &#x3C;-- foo的调用位置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 当前调用栈是：baz --> bar --> foo</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 因此，当前调用位置在bar中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"foo"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">baz</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// &#x3C;-- baz的调用位置</span></span></code></pre>
</div><h4 id="绑定规则" tabindex="-1">绑定规则： <a class="header-anchor" href="#绑定规则" aria-label="Permalink to &quot;绑定规则：&quot;"></a></h4>
<p>根据不同的使用场合，<code>this</code>有不同的值，主要分为下面几种情况：</p>
<ul>
<li>
<p><strong>默认绑定</strong></p>
<blockquote>
<p>严格模式下，不能将全局对象用于默认绑定，this会绑定到<code>undefined</code>，只有函数运行在非严格模式下，默认绑定才能绑定到全局对象</p>
</blockquote>
</li>
<li>
<p><strong>隐式绑定</strong></p>
<p>函数还可以作为某个对象的方法调用，这时<code>this</code>就指这个上级对象</p>
<p>特殊情况：</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> o </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    a:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    b:{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        a:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">        fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.a); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">//undefined</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">//window</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> o.b.fn;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">j</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span></code></pre>
</div><p>此时<code>this</code>指向的是<code>window</code>，这里的大家需要记住，<code>this</code>永远指向的是最后调用它的对象，虽然<code>fn</code>是对象<code>b</code>的方法，但是<code>fn</code>赋值给<code>j</code>时候并没有执行，所以最终指向<code>window</code></p>
</li>
<li>
<p><strong>new绑定</strong></p>
<p>通过构建函数<code>new</code>关键字生成一个实例对象，此时<code>this</code>指向这个实例对象</p>
</li>
<li>
<p><strong>显示绑定</strong></p>
<p><code>apply()、call()、bind()</code>是函数的一个方法，作用是改变函数的调用对象。它的第一个参数就表示改变后的调用这个函数的对象。因此，这时<code>this</code>指的就是这第一个参数</p>
</li>
</ul>
<h2 id="_5-5" tabindex="-1">5-5 <a class="header-anchor" href="#_5-5" aria-label="Permalink to &quot;5-5&quot;"></a></h2>
<h3 id="如何理解闭包" tabindex="-1">如何理解闭包？ <a class="header-anchor" href="#如何理解闭包" aria-label="Permalink to &quot;如何理解闭包？&quot;"></a></h3>
<p>一个函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起（或者说函数被引用包围），这样的组合就是闭包（closure）</p>
<p>也就是说，闭包让你可以在一个内层函数中访问到其外层函数的作用域</p>
<p>在 <code>JavaScript</code>中，每当创建一个函数，闭包就会在函数创建的同时被创建出来，作为函数内部与外部连接起来的一座桥梁</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "Mozilla"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// name 是一个被 init 创建的局部变量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> displayName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// displayName() 是内部函数，一个闭包</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">        alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(name); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 使用了父函数中声明的变量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    displayName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span></code></pre>
</div><p><code>displayName()</code> 没有自己的局部变量。然而，由于闭包的特性，它可以访问到外部函数的变量</p>
<h2 id="_5-4" tabindex="-1">5-4 <a class="header-anchor" href="#_5-4" aria-label="Permalink to &quot;5-4&quot;"></a></h2>
<h3 id="深拷贝浅拷贝的区别" tabindex="-1">深拷贝浅拷贝的区别？ <a class="header-anchor" href="#深拷贝浅拷贝的区别" aria-label="Permalink to &quot;深拷贝浅拷贝的区别？&quot;"></a></h3>
<h4 id="_1、浅拷贝" tabindex="-1">1、浅拷贝 <a class="header-anchor" href="#_1、浅拷贝" aria-label="Permalink to &quot;1、浅拷贝&quot;"></a></h4>
<p>浅拷贝，指的是创建新的数据，这个数据有着原始数据属性值的一份精确拷贝</p>
<p>如果属性是基本类型，拷贝的就是基本类型的值。如果属性是引用类型，拷贝的就是内存地址</p>
<p>即浅拷贝是拷贝一层，深层次的引用类型则共享内存地址</p>
<p>在<code>JavaScript</code>中，存在浅拷贝的现象有：</p>
<ul>
<li><code>Object.assign</code></li>
<li><code>Array.prototype.slice()</code>, <code>Array.prototype.concat()</code></li>
<li>使用拓展运算符实现的复制</li>
</ul>
<h4 id="_2、深拷贝" tabindex="-1">2、深拷贝 <a class="header-anchor" href="#_2、深拷贝" aria-label="Permalink to &quot;2、深拷贝&quot;"></a></h4>
<p>深拷贝开辟一个新的栈，两个对象属完成相同，但是对应两个不同的地址，修改一个对象的属性，不会改变另一个对象的属性</p>
<p>常见的深拷贝方式有：</p>
<ul>
<li>_.cloneDeep()</li>
<li>jQuery.extend()</li>
<li>JSON.stringify()</li>
<li>手写循环递归</li>
</ul>
<h4 id="_3、区别" tabindex="-1">3、区别 <a class="header-anchor" href="#_3、区别" aria-label="Permalink to &quot;3、区别&quot;"></a></h4>
<p><img src="https://static.vue-js.com/d9862c00-69b8-11eb-ab90-d9ae814b240d.png" alt="img"></p>
<p>浅拷贝和深拷贝都创建出一个新的对象，但在复制对象属性的时候，行为就不一样</p>
<p>浅拷贝只复制属性指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存，修改对象属性会影响原对象；但深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象</p>
<blockquote>
<ul>
<li>浅拷贝是拷贝一层，属性为对象时，浅拷贝是复制，两个对象指向同一个地址</li>
<li>深拷贝是递归拷贝深层次，属性为对象时，深拷贝是新开栈，两个对象指向不同的地址</li>
</ul>
</blockquote>
<h2 id="_5-3" tabindex="-1">5-3 <a class="header-anchor" href="#_5-3" aria-label="Permalink to &quot;5-3&quot;"></a></h2>
<h3 id="vue3中treeshaking特性" tabindex="-1">Vue3中Treeshaking特性？ <a class="header-anchor" href="#vue3中treeshaking特性" aria-label="Permalink to &quot;Vue3中Treeshaking特性？&quot;"></a></h3>
<p><code>Tree shaking</code> 是一种通过清除多余代码方式来优化项目打包体积的技术，专业术语叫 <code>Dead code elimination</code></p>
<p>简单来讲，就是在保持代码运行结果不变的前提下，去除无用的代码</p>
<p>如果把代码打包比作制作蛋糕，传统的方式是把鸡蛋（带壳）全部丢进去搅拌，然后放入烤箱，最后把（没有用的）蛋壳全部挑选并剔除出去</p>
<p>而<code>treeshaking</code>则是一开始就把有用的蛋白蛋黄（import）放入搅拌，最后直接作出蛋糕。也就是说 ，<code>tree shaking</code> 其实是找出使用的代码</p>
<p><code>Tree shaking</code>是基于<code>ES6</code>模板语法（<code>import</code>与<code>exports</code>），主要是借助<code>ES6</code>模块的静态编译思想，在编译时就能确定模块的依赖关系，以及输入和输出的变量</p>
<p><code>Tree shaking</code>无非就是做了两件事：</p>
<ul>
<li>编译阶段利用<code>ES6 Module</code>判断哪些模块已经加载</li>
<li>判断那些模块和变量未被使用或者引用，进而删除对应代码</li>
</ul>
<blockquote>
<p>通过<code>Tree shaking</code>，<code>Vue3</code>给我们带来的好处是：</p>
<ul>
<li>减少程序体积（更小）</li>
<li>减少程序执行时间（更快）</li>
<li>便于将来对程序架构进行优化（更友好）</li>
</ul>
</blockquote>
<h2 id="_5-2" tabindex="-1">5-2 <a class="header-anchor" href="#_5-2" aria-label="Permalink to &quot;5-2&quot;"></a></h2>
<h3 id="ssr解决了什么问题" tabindex="-1">SSR解决了什么问题？ <a class="header-anchor" href="#ssr解决了什么问题" aria-label="Permalink to &quot;SSR解决了什么问题？&quot;"></a></h3>
<p>SSR主要解决了以下两种问题：</p>
<ul>
<li>seo：搜索引擎优先爬取页面<code>HTML</code>结构，使用<code>ssr</code>时，服务端已经生成了和业务想关联的<code>HTML</code>，有利于<code>seo</code></li>
<li>首屏呈现渲染：用户无需等待页面所有<code>js</code>加载完成就可以看到页面视图（压力来到了服务器，所以需要权衡哪些用服务端渲染，哪些交给客户端）</li>
</ul>
<p>但是使用<code>SSR</code>同样存在以下的缺点：</p>
<ul>
<li>复杂度：整个项目的复杂度</li>
<li>库的支持性，代码兼容</li>
<li>性能问题
<ul>
<li>每个请求都是<code>n</code>个实例的创建，不然会污染，消耗会变得很大</li>
<li>缓存 <code>node serve</code>、 <code>nginx</code>判断当前用户有没有过期，如果没过期的话就缓存，用刚刚的结果。</li>
<li>降级：监控<code>cpu</code>、内存占用过多，就<code>spa</code>，返回单个的壳</li>
</ul>
</li>
<li>服务器负载变大，相对于前后端分离服务器只需要提供静态资源来说，服务器负载更大，所以要慎重使用</li>
</ul>
<p>所以在我们选择是否使用<code>SSR</code>前，我们需要慎重问问自己这些问题：</p>
<ol>
<li>需要<code>SEO</code>的页面是否只是少数几个，这些是否可以使用预渲染（Prerender SPA Plugin）实现</li>
<li>首屏的请求响应逻辑是否复杂，数据返回是否大量且缓慢</li>
</ol>
<h2 id="_5-1" tabindex="-1">5-1 <a class="header-anchor" href="#_5-1" aria-label="Permalink to &quot;5-1&quot;"></a></h2>
<h3 id="ssr是什么" tabindex="-1">SSR是什么？ <a class="header-anchor" href="#ssr是什么" aria-label="Permalink to &quot;SSR是什么？&quot;"></a></h3>
<p><code>Server-Side Rendering</code> 我们称其为SSR，意为服务端渲染</p>
<p>由服务侧完成页面的 HTML 结构拼接的页面处理技术，发送到浏览器，然后为其绑定状态与事件，成为完全可交互页面的过程</p>
<p>web的3个阶段的发展史：</p>
<ul>
<li>传统服务端渲染SSR
网页内容在服务端渲染完成，⼀次性传输到浏览器
打开页面查看源码，浏览器拿到的是全部的dom结构</li>
<li>单页面应用SPA
单页应用优秀的用户体验，使其逐渐成为主流，页面内容由JS渲染出来，这种方式称为客户端渲染
打开页面查看源码，浏览器拿到的仅有宿主元素#app，并没有内容</li>
<li>服务端渲染SSR
SSR解决方案，后端渲染出完整的首屏的dom结构返回，前端拿到的内容包括首屏及完整spa结构，应用激活后依然按照spa方式运行</li>
</ul>
<blockquote>
<p>Vue SSR是一个在SPA上进行改良的服务端渲染
通过Vue SSR渲染的页面，需要在客户端激活才能实现交互
Vue SSR将包含两部分：服务端渲染的首屏，包含交互的SPA</p>
</blockquote>
]]></content:encoded>
            <enclosure url="https://user-images.githubusercontent.com/19986739/153329224-c2120a5d-4f25-4659-9347-d6217d5a5ce8.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[每日一题 - 202406]]></title>
            <link>https://www.imufeng.cn/interview/question-by-day/2024/6.html</link>
            <guid>https://www.imufeng.cn/interview/question-by-day/2024/6.html</guid>
            <pubDate>Sat, 05 Oct 2024 12:44:16 GMT</pubDate>
            <description><![CDATA[每日一题 - 202406
 6-30
 十万内数字转中文
 题目描述
比如数字`12345`，我们转化为`一万二千三百四十五`。 比如数字`10002`，我们转化为`一万零二`。（数字在10万以内）]]></description>
            <content:encoded><![CDATA[<h1 id="每日一题-202406" tabindex="-1">每日一题 - 202406 <a class="header-anchor" href="#每日一题-202406" aria-label="Permalink to &quot;每日一题 - 202406&quot;"></a></h1>
<h2 id="_6-30" tabindex="-1">6-30 <a class="header-anchor" href="#_6-30" aria-label="Permalink to &quot;6-30&quot;"></a></h2>
<h3 id="十万内数字转中文" tabindex="-1">十万内数字转中文 <a class="header-anchor" href="#十万内数字转中文" aria-label="Permalink to &quot;十万内数字转中文&quot;"></a></h3>
<h4 id="题目描述" tabindex="-1">题目描述 <a class="header-anchor" href="#题目描述" aria-label="Permalink to &quot;题目描述&quot;"></a></h4>
<p>比如数字<code>12345</code>，我们转化为<code>一万二千三百四十五</code>。 比如数字<code>10002</code>，我们转化为<code>一万零二</code>。（数字在10万以内）</p>
<h4 id="代码" tabindex="-1">代码 <a class="header-anchor" href="#代码" aria-label="Permalink to &quot;代码&quot;"></a></h4>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> numToChinese</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">num</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> numStr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(num);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> numMapper</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">    "零"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">    "一"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">    "二"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">    "三"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">    "四"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">    "五"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">    "六"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">    "七"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">    "八"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">    "九"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  ];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> unitMapper</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [, , </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"十"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"百"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"千"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"万"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> res </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> ""</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> numStr.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> chNum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      numStr[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "0"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> &#x26;&#x26;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> res[res.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "零"</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        ?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> ""</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        :</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> numMapper[numStr[i]];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> unit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> numStr[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "0"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> ?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> ""</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> unitMapper[numStr.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">||</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> ""</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    res </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> res </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> chNum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> unit;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> res[res.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "零"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> ?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> res;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="_6-29" tabindex="-1">6-29 <a class="header-anchor" href="#_6-29" aria-label="Permalink to &quot;6-29&quot;"></a></h2>
<h3 id="无序不相等数组中-选取-n-个数-使其和为-m" tabindex="-1">无序不相等数组中，选取 N 个数，使其和为 M <a class="header-anchor" href="#无序不相等数组中-选取-n-个数-使其和为-m" aria-label="Permalink to &quot;无序不相等数组中，选取 N 个数，使其和为 M&quot;"></a></h3>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">reduce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">acc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">cur</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> acc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> cur, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> backtrack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">tempList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 如果不限定每个数字只能使用一次, 下面增加一行代码 if (tempList.length > list.length) return;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(tempList) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">([</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">tempList]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> start; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> list.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    tempList.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(list[i]);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 如果不限定每个数字只能使用一次, 下面代码改为backtrack(list, res, tempList, T, i);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    backtrack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(list, res, tempList, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    tempList.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">pop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 从一个无序，不相等的数组中，选取N个数，使其和为M实现算法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> nSum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [];</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  backtrack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(list, res, [], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> res;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> nSum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(r);</span></span></code></pre>
</div><h2 id="_6-28" tabindex="-1">6-28 <a class="header-anchor" href="#_6-28" aria-label="Permalink to &quot;6-28&quot;"></a></h2>
<h3 id="拍平数组" tabindex="-1">拍平数组 <a class="header-anchor" href="#拍平数组" aria-label="Permalink to &quot;拍平数组&quot;"></a></h3>
<h4 id="题目描述-1" tabindex="-1">题目描述 <a class="header-anchor" href="#题目描述-1" aria-label="Permalink to &quot;题目描述&quot;"></a></h4>
<p>最新的ES规范其实也加入了这个方法，功能是将一个数组压平，比如<code>[1, 2, [3, [4, 5, [6, [7, 8]]]]]</code>, 会被处理成<code>[1, 2, 3, 4, 5, 6, 7, 8]</code>。</p>
<p>更进一步，实现可以压平指定深度的数组。</p>
<h4 id="代码-1" tabindex="-1">代码 <a class="header-anchor" href="#代码-1" aria-label="Permalink to &quot;代码&quot;"></a></h4>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> flatten</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (list.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> head</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> list[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (head </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    list[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> flatten</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(head);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    list[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [list[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> list[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">concat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">flatten</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> flattenDepth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (list.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> list;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> head</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> list[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (head </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    list[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> flattenDepth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(head, n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    list[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [list[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> list[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">concat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">flattenDepth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">), n));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// test</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> flatten</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]]]]]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(a);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> flattenDepth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]]]]], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(b);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> flattenDepth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]]]]], Number.MAX_VALUE);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(c);</span></span></code></pre>
</div><h2 id="_6-27" tabindex="-1">6-27 <a class="header-anchor" href="#_6-27" aria-label="Permalink to &quot;6-27&quot;"></a></h2>
<h3 id="剪枝叶" tabindex="-1">剪枝叶 <a class="header-anchor" href="#剪枝叶" aria-label="Permalink to &quot;剪枝叶&quot;"></a></h3>
<h4 id="题目描述-2" tabindex="-1">题目描述 <a class="header-anchor" href="#题目描述-2" aria-label="Permalink to &quot;题目描述&quot;"></a></h4>
<p>有一条马路，马路上有很多树，树的高度不一。现在要统一剪树，剪到高度为 h。 意思就是，比 h 高的树都剪到 h，比 h 低的树高度不变。所有的树剪掉的总长度为 C。 现在要使 C&gt;某个值的情况下(假设为 MM)，使 h 最大。问怎么确定 h？</p>
<h4 id="代码-2" tabindex="-1">代码 <a class="header-anchor" href="#代码-2" aria-label="Permalink to &quot;代码&quot;"></a></h4>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> cutTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">MM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (list.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> start </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> end </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">list);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (start </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> end) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> mid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> start </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ((end </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> start) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">>></span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> res </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> list.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (list[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> mid) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        res </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> res </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> list[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> mid;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (res </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> MM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (res </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> MM</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> &#x3C;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> range) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> mid;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      end </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> mid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> range;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      start </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> mid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> range;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> cutTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> cutTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> cutTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(a, b, c);</span></span></code></pre>
</div><h2 id="_6-26" tabindex="-1">6-26 <a class="header-anchor" href="#_6-26" aria-label="Permalink to &quot;6-26&quot;"></a></h2>
<h3 id="大数相加" tabindex="-1">大数相加 <a class="header-anchor" href="#大数相加" aria-label="Permalink to &quot;大数相加&quot;"></a></h3>
<h4 id="题目描述-3" tabindex="-1">题目描述 <a class="header-anchor" href="#题目描述-3" aria-label="Permalink to &quot;题目描述&quot;"></a></h4>
<p>如何实现两个非常大的数字(已经超出了Number范围)的加法运算。</p>
<h4 id="思路" tabindex="-1">思路 <a class="header-anchor" href="#思路" aria-label="Permalink to &quot;思路&quot;"></a></h4>
<p>将两个数字前面补0至相同的长度，然后从低位到高位进行相加， 同时用一个变量记录进位的信息即可。</p>
<h4 id="代码-3" tabindex="-1">代码 <a class="header-anchor" href="#代码-3" aria-label="Permalink to &quot;代码&quot;"></a></h4>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> bigNumberSum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 123456789</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 000009876</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // padding</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> cur </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (cur </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> a.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> cur </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> b.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">a[cur]) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "0"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> a;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">b[cur]) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "0"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> b;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    cur</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> carried </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> a.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> sum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> carried </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">a[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">b[i];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      carried </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      carried </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    res[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">%</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (carried </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">unshift</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">""</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="_6-25" tabindex="-1">6-25 <a class="header-anchor" href="#_6-25" aria-label="Permalink to &quot;6-25&quot;"></a></h2>
<h3 id="日期格式化" tabindex="-1">日期格式化 <a class="header-anchor" href="#日期格式化" aria-label="Permalink to &quot;日期格式化&quot;"></a></h3>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> parseTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">pattern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">arguments</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> ||</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">time) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> format</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> pattern </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">||</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> '{y}-{m}-{d} {h}:{i}:{s}'</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> date</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> time </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'object'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    date </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> time</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ((</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> time </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'string'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x26;&#x26;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">[0-9]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(time))) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      time </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> parseInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(time)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> time </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'string'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      time </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> time.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> RegExp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">gm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">), </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'/'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'T'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">' '</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> RegExp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold">\.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">[\d]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">{3}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">gm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">), </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">''</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ((</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> time </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'number'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x26;&#x26;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (time.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">().</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      time </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> time </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    date </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(time)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> formatObj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    y: date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getFullYear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    m: date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getMonth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    d: date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getDate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    h: date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getHours</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    i: date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getMinutes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    s: date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getSeconds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    a: date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getDay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> time_str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> format.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF">{(y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF">m</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF">d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF">h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF">i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF">s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF">a)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> formatObj[key]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // Note: getDay() returns 0 on Sunday</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'a'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'日'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'一'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'二'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'三'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'四'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'五'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'六'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">][value] }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (result.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> ></span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> &#x26;&#x26;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> '0'</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">||</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  })</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> time_str</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="_6-24" tabindex="-1">6-24 <a class="header-anchor" href="#_6-24" aria-label="Permalink to &quot;6-24&quot;"></a></h2>
<h3 id="什么是限流-常见的限流算法有哪些" tabindex="-1">什么是限流？常见的限流算法有哪些？ <a class="header-anchor" href="#什么是限流-常见的限流算法有哪些" aria-label="Permalink to &quot;什么是限流？常见的限流算法有哪些？&quot;"></a></h3>
<p>限流是一种控制流量的技术，保护系统免受突发流量的影响。基本原理是控制请求的速率或数量，确保系统在可承受的范围内运行。</p>
<p>常见的限流算法有：</p>
<p>（1）漏桶算法：系统请求先进入漏桶，再从漏桶中逐一取出请求执行，控制漏桶的流量。</p>
<p>（2）令牌桶算法：系统请求会得到一个令牌，从令牌桶中取出一个令牌执行，控制令牌桶中令牌的数量。</p>
<p>（3）计数器算法：系统请求被计数，通过比较当前请求数与限流阈值来判断是否限流。</p>
<p>（4）滑动窗口：基于一个固定大小的时间窗口，允许在该时间窗口内的请求数不超过设定的阈值。这个时间窗口随着时间的推移不断滑动，以适应不同时间段内的请求流量。</p>
<h2 id="_6-23" tabindex="-1">6-23 <a class="header-anchor" href="#_6-23" aria-label="Permalink to &quot;6-23&quot;"></a></h2>
<h3 id="js常用的十个高阶函数" tabindex="-1">JS常用的十个高阶函数 <a class="header-anchor" href="#js常用的十个高阶函数" aria-label="Permalink to &quot;JS常用的十个高阶函数&quot;"></a></h3>
<blockquote>
<p>高阶函数是对其他函数进行操作的函数，可以将它们作为参数或返回它们。</p>
<p>简单来说，高阶函数是一个函数，它接收函数作为参数或将函数作为输出返回。</p>
</blockquote>
<ol>
<li>
<h4 id="map" tabindex="-1">map <a class="header-anchor" href="#map" aria-label="Permalink to &quot;map&quot;"></a></h4>
</li>
</ol>
<ul>
<li>
<p><code>map()</code>返回一个新的数组，数组中的元素为原始数组调用函数处理后的值。</p>
</li>
<li>
<p><code>map()</code>不会对空数组进行检测。</p>
</li>
<li>
<p><code>map()</code>不会改变原始数组。</p>
</li>
</ul>
<p>传递给 <code>map()</code> 方法的回调函数接受 <strong>3</strong> 个参数：<code>currentValue</code>，<code>index</code> 和 <code>array</code>。</p>
<ol>
<li>
<p><code>currentValue</code>：<strong>必须</strong>。当前元素的的值。</p>
</li>
<li>
<p><code>index</code>：<strong>可选</strong>。当前元素的索引。</p>
</li>
<li>
<p><code>arr</code>：<strong>可选</strong>。当前元素属于的数组对象。</p>
</li>
</ol>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">45</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">65</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">150</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">70</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">40</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> newArr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> arr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(newArr)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// [20, 40, 90, 100, 130, 300, 140, 80]</span></span></code></pre>
</div><ol start="2">
<li>
<h4 id="filter" tabindex="-1">filter <a class="header-anchor" href="#filter" aria-label="Permalink to &quot;filter&quot;"></a></h4>
</li>
</ol>
<ul>
<li>
<p><code>filter()</code>方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。</p>
</li>
<li>
<p><code>filter()</code>不会对空数组进行检测。</p>
</li>
<li>
<p><code>filter()</code>不会改变原始数组。</p>
</li>
</ul>
<p>传递给 <code>filter()</code> 方法的回调函数接受 <strong>3</strong> 个参数：<code>currentValue</code>，<code>index</code> 和 <code>array</code>。</p>
<ol>
<li>
<p><code>currentValue</code>：<strong>必须</strong>。当前元素的的值。</p>
</li>
<li>
<p><code>index</code>：<strong>可选</strong>。当前元素的索引。</p>
</li>
<li>
<p><code>arr</code>：<strong>可选</strong>。当前元素属于的数组对象。</p>
</li>
</ol>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">40</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">90</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">130</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">140</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> newArr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> arr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">         return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(newArr);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">//[20, 40, 90, 80]</span></span></code></pre>
</div><ol start="3">
<li>
<h4 id="foreach" tabindex="-1">forEach <a class="header-anchor" href="#foreach" aria-label="Permalink to &quot;forEach&quot;"></a></h4>
</li>
</ol>
<ul>
<li>
<p><code>forEach()</code>方法类似于 <code>map()</code>，传入的函数不需要返回值,并将元素传递给回调函数。</p>
</li>
<li>
<p><code>forEach()</code> 对于空数组是不会执行回调函数的。</p>
</li>
<li>
<p><code>forEach()</code>不会返回新的数组,总是返回undefined.</p>
</li>
</ul>
<p>传递给 <code>forEach()</code> 方法的回调函数接受 <strong>3</strong> 个参数：<code>currentValue</code>，<code>index</code> 和 <code>array</code>。</p>
<ol>
<li>
<p><code>currentValue</code>：<strong>必须</strong>。当前元素的的值。</p>
</li>
<li>
<p><code>index</code>：<strong>可选</strong>。当前元素的索引。</p>
</li>
<li>
<p><code>arr</code>：<strong>可选</strong>。当前元素属于的数组对象。</p>
</li>
</ol>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">40</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">90</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> newArr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> arr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(item,index);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    });</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    //20 0</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    //40 1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    //90 2</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    //100 3</span></span></code></pre>
</div><ol start="4">
<li>
<h4 id="sort" tabindex="-1">sort <a class="header-anchor" href="#sort" aria-label="Permalink to &quot;sort&quot;"></a></h4>
</li>
</ol>
<ul>
<li>
<p><code>sort()</code>方法用于对数组的元素进行排序。</p>
</li>
<li>
<p><code>sort()</code>会修改原数组。</p>
</li>
</ul>
<p><code>sort()</code> 方法接受一个可选参数,用来规定排序顺序,必须是函数。如果没有传递参数, <code>sort()</code> 方法默认把所有元素先转换为 <code>String</code> 再排序 ,根据 <code>ASCII</code> 码进行排序。
如果想按照其他标准进行排序，就需要提供比较函数，该函数要比较两个值，然后返回一个用于说明这两个值的相对顺序的数字。比较函数应该具有两个参数 <strong>a</strong> 和 <strong>b</strong>，其返回值如下：</p>
<ul>
<li>
<p>若 <code>a</code> 小于 <code>b</code>，在排序后的数组中 <code>a</code> 应该出现在 <code>b</code> 之前，则返回一个小于 <code>0</code> 的值。</p>
</li>
<li>
<p>若 <code>a</code> 等于 <code>b</code>，则返回 <code>0</code>。</p>
</li>
<li>
<p>若 <code>a</code> 大于 <code>b</code>，则返回一个大于 <code>0</code> 的值。</p>
</li>
</ul>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    //从小到大排序</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    arr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">sort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> y) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> y) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(arr); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// [1, 2, 10, 20]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    //从大到小排序</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    arr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">sort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> y) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> y) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// [20, 10, 2, 1]</span></span></code></pre>
</div><ol start="5">
<li>
<h4 id="some" tabindex="-1">some <a class="header-anchor" href="#some" aria-label="Permalink to &quot;some&quot;"></a></h4>
</li>
</ol>
<ul>
<li>
<p><code>some()</code> 方法用于检测数组中的元素是否满足指定条件。</p>
</li>
<li>
<p><code>some()</code> 方法会依次执行数组的每个元素。</p>
</li>
<li>
<p>如果有一个元素满足条件，则表达式返回 <code>true</code>, 剩余的元素不会再执行检测。</p>
</li>
<li>
<p>如果没有满足条件的元素，则返回 <code>false</code> 。</p>
</li>
<li>
<p><code>some()</code>不会对空数组进行检测。</p>
</li>
<li>
<p><code>some()</code>不会改变原始数组。</p>
</li>
</ul>
<p>传递给 <code>some() </code>方法的回调函数接受 <strong>3</strong> 个参数：<code>currentValue</code>，<code>index</code> 和 <code>array</code>。</p>
<ol>
<li>
<p><code>currentValue</code>：<strong>必须</strong>。当前元素的的值。</p>
</li>
<li>
<p><code>index</code>：<strong>可选</strong>。当前元素的索引。</p>
</li>
<li>
<p><code>arr</code>：<strong>可选</strong>。当前元素属于的数组对象。</p>
</li>
</ol>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> arr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(result);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">//true</span></span></code></pre>
</div><ol start="6">
<li>
<h4 id="every" tabindex="-1">every <a class="header-anchor" href="#every" aria-label="Permalink to &quot;every&quot;"></a></h4>
</li>
</ol>
<ul>
<li>
<p><code>every()</code> 方法用于检测数组所有元素是否都符合指定条件。</p>
</li>
<li>
<p><code>every()</code> 方法会依次执行数组的每个元素。</p>
</li>
<li>
<p>如果数组中检测到有一个元素不满足，则整个表达式返回 <code>false</code> ，且剩余的元素不会再进行检测。</p>
</li>
<li>
<p>如果所有元素都满足条件，则返回 <code>true</code>。</p>
</li>
<li>
<p><code>every()</code>不会对空数组进行检测。</p>
</li>
<li>
<p><code>every()</code>不会改变原始数组。</p>
</li>
</ul>
<p>传递给 <code>every()</code> 方法的回调函数接受 <strong>3</strong> 个参数：<code>currentValue</code>，<code>index</code> 和 <code>array</code>。</p>
<ol>
<li>
<p><code>currentValue</code>：<strong>必须</strong>。当前元素的的值。</p>
</li>
<li>
<p><code>index</code>：<strong>可选</strong>。当前元素的索引。</p>
</li>
<li>
<p><code>arr</code>：<strong>可选</strong>。当前元素属于的数组对象。</p>
</li>
</ol>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">51</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">82</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> arr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">every</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">       return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(result);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">//true</span></span></code></pre>
</div><ol start="7">
<li>
<h4 id="reduce" tabindex="-1">reduce <a class="header-anchor" href="#reduce" aria-label="Permalink to &quot;reduce&quot;"></a></h4>
</li>
</ol>
<ul>
<li>
<p><code>reduce()</code> 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。</p>
</li>
<li>
<p><code>reduce()</code>对于空数组是不会执行回调函数的。</p>
</li>
</ul>
<p><code>reduce</code> 方法接收两个参数: <code>回调函数</code>，<code>一个可选的 </code>initialValue<code> (初始值)</code>。</p>
<blockquote>
<p>如果不传第二个参数 <code>initialValue</code>，则函数的第一次执行会将数组中的第一个元素作为 <code>prev</code> 参数返回。</p>
</blockquote>
<p>传递给 <code>reduce()</code> 方法的回调函数接受 <strong>4</strong> 个参数：<code>prev</code>, <code>current</code>, <code>currentIndex</code>, <code>arr</code>。</p>
<ol>
<li>
<p><code>prev</code>：<strong>必须</strong>。函数传进来的初始值或上一次回调的返回值。</p>
</li>
<li>
<p><code>current</code>：<strong>必须</strong>。数组中当前处理的元素值。</p>
</li>
<li>
<p><code>currentIndex</code>：<strong>可选</strong>。当前元素索引。</p>
</li>
<li>
<p><code>arr</code>：<strong>可选</strong>。当前元素所属的数组本身。</p>
</li>
</ol>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> arr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">reduce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">prev</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">current</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">       return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> prev </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> current;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(sum); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">//55</span></span></code></pre>
</div><ol start="8">
<li>
<h4 id="reduceright" tabindex="-1">reduceRight <a class="header-anchor" href="#reduceright" aria-label="Permalink to &quot;reduceRight&quot;"></a></h4>
</li>
</ol>
<p><code>reduceRight()</code> 方法的功能和 <code>reduce()</code> 功能是一样的，不同的是 <code>reduceRight()</code> 从数组的末尾向前将数组中的数组项做累加。
9. #### find</p>
<ul>
<li>
<p><code>find()</code>方法用于查找符合条件的第一个元素，如果找到了，返回这个元素，否则，返回<code>undefined</code>。</p>
</li>
<li>
<p><code>find()</code>不会对空数组进行检测。</p>
</li>
<li>
<p><code>find()</code>不会改变原始数组。</p>
</li>
</ul>
<p>传递给 <code>find()</code> 方法的回调函数接受 <strong>3</strong> 个参数：<code>currentValue</code>，<code>index</code> 和 <code>array</code>。</p>
<ol>
<li>
<p><code>currentValue</code>：<strong>必须</strong>。当前元素的的值。</p>
</li>
<li>
<p><code>index</code>：<strong>可选</strong>。当前元素的索引。</p>
</li>
<li>
<p><code>arr</code>：<strong>可选</strong>。当前元素属于的数组对象。</p>
</li>
</ol>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">     let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">51</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">82</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">     let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> arr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">find</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">       return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">     }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">     console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(result);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">//51</span></span></code></pre>
</div><ol start="10">
<li>
<h4 id="findindex" tabindex="-1">findIndex <a class="header-anchor" href="#findindex" aria-label="Permalink to &quot;findIndex&quot;"></a></h4>
</li>
</ol>
<p><code>findindex()</code> 和 <code>find()</code> 类似，也是查找符合条件的第一个元素，不同之处在于 <code>findindex()</code> 会返回这个元素的索引，如果没有找到，返回 <code>-1</code> 。</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">51</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">82</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> arr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">findIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(result);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 2</span></span></code></pre>
</div><h2 id="_6-22" tabindex="-1">6-22 <a class="header-anchor" href="#_6-22" aria-label="Permalink to &quot;6-22&quot;"></a></h2>
<h3 id="如何解决vue初始化页面闪动问题" tabindex="-1">如何解决vue初始化页面闪动问题 <a class="header-anchor" href="#如何解决vue初始化页面闪动问题" aria-label="Permalink to &quot;如何解决vue初始化页面闪动问题&quot;"></a></h3>
<p>使用 <code>vue</code> 开发时，在 <code>vue</code> 初始化之前，由于 <code>div</code> 是不归 <code>vue</code> 管的，所以我们写的代码在还没有解析的情况下会容易出现花屏现象，看到类似于 <code>{{message}}</code> 的字样，虽然一般情况下这个时间很短暂，但是我们还是有必要让解决这个问题的。</p>
<p>首先：在 <code>css</code> 里加上 <code>[v-cloak] { display: none; }</code> 。如果没有彻底解决问题，则在根元素加上 <code>style=&quot;display: none;&quot; :style=&quot;{display:  block }&quot;</code></p>
<h2 id="_6-21" tabindex="-1">6-21 <a class="header-anchor" href="#_6-21" aria-label="Permalink to &quot;6-21&quot;"></a></h2>
<h3 id="求正序增长的正整数数组中-其和为-n-的两个数" tabindex="-1">求正序增长的正整数数组中，其和为 N 的两个数 <a class="header-anchor" href="#求正序增长的正整数数组中-其和为-n-的两个数" aria-label="Permalink to &quot;求正序增长的正整数数组中，其和为 N 的两个数&quot;"></a></h3>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">//获取其中某一种组合</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> twoSum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> first</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> second</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  arr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">element</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (arr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">includes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> element)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      first </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> element</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  second </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> arr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">find</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">ele</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ele </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> first)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">first </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">||</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">second) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> null</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [first, second]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">//获取所有的组合</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> twoSum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> firstArr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> []</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> secondArr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> []</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> []</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  arr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">ele</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (arr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">includes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ele)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      firstArr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(ele)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  firstArr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">ele</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    secondArr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ele)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  firstArr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">firstEle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    secondArr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">secondEle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">j</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> j) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        result.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">([firstEle, secondEle])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> result.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> ></span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> ?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="_6-20" tabindex="-1">6-20 <a class="header-anchor" href="#_6-20" aria-label="Permalink to &quot;6-20&quot;"></a></h2>
<h3 id="实现二进制与十进制的互相转化的两个函数" tabindex="-1">实现二进制与十进制的互相转化的两个函数 <a class="header-anchor" href="#实现二进制与十进制的互相转化的两个函数" aria-label="Permalink to &quot;实现二进制与十进制的互相转化的两个函数&quot;"></a></h3>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> integerToBin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">num</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 64</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> []</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    next </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">%</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">floor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    result.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">unshift</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(next)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> result</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> fractionalToBin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">num</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> []</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">!==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> &#x26;&#x26;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 54</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    next </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">>=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> ?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> :</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">%</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">++</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    result.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(next)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> result</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> decToBinary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">num</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 1.5</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">fraction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(num).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">split</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF">(?=</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold">\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> ?</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> integerToBin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(x) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> fractionalToBin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(x)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  })</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [int, fraction]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> binToDec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">num</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">_int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">_fraction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(num).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">split</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'.'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> _int.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">split</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">''</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">reduce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">acc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> acc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(x) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> **</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (arr.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> i)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> fraction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> _fraction </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> _fraction.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">split</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">''</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">reduce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">acc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> acc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> **</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> `${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">int</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">}${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">fraction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> ?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> '.'</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> fraction</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">toString</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">slice</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> ''}`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="_6-19" tabindex="-1">6-19 <a class="header-anchor" href="#_6-19" aria-label="Permalink to &quot;6-19&quot;"></a></h2>
<h3 id="请输出-100-以内的菲波那切数列" tabindex="-1">请输出 100 以内的菲波那切数列 <a class="header-anchor" href="#请输出-100-以内的菲波那切数列" aria-label="Permalink to &quot;请输出 100 以内的菲波那切数列&quot;"></a></h3>
<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> fib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> n) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    r.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(b);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    [a, b] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [b, a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> b];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> r</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="_6-18" tabindex="-1">6-18 <a class="header-anchor" href="#_6-18" aria-label="Permalink to &quot;6-18&quot;"></a></h2>
<h3 id="统计字符串中出现次数最多的字符及次数" tabindex="-1">统计字符串中出现次数最多的字符及次数 <a class="header-anchor" href="#统计字符串中出现次数最多的字符及次数" aria-label="Permalink to &quot;统计字符串中出现次数最多的字符及次数&quot;"></a></h3>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> getFrequentChar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> dict</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> maxChar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">''</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> str) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    dict[char] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (dict[char] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">||</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (dict[char] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> maxChar[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      maxChar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [char, dict[char]]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> maxChar</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="_6-17" tabindex="-1">6-17 <a class="header-anchor" href="#_6-17" aria-label="Permalink to &quot;6-17&quot;"></a></h2>
<h3 id="vue-如何实现按需加载" tabindex="-1">Vue 如何实现按需加载 <a class="header-anchor" href="#vue-如何实现按需加载" aria-label="Permalink to &quot;Vue 如何实现按需加载&quot;"></a></h3>
<h4 id="方法一-vue-router配置resolve-require加载" tabindex="-1">方法一:<code>vue-router</code>配置<code>resolve</code> + <code>require</code>加载 <a class="header-anchor" href="#方法一-vue-router配置resolve-require加载" aria-label="Permalink to &quot;方法一:`vue-router`配置`resolve` + `require`加载&quot;"></a></h4>
<p>这种方式就是下一个组件生成一个JS文件</p>
<p>路由配置如下：</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'/demo'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'Demo'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">resolve</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =></span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'../components/Demo'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">], resolve)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h4 id="方法二-es6提案的import-方法" tabindex="-1">方法二：ES6提案的<code>import()</code>方法 <a class="header-anchor" href="#方法二-es6提案的import-方法" aria-label="Permalink to &quot;方法二：ES6提案的`import()`方法&quot;"></a></h4>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 下面2行代码，没有指定 webpackChunkName，每个组件打包成一个js文件。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ImportFuncDemo1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'../components/ImportFuncDemo1'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ImportFuncDemo2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'../components/ImportFuncDemo2'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 下面2行代码，指定了相同的 webpackChunkName，会合并打包成一个js文件。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ImportFuncDemo1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/* webpackChunkName: 'ImportFuncDemo' */</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> '../components/ImportFuncDemo1'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ImportFuncDemo2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/* webpackChunkName: 'ImportFuncDemo' */</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> '../components/ImportFuncDemo2'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Router</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    routes: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            path: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'/importfuncdemo1'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'ImportFuncDemo1'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            component: ImportFuncDemo1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            path: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'/importfuncdemo2'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'ImportFuncDemo2'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            component: ImportFuncDemo2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>
</div><h4 id="方法三-webpack提供的resolve-require-ensure" tabindex="-1">方法三：webpack提供的<code>resolve </code> +  <code>require.ensure()</code> <a class="header-anchor" href="#方法三-webpack提供的resolve-require-ensure" aria-label="Permalink to &quot;方法三：webpack提供的`resolve ` +  `require.ensure()`&quot;"></a></h4>
<p><code>vue-router</code> 配置路由，使用 webpack 的 <code>require.ensure </code>技术，也可以实现按需加载。</p>
<p>这种情况下，多个路由指定相同的 <code>chunkName</code>，会合并打包成一个js文件。</p>
<ul>
<li>常规不按需加载的引入方式：</li>
</ul>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> home </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> '../../common/home.vue'</span></span></code></pre>
</div><ul>
<li>require.ensure() 引入方式：</li>
</ul>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'/promisedemo'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'PromiseDemo'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">resolve</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> require.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">ensure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">([], () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'../components/PromiseDemo'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)), </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'demo'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'/hello'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'Hello'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">resolve</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> require.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">ensure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">([], () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'../components/Hello'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)), </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'demo'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 这两个路由最终会打包成一个demo.js文件</span></span></code></pre>
</div><h2 id="_6-16" tabindex="-1">6-16 <a class="header-anchor" href="#_6-16" aria-label="Permalink to &quot;6-16&quot;"></a></h2>
<h3 id="vue-模板渲染的原理" tabindex="-1">Vue 模板渲染的原理 <a class="header-anchor" href="#vue-模板渲染的原理" aria-label="Permalink to &quot;Vue 模板渲染的原理&quot;"></a></h3>
<p>Vue 中通过 <code>v-on </code>或其语法糖 @ 指令来给元素绑定事件并且提供了事件修饰符，基本流程是进行模板编译生成<code> AST</code>（抽象语法树），生成 <code>render</code> 函数后并执行得到VNode，VNode 生成真实 DOM 节点或者组件时候使用 <code>addEventListener </code>方法进行事件绑定。</p>
<h2 id="_6-15" tabindex="-1">6-15 <a class="header-anchor" href="#_6-15" aria-label="Permalink to &quot;6-15&quot;"></a></h2>
<h3 id="vue-插槽-slot-是什么-作用-原理" tabindex="-1">Vue 插槽 slot 是什么？作用？原理？ <a class="header-anchor" href="#vue-插槽-slot-是什么-作用-原理" aria-label="Permalink to &quot;Vue 插槽 slot 是什么？作用？原理？&quot;"></a></h3>
<p><code>slot</code> 又名插槽，是 Vue 的内容分发机制，组件内部的模板引擎使用<code>slot</code> 元素作为承载分发内容的出口。插槽 <code>slot</code> 是子组件的一个模板标签元素，而这一个标签元素是否显示，以及怎么显示是由父组件决定的。</p>
<p>slot 又分三类：<code>默认插槽，具名插槽和作用域插槽</code>。</p>
<ul>
<li><strong>默认插槽</strong>：又名匿名插槽，当 slot 没有指定 name 属性值的时候一个默认显示插槽，一个组件内只能有一个匿名插槽。</li>
<li><strong>具名插槽</strong>：带有具体名字的插槽，也就是带有 name 属性的 slot，一个组件可以出现多个具名插槽。</li>
<li><strong>作用域插槽 slot-scope</strong>：默认插槽、具名插槽的一个变体，可以是匿名插槽，也可以是具名插槽，该插槽的不同点是在子组件渲染作用域插槽时，可以将子组件内部的数据传递给父组件，让父组件根据子组件的传递过来的数据决定如何渲染该插槽。</li>
</ul>
<p><strong>使用步骤</strong>：</p>
<p>子组件中定义插槽 <slot></slot>；</p>
<p>父组件使用子组件时往插槽写入代码。</p>
<p><strong>实现原理</strong>：</p>
<p>当子组件<code>vm</code>实例化时，获取到父组件传入的 slot 标签的内容，存放在<code>vm.$slot</code> 中，默认插槽为 <code>vm.$slot.default</code>，具名插槽为 <code>vm.$slot.xxx</code>，xxx 为插槽名，当组件执行渲染函数时候，遇到 slot 标签，使用 <code>$slot </code>中的内容进行替换，此时可以为插槽传递数据，若存在数据，则可称该插槽为作用域插槽。</p>
<h2 id="_6-14" tabindex="-1">6-14 <a class="header-anchor" href="#_6-14" aria-label="Permalink to &quot;6-14&quot;"></a></h2>
<h3 id="vue-router中使用active-class" tabindex="-1">Vue-Router中使用active-class <a class="header-anchor" href="#vue-router中使用active-class" aria-label="Permalink to &quot;Vue-Router中使用active-class&quot;"></a></h3>
<h4 id="方法一-直接在路由js文件中配置linkactiveclass" tabindex="-1">方法一：直接在路由JS文件中配置<code>linkActiveClass</code> <a class="header-anchor" href="#方法一-直接在路由js文件中配置linkactiveclass" aria-label="Permalink to &quot;方法一：直接在路由JS文件中配置`linkActiveClass`&quot;"></a></h4>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Router</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  linkActiveClass: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'active'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>
</div><h4 id="方法二-在-router-link-中写入active-class" tabindex="-1">方法二：在<code>&lt;router-link&gt;</code>中写入<code>active-class</code> <a class="header-anchor" href="#方法二-在-router-link-中写入active-class" aria-label="Permalink to &quot;方法二：在`&lt;router-link&gt;`中写入`active-class`&quot;"></a></h4>
<div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">router-link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"/home"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"menu-home"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> active-class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"active"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>首页&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">router-link</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><blockquote>
<p>如果使用第二种方法添加 active-class，跳转到my页面后，两个router-link始终都会有选中样式，代码如下：</p>
<div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"menu-btn"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;router-link to="/" class="menu-home" active-class="active"></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    首页</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;/router-link></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"menu-btn"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;router-link to="/my" class="menu-my" active-class="active"></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    我的</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;/router-link></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><p><strong>原因</strong>：可能是因为 <code>to=&quot;/&quot; </code>引起的，active-class 选择样式时根据路由中的路径去匹配，然后显示。例如在my页面中，路由为 localhost:8080/#/my，那么to=&quot;/&quot; 和 to=&quot;/my&quot; 都可以匹配到，所以都会激活选中样式。</p>
</blockquote>
<p><strong>解决方案</strong>：要解决问题也有两种方式，都是通过加入一个<code> exact</code> 属性</p>
<ul>
<li><strong>直接在路由js文件中配置 linkExactActiveClass</strong></li>
</ul>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Router</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  linkExactActiveClass: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'active'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>
</div><ul>
<li><strong>在 <code>&lt;router-link&gt; </code>中写入<code> exact</code></strong></li>
</ul>
<div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">router-link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"/"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"menu-home"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> active-class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"active"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> exact</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>首页&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">router-link</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><ul>
<li><strong>在路由中加入重定向</strong></li>
</ul>
<div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">router-link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"/home"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"menu-home"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> active-class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"active"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> exact</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>首页&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">router-link</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">// 路由js中加入重定向</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  path: '/',</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  redirect: '/home'</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="_6-13" tabindex="-1">6-13 <a class="header-anchor" href="#_6-13" aria-label="Permalink to &quot;6-13&quot;"></a></h2>
<h3 id="vuex的属性及其作用" tabindex="-1">Vuex的属性及其作用 <a class="header-anchor" href="#vuex的属性及其作用" aria-label="Permalink to &quot;Vuex的属性及其作用&quot;"></a></h3>
<p>Vuex 属性有五种，分别是 <code>State、 Getter、Mutation、Action、 Module</code>。</p>
<p><strong><code>State</code></strong></p>
<p>Vuex 就是一个仓库，仓库里面放了很多对象。其中 state 就是数据源存放地，对应于一般 Vue 对象里面的 data。</p>
<p>state 里面存放的数据是响应式的，Vue 组件从 store 中读取数据，若是store 中的数据发生改变，依赖这个数据的组件也会发生更新。</p>
<p>可以通过 <code>mapState</code> 把全局 state 和 getters 映射到当前组件的 computed 计算属性中使用。</p>
<p><strong><code>Getter</code></strong></p>
<p>getters 可以对 State 进行计算操作，它就是 Store 的计算属性。</p>
<p>虽然在组件内也可以做计算属性，但是 getters 可以在多组件之间复用，如果一个状态只在一个组件内使用，可以不用 getters。</p>
<p><strong><code>Mutation</code></strong></p>
<p>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。</p>
<p>Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的事件类型 (type) 和 一个 回调函数 (handler)。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数。</p>
<p>Mutation 就是提供存储设置 state 数据的方法。</p>
<p><strong><code>Action</code></strong></p>
<p>Action 类似于 mutation。</p>
<p>不同在于：Action 提交的是 mutation，而不是直接变更状态；Action 可以包含任意异步操作。</p>
<p><strong><code>Module</code></strong></p>
<p>当应用变得非常复杂时，store 对象就有可能变得相当臃肿。</p>
<p>为了解决这个问题，Vuex 允许我们将 store 分割成模块（module）。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块 module ——从上至下进行同样方式的分割。</p>
<h2 id="_6-12" tabindex="-1">6-12 <a class="header-anchor" href="#_6-12" aria-label="Permalink to &quot;6-12&quot;"></a></h2>
<h3 id="vuex是什么-使用场景" tabindex="-1">Vuex是什么？使用场景？ <a class="header-anchor" href="#vuex是什么-使用场景" aria-label="Permalink to &quot;Vuex是什么？使用场景？&quot;"></a></h3>
<p><code>Vuex </code>是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p>
<p><strong>使用场景</strong>：单页应用中，组件之间的状态，音乐播放、登录状态、加入购物车等。</p>
<h2 id="_6-11" tabindex="-1">6-11 <a class="header-anchor" href="#_6-11" aria-label="Permalink to &quot;6-11&quot;"></a></h2>
<h3 id="js脚本加载问题" tabindex="-1">JS脚本加载问题 <a class="header-anchor" href="#js脚本加载问题" aria-label="Permalink to &quot;JS脚本加载问题&quot;"></a></h3>
<p><strong>正常加载模式</strong></p>
<p>在这种情况下JS会阻塞浏览器，浏览器必须等待前面所有的JS加载和执行完毕才能去做其他事情。</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"index.js"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><p><strong>async（异步）模式</strong></p>
<p>async模式下，JS不会阻塞浏览器做任何其他的事情。它的加载是异步的，当它加载结束，JS脚本会立即执行。</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"index.js"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><p><strong>defer（延缓）模式</strong></p>
<p>defer模式下，JS的加载是异步的，执行是被推迟的。等整个文档解析完成、DOMContentLoaded事件即将被触发时，被标记了defer的JS文件才会开始依次执行。</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> defer</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"index.js"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><p>从应用的角度来说，一般我们的脚本与DOM元素和其他脚本之间的依赖关系不强时，我们会选用<code>async</code>；当脚本依赖于DOM元素和其他脚本的执行结果时，我们会选用<code>defer</code>。</p>
<h2 id="_6-10" tabindex="-1">6-10 <a class="header-anchor" href="#_6-10" aria-label="Permalink to &quot;6-10&quot;"></a></h2>
<h3 id="aot-编译模式和-jit-编译模式异同" tabindex="-1">AOT 编译模式和 JIT 编译模式异同？ <a class="header-anchor" href="#aot-编译模式和-jit-编译模式异同" aria-label="Permalink to &quot;AOT 编译模式和 JIT 编译模式异同？&quot;"></a></h3>
<p>相较于传统的 JIT 编译模式，AOT 避免了 JIT 预热等各方面的开销，可以提高 JAVA 程序的启动速度并减少占用，
还由于 AOT 编译后的代码不容易被反编译或修改，能增强 JAVA 程序的安全性。</p>
<p>AOT 的主要优势在于启动时间、内存占用和打包体积。JIT 的主要优势在于具备更高的极限处理能力，可以降低请求的最大延迟。</p>
<p>但是由于 AOT 静态编译的特点，它无法支持 JAVA 的一些动态特性，如反射、动态代理等。</p>
<h2 id="_6-9" tabindex="-1">6-9 <a class="header-anchor" href="#_6-9" aria-label="Permalink to &quot;6-9&quot;"></a></h2>
<h3 id="什么是-aot-编译模式" tabindex="-1">什么是 AOT 编译模式？ <a class="header-anchor" href="#什么是-aot-编译模式" aria-label="Permalink to &quot;什么是 AOT 编译模式？&quot;"></a></h3>
<p>AOT 编译模式（Ahead-of-Time Compilation）自 JDK9 引入，它会在程序被执行前就将其编译成机器码，属于静态编译， C、RUST、c++ 等语言都是静态编译。</p>
<h2 id="_6-8" tabindex="-1">6-8 <a class="header-anchor" href="#_6-8" aria-label="Permalink to &quot;6-8&quot;"></a></h2>
<h3 id="为什么说-java-语言解释与编译并存" tabindex="-1">为什么说 JAVA 语言解释与编译并存？ <a class="header-anchor" href="#为什么说-java-语言解释与编译并存" aria-label="Permalink to &quot;为什么说 JAVA 语言解释与编译并存？&quot;"></a></h3>
<p>一般来讲，高级语言的执行方式有两种：解释执行和编译执行。</p>
<ul>
<li>编译型：编译型语言会通过编译器将源代码一次性翻译成可被该平台执行的机器码。一般情况下，编译语言的执行速度比较快，开发效率比较低。常见的编译性语言有 C、C++、Go、Rust 等等。</li>
<li>解释型：解释型语言会通过解释器一句一句的将代码解释（interpret）为机器代码后再执行。解释型语言开发效率比较快，执行速度比较慢。常见的解释性语言有 Python、JavaScript、PHP 等等。</li>
</ul>
<p>Java 语言既具有编译型语言的特征，也具有解释型语言的特征。因为 Java 程序要经过先编译，后解释两个步骤，由 Java 编写的程序需要先经过编译步骤，生成字节码（.class 文件），这种字节码必须由 Java 解释器来解释执行。</p>
<h2 id="_6-7" tabindex="-1">6-7 <a class="header-anchor" href="#_6-7" aria-label="Permalink to &quot;6-7&quot;"></a></h2>
<h3 id="java-采用字节码的好处" tabindex="-1">JAVA 采用字节码的好处？ <a class="header-anchor" href="#java-采用字节码的好处" aria-label="Permalink to &quot;JAVA 采用字节码的好处？&quot;"></a></h3>
<p>在 JAVA 中，字节码表示 JVM可以理解的代码，拓展名为 <code>.class</code>。它不面向任何特定的处理器，只面向虚拟机。
JAVA 语言通过字节码的方式在一定程度上解决了传统解释型语言效率低的问题，同时又保留了解释型语言可移植的特点。
所以 JAVA 程序运行时相对较为高效。使用字节码还有跨平台等好处。</p>
<h2 id="_6-6" tabindex="-1">6-6 <a class="header-anchor" href="#_6-6" aria-label="Permalink to &quot;6-6&quot;"></a></h2>
<h3 id="什么是僵尸进程" tabindex="-1">什么是僵尸进程？ <a class="header-anchor" href="#什么是僵尸进程" aria-label="Permalink to &quot;什么是僵尸进程？&quot;"></a></h3>
<p>一个子进程的进程描述符在子进程退出时不会释放，只有当父进程通过 wait() 或 waitpid() 获取了子进程信息后才会释放。如果子进程退出，而父进程并没有调用 wait() 或 waitpid()，那么子进程的进程描述符仍然保存在系统中，这种进程称之为僵尸进程。僵尸进程通过 ps 命令显示出来的状态为 Z(zombie)。系统所能使用的进程号是有限的，如果产生大量僵尸进程，将因为没有可用的进程号而导致系统不能产生新的进程。要消灭系统中大量的僵尸进程，只需要将其父进程杀死，此时僵尸进程就会变成孤儿进程，从而被 init 所收养，这样 init 就会释放所有的僵尸进程所占有的资源，从而结束僵尸进程。</p>
<h2 id="_6-5" tabindex="-1">6-5 <a class="header-anchor" href="#_6-5" aria-label="Permalink to &quot;6-5&quot;"></a></h2>
<h3 id="什么是孤儿进程" tabindex="-1">什么是孤儿进程？ <a class="header-anchor" href="#什么是孤儿进程" aria-label="Permalink to &quot;什么是孤儿进程？&quot;"></a></h3>
<p>如果父进程退出，但是它的一个或多个子进程还在运行，那么这些子进程将成为孤儿进程。
孤儿进程会被 init 进程收养（接管），并将它们放入一个进程组中，并由 init 进程对它们完成状态收集工作。
由于孤儿进程会被 init 进程收养，所以孤儿进程不会对系统造成危害。</p>
<h2 id="_6-4" tabindex="-1">6-4 <a class="header-anchor" href="#_6-4" aria-label="Permalink to &quot;6-4&quot;"></a></h2>
<h3 id="什么是-csrf-攻击" tabindex="-1">什么是 CSRF 攻击？ <a class="header-anchor" href="#什么是-csrf-攻击" aria-label="Permalink to &quot;什么是 CSRF 攻击？&quot;"></a></h3>
<p><code>CSRF</code> (Cross-site request forgery)，跨站请求伪造，又称为 <code>one-click attack</code>，是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。跟跨网站脚本（XSS）相比，XSS 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。</p>
<ol>
<li>使用 JSON API。当进行 CSRF 攻击时，请求体通过 <code>&lt;form&gt;</code> 构建，请求头为 <code>application/www-form-urlencoded</code>。它难以发送 JSON 数据被服务器所理解。</li>
<li>CSRF Token。生成一个随机的 token，切勿放在 cookie 中，每次请求手动携带该 token 进行校验。</li>
<li>SameSite Cookie。设置为 Lax 或者 Strict，禁止发送第三方 Cookie。</li>
</ol>
<h2 id="_6-3" tabindex="-1">6-3 <a class="header-anchor" href="#_6-3" aria-label="Permalink to &quot;6-3&quot;"></a></h2>
<h3 id="简述-http-的缓存机制" tabindex="-1">简述 http 的缓存机制 <a class="header-anchor" href="#简述-http-的缓存机制" aria-label="Permalink to &quot;简述 http 的缓存机制&quot;"></a></h3>
<p><strong>缓存过程</strong></p>
<blockquote>
<p>浏览器与服务器通信的方式为应答模式，即是：浏览器发起 HTTP 请求 – 服务器响应该请求。那么浏览器第一次向服务器发起该请求后拿到请求结果，会根据响应报文中HTTP头的缓存标识，决定是否缓存结果，是则将请求结果和缓存标识存入浏览器缓存中。</p>
<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/4/19/162db6359673e7d0~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="img"></p>
</blockquote>
<p>Http 缓存分为以下两种，两者都是通过 HTTP 响应头控制缓存</p>
<ol>
<li><code>强制缓存</code></li>
<li><code>协商缓存</code></li>
</ol>
<h4 id="强制缓存" tabindex="-1">强制缓存 <a class="header-anchor" href="#强制缓存" aria-label="Permalink to &quot;强制缓存&quot;"></a></h4>
<p>强制缓存就是向浏览器缓存查找该请求结果，并根据该结果的缓存规则来决定是否使用该缓存结果的过程，强制缓存的情况主要有三种(暂不分析协商缓存过程)；</p>
<p>1、不存在该缓存结果和缓存标识，强制缓存失效，则直接向服务器发起请求（跟第一次发起请求一致）</p>
<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/4/19/162db63596c9de23~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="img"></p>
<p>2、存在该缓存结果和缓存标识，但该结果已失效，强制缓存失效，则使用协商缓存(暂不分析)</p>
<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/4/19/162db63597182316~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="img"></p>
<p>3、存在该缓存结果和缓存标识，且该结果尚未失效，强制缓存生效，直接返回该结果</p>
<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/4/19/162db6359acd19d3~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="img"></p>
<p>与之相关的 <code>Response Headers</code> 有以下几个：</p>
<h5 id="expires" tabindex="-1">Expires <a class="header-anchor" href="#expires" aria-label="Permalink to &quot;Expires&quot;"></a></h5>
<p>Expires是HTTP/1.0控制网页缓存的字段，其值为服务器返回该请求结果缓存的到期时间，即再次发起该请求时，如果客户端的时间小于Expires的值时，直接使用缓存结果。</p>
<blockquote>
<p>Expires是HTTP/1.0的字段，但是现在浏览器默认使用的是HTTP/1.1，那么在HTTP/1.1中网页缓存还是否由Expires控制？</p>
</blockquote>
<p>到了HTTP/1.1，Expire已经被Cache-Control替代，原因在于Expires控制缓存的原理是使用客户端的时间与服务端返回的时间做对比，那么如果客户端与服务端的时间因为某些原因（例如时区不同；客户端和服务端有一方的时间不准确）发生误差，那么强制缓存则会直接失效，这样的话强制缓存的存在则毫无意义，那么Cache-Control又是如何控制的呢？</p>
<h5 id="cache-control" tabindex="-1">Cache-Control <a class="header-anchor" href="#cache-control" aria-label="Permalink to &quot;Cache-Control&quot;"></a></h5>
<p>在HTTP/1.1中，Cache-Control是最重要的规则，主要用于控制网页缓存，主要取值为：</p>
<ul>
<li>public：所有内容都将被缓存（客户端和代理服务器都可缓存）</li>
<li>private：所有内容只有客户端可以缓存，Cache-Control的默认取值</li>
<li>no-cache：客户端缓存内容，但是是否使用缓存则需要经过协商缓存来验证决定</li>
<li>no-store：所有内容都不会被缓存，即不使用强制缓存，也不使用协商缓存</li>
<li>max-age=xxx (xxx is numeric)：缓存内容将在xxx秒后失效</li>
</ul>
<blockquote>
<p>HTTP响应报文中expires的时间值，是一个绝对值。</p>
<p>HTTP响应报文中Cache-Control为max-age=600，是相对值。</p>
<p>由于Cache-Control的优先级比expires，那么直接根据Cache-Control的值进行缓存，意思就是说在600秒内再次发起该请求，则会直接使用缓存结果，强制缓存生效。</p>
</blockquote>
<h4 id="协商缓存" tabindex="-1">协商缓存 <a class="header-anchor" href="#协商缓存" aria-label="Permalink to &quot;协商缓存&quot;"></a></h4>
<p>协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程，主要有以下两种情况：</p>
<p>1、协商缓存生效，返回304</p>
<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/4/19/162db635cbfff69d~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="img"></p>
<p>2、协商缓存失效，返回200和请求结果结果</p>
<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/4/19/162db635cf070ff5~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="img"></p>
<p>与之相关的 <code>Request/Response Headers</code> 有以下几个</p>
<h5 id="last-modified-if-modified-since" tabindex="-1">Last-Modified / If-Modified-Since <a class="header-anchor" href="#last-modified-if-modified-since" aria-label="Permalink to &quot;Last-Modified / If-Modified-Since&quot;"></a></h5>
<p>Last-Modified是服务器响应请求时，返回该资源文件在服务器最后被修改的时间；</p>
<p>If-Modified-Since则是客户端再次发起该请求时，携带上次请求返回的Last-Modified值，通过此字段值告诉服务器该资源上次请求返回的最后被修改时间。服务器收到该请求，发现请求头含有If-Modified-Since字段，则会根据If-Modified-Since的字段值与该资源在服务器的最后被修改时间做对比，若服务器的资源最后被修改时间大于If-Modified-Since的字段值，则重新返回资源，状态码为200；否则则返回304，代表资源无更新，可继续使用缓存文件。</p>
<h5 id="etag-if-none-match" tabindex="-1">Etag / If-None-Match <a class="header-anchor" href="#etag-if-none-match" aria-label="Permalink to &quot;Etag / If-None-Match&quot;"></a></h5>
<p>Etag是服务器响应请求时，返回当前资源文件的一个唯一标识(由服务器生成)；</p>
<p>If-None-Match是客户端再次发起该请求时，携带上次请求返回的唯一标识Etag值，通过此字段值告诉服务器该资源上次请求返回的唯一标识值。服务器收到该请求后，发现该请求头中含有If-None-Match，则会根据If-None-Match的字段值与该资源在服务器的Etag值做对比，一致则返回304，代表资源无更新，继续使用缓存文件；不一致则重新返回资源文件，状态码为200</p>
<h4 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;"></a></h4>
<p>强制缓存优先于协商缓存进行，若强制缓存(Expires和Cache-Control)生效则直接使用缓存，若不生效则进行协商缓存(Last-Modified / If-Modified-Since和Etag / If-None-Match)，协商缓存由服务器决定是否使用缓存，若协商缓存失效，那么代表该请求的缓存失效，重新获取请求结果，再存入浏览器缓存中；生效则返回304，继续使用缓存，主要过程如下：</p>
<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/4/19/162db635ed5f6d26~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="img"></p>
<h2 id="_6-2" tabindex="-1">6-2 <a class="header-anchor" href="#_6-2" aria-label="Permalink to &quot;6-2&quot;"></a></h2>
<h3 id="http-常见的状态码" tabindex="-1">http 常见的状态码 <a class="header-anchor" href="#http-常见的状态码" aria-label="Permalink to &quot;http 常见的状态码&quot;"></a></h3>
<blockquote>
<ul>
<li><code>1XX </code>表示消息</li>
<li><code>2XX </code>表示成功</li>
<li><code>3XX</code> 表示重定向</li>
<li><code>4XX</code> 表示客户端错误</li>
<li><code>5XX</code> 表示服务端错误</li>
</ul>
</blockquote>
<p><code>200</code>：最喜欢见到的状态码，表示请求成功</p>
<p><code>301</code>：永久重定向</p>
<p><code>302</code>：临时重定向</p>
<p><code>304</code>：自上次请求，未修改的文件</p>
<blockquote>
<p><strong>http 状态码中 301，302和307有什么区别</strong></p>
<ul>
<li>301，Moved Permanently。永久重定向，该操作比较危险，需要谨慎操作：如果设置了301，但是一段时间后又想取消，但是浏览器中已经有了缓存，还是会重定向。</li>
<li>302，Found。临时重定向，但是会在重定向的时候改变 method: 把 POST 改成 GET，于是有了 307</li>
<li>307，Temporary Redirect。临时重定向，在重定向时不会改变 method</li>
</ul>
</blockquote>
<p><code>400</code>：错误的请求</p>
<p><code>401</code>：未被授权，需要身份验证，例如token信息等等</p>
<p><code>403</code>：请求被拒绝</p>
<p><code>404</code>：资源缺失，接口不存在或请求的文件不存在等等</p>
<p><code>405</code>：请求方法不对，需要POST这条资源而你却使用了GET</p>
<p><code>500</code>：服务器端的未知错误</p>
<p><code>502</code>：网关错误</p>
<p><code>503</code>：服务暂时无法使用</p>
<p><code>504</code>：网关超时，上游应用层迟迟未响应</p>
<h2 id="_6-1" tabindex="-1">6-1 <a class="header-anchor" href="#_6-1" aria-label="Permalink to &quot;6-1&quot;"></a></h2>
<h3 id="浏览器中如何实现剪切板复制内容的功能" tabindex="-1">浏览器中如何实现剪切板复制内容的功能？ <a class="header-anchor" href="#浏览器中如何实现剪切板复制内容的功能" aria-label="Permalink to &quot;浏览器中如何实现剪切板复制内容的功能？&quot;"></a></h3>
<h4 id="方法1-第三方库-clipboard-copy-opens-in-a-new-tab" tabindex="-1">方法1：第三方库 <a href="https://github.com/feross/clipboard-copy/blob/master/index.js" target="_blank" rel="noreferrer">clipboard-copy(opens in a new tab)</a> <a class="header-anchor" href="#方法1-第三方库-clipboard-copy-opens-in-a-new-tab" aria-label="Permalink to &quot;方法1：第三方库 [clipboard-copy(opens in a new tab)](https://github.com/feross/clipboard-copy/blob/master/index.js)&quot;"></a></h4>
<p>使用 <code>Clipboard API</code> 进行实现是目前最为推荐的方式</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">navigator.clipboard.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">writeText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(text);</span></span></code></pre>
</div><blockquote>
<p>而对于一些不支持 <code>Clipboard API</code> 的浏览器，使用以下 API 进行复制</p>
</blockquote>
<h4 id="方法2-选中-selection-api-range-api" tabindex="-1">方法2：选中: Selection API/Range API <a class="header-anchor" href="#方法2-选中-selection-api-range-api" aria-label="Permalink to &quot;方法2：选中: Selection API/Range API&quot;"></a></h4>
<blockquote>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Selection" target="_blank" rel="noreferrer">Selection API</a></p>
<p><code>Selection</code> 对象表示用户选择的文本范围或插入符号的当前位置。它代表页面中的文本选区，可能横跨多个元素。文本选区由用户拖拽鼠标经过文字而产生。要获取用于检查或修改的 Selection 对象，请调用 <code>window.getSelection()</code>。</p>
<p><code>Selection</code> 对象所对应的是用户所选择的 <code>ranges</code>（区域），俗称拖蓝。默认情况下，该函数只针对一个区域。</p>
<p><strong>方法</strong>：</p>
<p><code>getRangeAt</code>：返回选区包含的指定区域（<code>Range</code>）的<strong>引用</strong>。</p>
<p><code>collapse</code>：将当前的选区折叠为一个点。</p>
<p><code>extend</code>：将选区的焦点移动到一个特定的位置。</p>
<p><code>modify</code>：修改当前的选区。</p>
<p><code>collapseToStart</code>：将当前的选区折叠到起始点。</p>
<p><code>collapseToEnd</code>：将当前的选区折叠到最末尾的一个点。</p>
<p><code>selectAllChildren</code>：将某一指定节点的子节点框入选区。</p>
<p><code>addRange</code>：一个区域（<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Range" target="_blank" rel="noreferrer"><code>Range</code></a>）对象将被加入选区。</p>
<p><code>removeRange</code>：从选区中移除一个区域。</p>
<p><code>removeAllRanges</code>：将所有的区域都从选区中移除。</p>
<p><code>deleteFromDocument</code>：从页面中删除选区中的内容。</p>
<p><code>selectionLanguageChange</code></p>
<p>当键盘的朝向发生改变后修改指针的 Bidi 优先级。</p>
<p><code>toString</code>：返回当前选区的纯文本内容。</p>
<p><code>containsNode</code>：判断某一个 <code>Node</code> 是否为当前选区的一部分。</p>
</blockquote>
<p><strong>选中</strong>：</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> selection</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getSelection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> range</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">createRange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// RangeAPI: 制造区域</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">range.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">selectNodeContents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(element);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// Selection: 选中区域</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">selection.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">addRange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(range);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">selectedText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> selection.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span></code></pre>
</div><p><strong>取消选中</strong>：</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getSelection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">removeAllRanges</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span></code></pre>
</div><h4 id="方法3-复制execcommand" tabindex="-1">方法3：复制execCommand <a class="header-anchor" href="#方法3-复制execcommand" aria-label="Permalink to &quot;方法3：复制execCommand&quot;"></a></h4>
<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">execCommand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"copy"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span></code></pre>
</div>]]></content:encoded>
            <enclosure url="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/4/19/162db6359673e7d0~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" length="0" type="image/awebp"/>
        </item>
        <item>
            <title><![CDATA[每日一题 - 202407]]></title>
            <link>https://www.imufeng.cn/interview/question-by-day/2024/7.html</link>
            <guid>https://www.imufeng.cn/interview/question-by-day/2024/7.html</guid>
            <pubDate>Sat, 05 Oct 2024 12:44:16 GMT</pubDate>
            <description><![CDATA[
# 每日一题 - 202407


## 7-19

### VUEX 和单纯的全局对象有什么区别？

Vuex 状态存储是响应式的，当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会更新。

程序不能直接改变 store 中的状态，而是进行显式的提交（commit），这样就可以跟踪每一个状态的变化。

## 7-18

### Vue3.0 为什么要用 proxy？

`Object.defineProperty()` 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象，通过 getter 和 setter 实现。
所以检测不到对象属性的添加和删除，而且它需要对每个属性进行遍历监听，如果嵌套对象，需要深层监听，造成性能问题

`Proxy` 直接可以劫持整个对象，并返回一个新对象，我们可以只操作新的对象达到响应式目的，它的很多拦截方法是 `Object.defineProperty` 不具备的。

在 Vue3.0 中，使用了 Proxy 取代了 defineProperty，主要是因为 Proxy 的强大以及 defineProperty 自身的缺陷。

## 7-17

### 多线程的优势

**降低资源消耗：** 通过重复利用已创建的线程降低线程创建和销毁造成的消耗。
**提高响应速度：** 当任务到达时，可以不需要等到线程创建就能立即执行。
**提高线程的可管理性：** 统一管理线程，避免系统创建大量同类线程而导致消耗完内存。

## 7-16

### 如何优化接口性能？

1. 优化数据库索引
2. 优化 SQL 语句
3. 避免在事务中进行大量操作
4. 异步处理，剥离主逻辑和副逻辑
5. 多线程场景下降低锁粒度
6. 加缓存，Redis 等
7. 分库分表
8. 避免循环查询数据库

## 7-15

### JAVA 实例化的顺序

1. 静态属性，静态代码块
2. 普通属性，普通代码块
3. 构造方法

## 7-14

### String s = new String("mufeng"); 创建了几个对象？

在执行 `String s = new String("mufeng");` 时，创建了两个对象。

1. **字面量对象：** Java 字符串字面量 "mufeng" 被存储在字符串池中，如果该字面量之前没有在字符串池中出现过，会在字符串池中创建一个新的字符串对象。
2. **堆中的字符串对象：** `new String("mufeng")` 会在堆中创建一个新的字符串对象，其内容为 "mufeng"，即使字符串池中已经有 "mufeng" 对象，也会在堆中再创建一个新的对象。

## 7-13

### 什么是字符串常量池？

字符串常量池（String Constant Pool）是 Java 中一种特殊的内存区域，用于存储字符串字面量。这种机制的主要目的是为了节省内存空间并提高性能。它位于 Java 堆内存（Heap Memory）中的一个特定区域。

当使用双引号创建字符串（如 "mufeng"）时，编译器会检查字符串常量池，如果该字符串已经存在，则直接引用池中的对象；如果不存在，则在池中创建一个新的字符串对象。

字符串常量池可以提高内存效率和性能：

- 通过避免重复创建相同内容的字符串，可以显著减少内存开销。
- 字符串比较操作（使用 ==）在常量池中的字符串上会更快，因为它们比较的是内存地址而不是内容。

```java
public class StringPoolExample {
    public static void main(String[] args) {
        String str1 = "mufeng"; // 字符串字面量，存储在常量池中
        String str2 = "mufeng"; // 引用常量池中的同一个对象
        String str3 = new String("mufeng"); // 在堆中创建新的字符串对象
        String str4 = str3.intern(); // 将 str3 引用的字符串添加到常量池中，或获取常量池中的相同内容的字符串引用

        System.out.println(str1 == str2); // true
        System.out.println(str1 == str3); // false
        System.out.println(str1 == str4); // true
    }
}

```

在这个示例中，`str1` 和 `str2` 都引用常量池中的同一个字符串对象，而 `str3` 引用的是堆中的新对象。通过调用 `str3.intern()`，`str4` 引用了常量池中的字符串对象。

## 7-12

### 什么是 StringJoiner ？

`StringJoiner` 是 JAVA8 新增的 API，基于 StringBuilder 实现，用于实现字符串之间通过分隔符拼接的场景。

常用的 `Collectors.joining(",")`，底层就是通过 `StringJoiner` 实现的。

```java
String[] strings = {"白鹿原", "平凡的世界", "穆斯林的葬礼", "呼兰河传"};
StringJoiner stringJoiner = new StringJoiner("》，《", "《", "》");
for (String string : strings) {
    stringJoiner.add(string);
}
```
stringJoiner：

```text
《白鹿原》，《平凡的世界》，《穆斯林的葬礼》，《呼兰河传》
```

## 7-11

### 为何 JDK9 要将 String 的底层实现由 char[] 改成 byte[]?

**主要是为了节约内存**

在大部分 Java 程序的堆内存中，String 占用的空间最大，并且绝大多数 String 只有 Latin-1 字符，这些 Latin-1 字符只需要1个字节就够了。

而在 JDK9 之前，JVM 因为 String 使用 char 数组存储，每个 char 占2个字节，所以即使字符串只需要1字节，它也要按照2字节进行分配，浪费了一半的内存空间。

到了 JDK9 之后，对于每个字符串，会先判断它是不是只有 Latin-1 字符，如果是，就按照1字节的规格进行分配内存，如果不是，就按照2字节的规格进行分配，
这样便提高了内存使用率，同时GC次数也会减少，提升效率。

不过 Latin-1 编码集支持的字符有限，比如不支持中文字符，因此对于中文字符串，用的是 UTF16 编码（两个字节），所以用 `byte[]` 和 `char[]` 实现没什么区别。

## 7-10

### 什么是自动拆装箱？

由于 JAVA 面向对象的特性，很多地方都需要引用数据类型而非基础数据类型，比如在集合类中，要求放入元素为 对象，所以无法放入基础数据类型 int 等。

为了让基础数据类型也拥有引用数据类型的特性，就出现了包装类型，将引用数据类型用对象包装，让其拥有对象的特性，为其添加属性和方法，丰富操作。

原始类型和包装类型对应关系：

| 原始类型 | 包装类型  |
| :]]></description>
            <content:encoded><![CDATA[<h1 id="每日一题-202407" tabindex="-1">每日一题 - 202407 <a class="header-anchor" href="#每日一题-202407" aria-label="Permalink to &quot;每日一题 - 202407&quot;"></a></h1>
<h2 id="_7-19" tabindex="-1">7-19 <a class="header-anchor" href="#_7-19" aria-label="Permalink to &quot;7-19&quot;"></a></h2>
<h3 id="vuex-和单纯的全局对象有什么区别" tabindex="-1">VUEX 和单纯的全局对象有什么区别？ <a class="header-anchor" href="#vuex-和单纯的全局对象有什么区别" aria-label="Permalink to &quot;VUEX 和单纯的全局对象有什么区别？&quot;"></a></h3>
<p>Vuex 状态存储是响应式的，当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会更新。</p>
<p>程序不能直接改变 store 中的状态，而是进行显式的提交（commit），这样就可以跟踪每一个状态的变化。</p>
<h2 id="_7-18" tabindex="-1">7-18 <a class="header-anchor" href="#_7-18" aria-label="Permalink to &quot;7-18&quot;"></a></h2>
<h3 id="vue3-0-为什么要用-proxy" tabindex="-1">Vue3.0 为什么要用 proxy？ <a class="header-anchor" href="#vue3-0-为什么要用-proxy" aria-label="Permalink to &quot;Vue3.0 为什么要用 proxy？&quot;"></a></h3>
<p><code>Object.defineProperty()</code> 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象，通过 getter 和 setter 实现。
所以检测不到对象属性的添加和删除，而且它需要对每个属性进行遍历监听，如果嵌套对象，需要深层监听，造成性能问题</p>
<p><code>Proxy</code> 直接可以劫持整个对象，并返回一个新对象，我们可以只操作新的对象达到响应式目的，它的很多拦截方法是 <code>Object.defineProperty</code> 不具备的。</p>
<p>在 Vue3.0 中，使用了 Proxy 取代了 defineProperty，主要是因为 Proxy 的强大以及 defineProperty 自身的缺陷。</p>
<h2 id="_7-17" tabindex="-1">7-17 <a class="header-anchor" href="#_7-17" aria-label="Permalink to &quot;7-17&quot;"></a></h2>
<h3 id="多线程的优势" tabindex="-1">多线程的优势 <a class="header-anchor" href="#多线程的优势" aria-label="Permalink to &quot;多线程的优势&quot;"></a></h3>
<p><strong>降低资源消耗：</strong> 通过重复利用已创建的线程降低线程创建和销毁造成的消耗。
<strong>提高响应速度：</strong> 当任务到达时，可以不需要等到线程创建就能立即执行。
<strong>提高线程的可管理性：</strong> 统一管理线程，避免系统创建大量同类线程而导致消耗完内存。</p>
<h2 id="_7-16" tabindex="-1">7-16 <a class="header-anchor" href="#_7-16" aria-label="Permalink to &quot;7-16&quot;"></a></h2>
<h3 id="如何优化接口性能" tabindex="-1">如何优化接口性能？ <a class="header-anchor" href="#如何优化接口性能" aria-label="Permalink to &quot;如何优化接口性能？&quot;"></a></h3>
<ol>
<li>优化数据库索引</li>
<li>优化 SQL 语句</li>
<li>避免在事务中进行大量操作</li>
<li>异步处理，剥离主逻辑和副逻辑</li>
<li>多线程场景下降低锁粒度</li>
<li>加缓存，Redis 等</li>
<li>分库分表</li>
<li>避免循环查询数据库</li>
</ol>
<h2 id="_7-15" tabindex="-1">7-15 <a class="header-anchor" href="#_7-15" aria-label="Permalink to &quot;7-15&quot;"></a></h2>
<h3 id="java-实例化的顺序" tabindex="-1">JAVA 实例化的顺序 <a class="header-anchor" href="#java-实例化的顺序" aria-label="Permalink to &quot;JAVA 实例化的顺序&quot;"></a></h3>
<ol>
<li>静态属性，静态代码块</li>
<li>普通属性，普通代码块</li>
<li>构造方法</li>
</ol>
<h2 id="_7-14" tabindex="-1">7-14 <a class="header-anchor" href="#_7-14" aria-label="Permalink to &quot;7-14&quot;"></a></h2>
<h3 id="string-s-new-string-mufeng-创建了几个对象" tabindex="-1">String s = new String(&quot;mufeng&quot;); 创建了几个对象？ <a class="header-anchor" href="#string-s-new-string-mufeng-创建了几个对象" aria-label="Permalink to &quot;String s = new String(&quot;mufeng&quot;); 创建了几个对象？&quot;"></a></h3>
<p>在执行 <code>String s = new String(&quot;mufeng&quot;);</code> 时，创建了两个对象。</p>
<ol>
<li><strong>字面量对象：</strong> Java 字符串字面量 &quot;mufeng&quot; 被存储在字符串池中，如果该字面量之前没有在字符串池中出现过，会在字符串池中创建一个新的字符串对象。</li>
<li><strong>堆中的字符串对象：</strong> <code>new String(&quot;mufeng&quot;)</code> 会在堆中创建一个新的字符串对象，其内容为 &quot;mufeng&quot;，即使字符串池中已经有 &quot;mufeng&quot; 对象，也会在堆中再创建一个新的对象。</li>
</ol>
<h2 id="_7-13" tabindex="-1">7-13 <a class="header-anchor" href="#_7-13" aria-label="Permalink to &quot;7-13&quot;"></a></h2>
<h3 id="什么是字符串常量池" tabindex="-1">什么是字符串常量池？ <a class="header-anchor" href="#什么是字符串常量池" aria-label="Permalink to &quot;什么是字符串常量池？&quot;"></a></h3>
<p>字符串常量池（String Constant Pool）是 Java 中一种特殊的内存区域，用于存储字符串字面量。这种机制的主要目的是为了节省内存空间并提高性能。它位于 Java 堆内存（Heap Memory）中的一个特定区域。</p>
<p>当使用双引号创建字符串（如 &quot;mufeng&quot;）时，编译器会检查字符串常量池，如果该字符串已经存在，则直接引用池中的对象；如果不存在，则在池中创建一个新的字符串对象。</p>
<p>字符串常量池可以提高内存效率和性能：</p>
<ul>
<li>通过避免重复创建相同内容的字符串，可以显著减少内存开销。</li>
<li>字符串比较操作（使用 ==）在常量池中的字符串上会更快，因为它们比较的是内存地址而不是内容。</li>
</ul>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> StringPoolExample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        String str1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "mufeng"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 字符串字面量，存储在常量池中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        String str2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "mufeng"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 引用常量池中的同一个对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        String str3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"mufeng"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 在堆中创建新的字符串对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        String str4 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> str3.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">intern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 将 str3 引用的字符串添加到常量池中，或获取常量池中的相同内容的字符串引用</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(str1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> str2); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(str1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> str3); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(str1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> str4); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>在这个示例中，<code>str1</code> 和 <code>str2</code> 都引用常量池中的同一个字符串对象，而 <code>str3</code> 引用的是堆中的新对象。通过调用 <code>str3.intern()</code>，<code>str4</code> 引用了常量池中的字符串对象。</p>
<h2 id="_7-12" tabindex="-1">7-12 <a class="header-anchor" href="#_7-12" aria-label="Permalink to &quot;7-12&quot;"></a></h2>
<h3 id="什么是-stringjoiner" tabindex="-1">什么是 StringJoiner ？ <a class="header-anchor" href="#什么是-stringjoiner" aria-label="Permalink to &quot;什么是 StringJoiner ？&quot;"></a></h3>
<p><code>StringJoiner</code> 是 JAVA8 新增的 API，基于 StringBuilder 实现，用于实现字符串之间通过分隔符拼接的场景。</p>
<p>常用的 <code>Collectors.joining(&quot;,&quot;)</code>，底层就是通过 <code>StringJoiner</code> 实现的。</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[] strings </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"白鹿原"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"平凡的世界"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"穆斯林的葬礼"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"呼兰河传"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">StringJoiner stringJoiner </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> StringJoiner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"》，《"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"《"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"》"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (String string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> strings) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    stringJoiner.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(string);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>stringJoiner：</p>
<div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>《白鹿原》，《平凡的世界》，《穆斯林的葬礼》，《呼兰河传》</span></span></code></pre>
</div><h2 id="_7-11" tabindex="-1">7-11 <a class="header-anchor" href="#_7-11" aria-label="Permalink to &quot;7-11&quot;"></a></h2>
<h3 id="为何-jdk9-要将-string-的底层实现由-char-改成-byte" tabindex="-1">为何 JDK9 要将 String 的底层实现由 char[] 改成 byte[]? <a class="header-anchor" href="#为何-jdk9-要将-string-的底层实现由-char-改成-byte" aria-label="Permalink to &quot;为何 JDK9 要将 String 的底层实现由 char[] 改成 byte[]?&quot;"></a></h3>
<p><strong>主要是为了节约内存</strong></p>
<p>在大部分 Java 程序的堆内存中，String 占用的空间最大，并且绝大多数 String 只有 Latin-1 字符，这些 Latin-1 字符只需要1个字节就够了。</p>
<p>而在 JDK9 之前，JVM 因为 String 使用 char 数组存储，每个 char 占2个字节，所以即使字符串只需要1字节，它也要按照2字节进行分配，浪费了一半的内存空间。</p>
<p>到了 JDK9 之后，对于每个字符串，会先判断它是不是只有 Latin-1 字符，如果是，就按照1字节的规格进行分配内存，如果不是，就按照2字节的规格进行分配，
这样便提高了内存使用率，同时GC次数也会减少，提升效率。</p>
<p>不过 Latin-1 编码集支持的字符有限，比如不支持中文字符，因此对于中文字符串，用的是 UTF16 编码（两个字节），所以用 <code>byte[]</code> 和 <code>char[]</code> 实现没什么区别。</p>
<h2 id="_7-10" tabindex="-1">7-10 <a class="header-anchor" href="#_7-10" aria-label="Permalink to &quot;7-10&quot;"></a></h2>
<h3 id="什么是自动拆装箱" tabindex="-1">什么是自动拆装箱？ <a class="header-anchor" href="#什么是自动拆装箱" aria-label="Permalink to &quot;什么是自动拆装箱？&quot;"></a></h3>
<p>由于 JAVA 面向对象的特性，很多地方都需要引用数据类型而非基础数据类型，比如在集合类中，要求放入元素为 对象，所以无法放入基础数据类型 int 等。</p>
<p>为了让基础数据类型也拥有引用数据类型的特性，就出现了包装类型，将引用数据类型用对象包装，让其拥有对象的特性，为其添加属性和方法，丰富操作。</p>
<p>原始类型和包装类型对应关系：</p>
<table tabindex="0">
<thead>
<tr>
<th style="text-align:center">原始类型</th>
<th style="text-align:center">包装类型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">boolean</td>
<td style="text-align:center">Boolean</td>
</tr>
<tr>
<td style="text-align:center">byte</td>
<td style="text-align:center">Byte</td>
</tr>
<tr>
<td style="text-align:center">char</td>
<td style="text-align:center">Character</td>
</tr>
<tr>
<td style="text-align:center">float</td>
<td style="text-align:center">Float</td>
</tr>
<tr>
<td style="text-align:center">int</td>
<td style="text-align:center">Integer</td>
</tr>
<tr>
<td style="text-align:center">long</td>
<td style="text-align:center">Long</td>
</tr>
<tr>
<td style="text-align:center">short</td>
<td style="text-align:center">Short</td>
</tr>
<tr>
<td style="text-align:center">double</td>
<td style="text-align:center">Double</td>
</tr>
</tbody>
</table>
<p>当基础类型与它们的包装类有如下几种情况时，编译器会自动帮我们进行装箱或拆箱：</p>
<ul>
<li>赋值操作（装箱或拆箱）</li>
<li>进行加减乘除混合运算 （拆箱）</li>
<li>进行&gt;,&lt;,==比较运算（拆箱）</li>
<li>调用equals进行比较（装箱）</li>
<li>ArrayList、HashMap 等集合类添加基础类型数据时（装箱）</li>
</ul>
<h2 id="_7-9" tabindex="-1">7-9 <a class="header-anchor" href="#_7-9" aria-label="Permalink to &quot;7-9&quot;"></a></h2>
<h3 id="怎么实现图片懒加载" tabindex="-1">怎么实现图片懒加载？ <a class="header-anchor" href="#怎么实现图片懒加载" aria-label="Permalink to &quot;怎么实现图片懒加载？&quot;"></a></h3>
<blockquote>
<p>懒加载是一种网页性能优化的方式，它能极大的提升用户体验。就比如说图片，图片一直是影响网页性能的主要元凶，现在一张图片超过几兆已经是很经常的事了。如果每次进入页面就请求所有的图片资源，那么可能等图片加载出来用户也早就走了。所以，我们需要懒加载，进入页面的时候，只请求可视区域的图片资源。</p>
</blockquote>
<h4 id="_1、html实现" tabindex="-1">1、html实现 <a class="header-anchor" href="#_1、html实现" aria-label="Permalink to &quot;1、html实现&quot;"></a></h4>
<p>最简单的实现方式是给 <code>img</code> 标签加上 <code>loading=&quot;lazy&quot;</code>，比如</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"./example.jpg"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> loading</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"lazy"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><h4 id="_2、js实现原理" tabindex="-1">2、JS实现原理 <a class="header-anchor" href="#_2、js实现原理" aria-label="Permalink to &quot;2、JS实现原理&quot;"></a></h4>
<p>我们通过<code>js监听页面的滚动</code>也能实现。</p>
<blockquote>
<p>使用js实现的原理主要是判断当前图片是否到了可视区域：</p>
<ul>
<li>拿到所有的图片 dom 。</li>
<li>遍历每个图片判断当前图片是否到了可视区范围内。</li>
<li>如果到了就设置图片的 src 属性。</li>
<li>绑定 window 的 scroll 事件，对其进行事件监听。</li>
</ul>
</blockquote>
<p>在页面初始化的时候，<img>图片的src实际上是放在<code>data-src</code>属性上的，当元素处于可视范围内的时候，就把data-src赋值给src属性，完成图片加载。</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 在一开始加载的时候</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> data-src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"http://xx.com/xx.png"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">""</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> /></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 在进入可视范围内时</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> data-src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"http://xx.com/xx.png"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"http://xx.com/xx.png"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> /></span></span></code></pre>
</div><div>使用背景图来实现，原理也是一样的，把图片链接存放在 `data-src` 中，在可视范围时，就把data-src赋值给 `background-image` 属性，完成图片加载。</div>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 在一开始加载的时候</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  data-src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"http://xx.com/xx.png"</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  style</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"background-image: none;background-size: cover;"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 在进入可视范围内时</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  data-src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"http://xx.com/xx.png"</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  style</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"background-image: url(http://xx.com/xx.png);background-size: cover;"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><h4 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;"></a></h4>
<div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">html</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"en"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> charset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"UTF-8"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> /></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>Lazyload&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">      img</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        margin-bottom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">200</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">400</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"./img/default.png"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> data-src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"./img/1.jpg"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> /></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"./img/default.png"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> data-src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"./img/2.jpg"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> /></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"./img/default.png"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> data-src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"./img/3.jpg"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> /></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"./img/default.png"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> data-src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"./img/4.jpg"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> /></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"./img/default.png"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> data-src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"./img/5.jpg"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> /></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"./img/default.png"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> data-src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"./img/6.jpg"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> /></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"./img/default.png"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> data-src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"./img/7.jpg"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> /></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"./img/default.png"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> data-src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"./img/8.jpg"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> /></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"./img/default.png"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> data-src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"./img/9.jpg"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> /></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"./img/default.png"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> data-src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"./img/10.jpg"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> /></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><p>先获取所有图片的 dom，通过 <code>window.innerHeight || document.documentElement.clientHeight|| document.body.clientHeight</code> 获取可视区高度，再使用 <code>element.getBoundingClientRect()</code> API 直接得到元素相对浏览的 top 值， 遍历每个图片判断当前图片是否到了可视区范围内。最后给 window 绑定 onscroll 事件。</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> lazyload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> viewHeight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> window.innerHeight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> document.documentElement.clientHeight</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> document.body.clientHeight </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">//获取可视区高度，兼容不同浏览器</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> imgs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">querySelectorAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'img[data-src]'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  imgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (item.dataset.src </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> ''</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">return</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 用于获得页面中某个元素的左，上，右和下分别相对浏览器视窗的位置</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> rect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> item.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getBoundingClientRect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (rect.bottom </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">>=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> &#x26;&#x26;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> rect.top </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> viewHeight) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      item.src </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> item.dataset.src</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      item.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">removeAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'data-src'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'scroll'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, lazyload)</span></span></code></pre>
</div><blockquote>
<p>这样存在较大的性能问题，因为 scroll 事件会在很短的时间内触发很多次，严重影响页面性能，为了提高网页性能，我们需要一个节流函数来控制函数的多次触发，在一段时间内（如 200ms）只执行一次回调。</p>
</blockquote>
<h4 id="优化-节流" tabindex="-1">优化（节流） <a class="header-anchor" href="#优化-节流" aria-label="Permalink to &quot;优化（节流）&quot;"></a></h4>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> throttle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> timer</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> prevTime</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> currTime</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> this</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">prevTime) prevTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> currTime</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    clearTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(timer)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (currTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> prevTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> delay) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      prevTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> currTime</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      fn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(context, args)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">      clearTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(timer)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      return</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    timer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      prevTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      timer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      fn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(context, args)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }, delay)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'scroll'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">throttle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(lazyload, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">))</span></span></code></pre>
</div><h2 id="_7-8" tabindex="-1">7-8 <a class="header-anchor" href="#_7-8" aria-label="Permalink to &quot;7-8&quot;"></a></h2>
<h3 id="什么是事件代理-以及它的应用场景有哪些" tabindex="-1">什么是事件代理，以及它的应用场景有哪些？ <a class="header-anchor" href="#什么是事件代理-以及它的应用场景有哪些" aria-label="Permalink to &quot;什么是事件代理，以及它的应用场景有哪些？&quot;"></a></h3>
<h4 id="一、事件代理是什么" tabindex="-1">一、事件代理是什么 <a class="header-anchor" href="#一、事件代理是什么" aria-label="Permalink to &quot;一、事件代理是什么&quot;"></a></h4>
<p>事件代理，俗地来讲，就是把一个元素响应事件（<code>click</code>、<code>keydown</code>......）的函数委托到另一个元素</p>
<p>前面讲到，事件流的都会经过三个阶段： 捕获阶段 -&gt; 目标阶段 -&gt; 冒泡阶段，而事件委托就是在冒泡阶段完成</p>
<p>事件委托，会把一个或者一组元素的事件委托到它的父层或者更外层元素上，真正绑定事件的是外层元素，而不是目标元素</p>
<p>当事件响应到目标元素上时，会通过事件冒泡机制从而触发它的外层元素的绑定事件上，然后在外层元素上去执行函数</p>
<h4 id="二、应用场景" tabindex="-1">二、应用场景 <a class="header-anchor" href="#二、应用场景" aria-label="Permalink to &quot;二、应用场景&quot;"></a></h4>
<p>如果我们有一个列表，列表之中有大量的列表项，我们需要在点击列表项的时候响应一个事件</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">ul</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"list"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>item 1&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>item 2&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>item 3&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  ......</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>item n&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><p>如果给每个列表项一一都绑定一个函数，那对于内存消耗是非常大的</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 获取目标元素</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> lis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getElementsByTagName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"li"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 循环遍历绑定事件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> lis.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    lis[i].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">onclick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(e.target.innerHTML)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>这时候就可以事件委托，把点击事件绑定在父级元素<code>ul</code>上面，然后执行事件的时候再去匹配目标元素</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 给父层元素绑定事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'list'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'click'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 兼容性处理</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> event </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> e </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> window.event;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> event.target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> event.srcElement;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 判断是否匹配目标元素</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (target.nodeName.toLocaleLowerCase </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'li'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">       console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'the content is: '</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, target.innerHTML);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">});</span></span></code></pre>
</div><p>还有一种场景是上述列表项并不多，我们给每个列表项都绑定了事件</p>
<p>但是如果用户能够随时动态的增加或者去除列表项元素，那么在每一次改变的时候都需要重新给新增的元素绑定事件，给即将删去的元素解绑事件</p>
<p>如果用了事件委托就没有这种麻烦了，因为事件是绑定在父层的，和目标元素的增减是没有关系的，执行到目标元素是在真正响应执行事件函数的过程中去匹配的</p>
<h4 id="三、总结" tabindex="-1">三、总结 <a class="header-anchor" href="#三、总结" aria-label="Permalink to &quot;三、总结&quot;"></a></h4>
<p>适合事件委托的事件有：<code>click</code>，<code>mousedown</code>，<code>mouseup</code>，<code>keydown</code>，<code>keyup</code>，<code>keypress</code></p>
<p>从上面应用场景中，我们就可以看到使用事件委托存在两大优点：</p>
<ul>
<li>减少整个页面所需的内存，提升整体性能</li>
<li>动态绑定，减少重复工作</li>
</ul>
<p>但是使用事件委托也是存在局限性：</p>
<ul>
<li><code>focus</code>、<code>blur </code>这些事件没有事件冒泡机制，所以无法进行委托绑定事件</li>
<li><code>mousemove</code>、<code>mouseout </code>这样的事件，虽然有事件冒泡，但是只能不断通过位置去计算定位，对性能消耗高，因此也是不适合于事件委托的</li>
</ul>
<p>如果把所有事件都用事件代理，可能会出现事件误判，即本不该被触发的事件被绑定上了事件</p>
<h2 id="_7-7" tabindex="-1">7-7 <a class="header-anchor" href="#_7-7" aria-label="Permalink to &quot;7-7&quot;"></a></h2>
<h3 id="javascript-中内存泄漏有哪几种情况" tabindex="-1">JavaScript 中内存泄漏有哪几种情况？ <a class="header-anchor" href="#javascript-中内存泄漏有哪几种情况" aria-label="Permalink to &quot;JavaScript 中内存泄漏有哪几种情况？&quot;"></a></h3>
<h4 id="一、内存泄漏是什么" tabindex="-1">一、内存泄漏是什么 <a class="header-anchor" href="#一、内存泄漏是什么" aria-label="Permalink to &quot;一、内存泄漏是什么&quot;"></a></h4>
<p>内存泄漏（Memory leak）是在计算机科学中，由于疏忽或错误造成程序未能释放已经不再使用的内存</p>
<p>并非指内存在物理上的消失，而是应用程序分配某段内存后，由于设计错误，导致在释放该段内存之前就失去了对该段内存的控制，从而造成了内存的浪费</p>
<p>程序的运行需要内存。只要程序提出要求，操作系统或者运行时就必须供给内存</p>
<p>对于持续运行的服务进程，必须及时释放不再用到的内存。否则，内存占用越来越高，轻则影响系统性能，重则导致进程崩溃</p>
<h4 id="二、垃圾回收机制" tabindex="-1">二、垃圾回收机制 <a class="header-anchor" href="#二、垃圾回收机制" aria-label="Permalink to &quot;二、垃圾回收机制&quot;"></a></h4>
<p>Javascript 具有自动垃圾回收机制（GC：Garbage Collecation），也就是说，执行环境会负责管理代码执行过程中使用的内存</p>
<p>原理：垃圾收集器会定期（周期性）找出那些不在继续使用的变量，然后释放其内存</p>
<p>通常情况下有两种实现方式：</p>
<ul>
<li>标记清除</li>
<li>引用计数</li>
</ul>
<p><strong>标记清除</strong></p>
<p><code>JavaScript</code>最常用的垃圾收回机制</p>
<p>当变量进入执行环境是，就标记这个变量为“进入环境“。进入环境的变量所占用的内存就不能释放，当变量离开环境时，则将其标记为“离开环境“</p>
<p>垃圾回收程序运行的时候，会标记内存中存储的所有变量。然后，它会将所有在上下文中的变量，以及被在上下文中的变量引用的变量的标记去掉</p>
<p>在此之后再被加上标记的变量就是待删除的了，原因是任何在上下文中的变量都访问不到它们了</p>
<p>随后垃圾回收程序做一次内存清理，销毁带标记的所有值并收回它们的内存</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 19</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"> // 把 m,n,add() 标记为进入环境。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(m, n) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 把 a, b, c标记为进入环境。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(n) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// a,b,c标记为离开环境，等待垃圾回收。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">++</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> b</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> c</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p><strong>引用计数</strong></p>
<p>语言引擎有一张&quot;引用表&quot;，保存了内存里面所有的资源（通常是各种值）的引用次数。如果一个值的引用次数是<code>0</code>，就表示这个值不再用到了，因此可以将这块内存释放</p>
<p>如果一个值不再需要了，引用数却不为<code>0</code>，垃圾回收机制无法释放这块内存，从而导致内存泄漏</p>
<h4 id="三、常见内存泄漏情况" tabindex="-1">三、常见内存泄漏情况 <a class="header-anchor" href="#三、常见内存泄漏情况" aria-label="Permalink to &quot;三、常见内存泄漏情况&quot;"></a></h4>
<p>意外的全局变量</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    bar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "this is a hidden global variable"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>另一种意外的全局变量可能由 <code>this</code> 创建：</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.variable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "potential accidental global"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// foo 调用自己，this 指向了全局对象（window）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span></code></pre>
</div><p>上述使用严格模式，可以避免意外的全局变量</p>
<p>定时器也常会造成内存泄露</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> someResource </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> getData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">setInterval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> node </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'Node'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(node) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        // 处理 node 和 someResource</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">       node.innerHTML </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(someResource);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span></code></pre>
</div><p>如果<code>id</code>为Node的元素从<code>DOM</code>中移除，该定时器仍会存在，同时，因为回调函数中包含对<code>someResource</code>的引用，定时器外面的<code>someResource</code>也不会被释放</p>
<p>包括我们之前所说的闭包，维持函数内局部变量，使其得不到释放</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> bindEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'XXX'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> unused</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(obj, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'闭包内引用obj obj不会被释放'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 解决方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>没有清理对<code>DOM</code>元素的引用同样造成内存泄露</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> refA</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'refA'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">document.body.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">removeChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(refA); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// dom删除了</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(refA, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'refA'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 但是还存在引用能console出整个div 没有被回收</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">refA </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(refA, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'refA'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 解除引用</span></span></code></pre>
</div><p>包括使用事件监听<code>addEventListener</code>监听的时候，在不监听的情况下使用<code>removeEventListener</code>取消对事件监听</p>
<h2 id="_7-6" tabindex="-1">7-6 <a class="header-anchor" href="#_7-6" aria-label="Permalink to &quot;7-6&quot;"></a></h2>
<h3 id="restful-接口规范是什么" tabindex="-1">RESTful 接口规范是什么？ <a class="header-anchor" href="#restful-接口规范是什么" aria-label="Permalink to &quot;RESTful 接口规范是什么？&quot;"></a></h3>
<p><code>RESTful 接口规范</code>是一种设计 Web 服务接口的风格和规范，遵循 REST（Representational State Transfer）架构。它的设计原则包括以下几点：</p>
<ol>
<li><strong>资源（Resources）</strong>：将系统中的所有事物视为资源，每个资源都有一个唯一的标识符（通常是 URL），用于对其进行操作。</li>
<li><strong>统一接口（Uniform Interface）</strong>：接口设计应该简单一致，包括以下几个方面：
<ul>
<li>使用标准的 HTTP 方法（GET、POST、PUT、DELETE 等）来对资源进行操作。</li>
<li>使用标准的 HTTP 状态码（如 200、404、500）来表示请求结果。</li>
<li>使用资源的 URL 来唯一标识资源。</li>
<li>使用适当的 MIME 类型（如 JSON、XML）来传输数据。</li>
</ul>
</li>
<li><strong>状态无关（Stateless）</strong>：每个请求都应该包含足够的信息，服务器不需要保存客户端的状态。这样可以使系统更加简单、可伸缩性更好。</li>
<li><strong>客户端 - 服务器分离（Client-Server Separation）</strong>：客户端和服务器之间的交互应该通过标准化的接口进行，使得客户端和服务器可以独立地进行演化。</li>
<li><strong>可缓存性（Cacheability）</strong>：对于经常不变的数据，应该使用合适的缓存机制，提高系统的性能和可伸缩性。</li>
<li><strong>按需代码（Code on Demand）</strong>（可选）：服务器可以向客户端传输可执行代码，以提供更丰富的功能。</li>
</ol>
<p>遵循 RESTful 接口规范能够使得系统具有良好的可维护性、可伸缩性和性能，并且更容易与其他系统进行集成。</p>
<h2 id="_7-5" tabindex="-1">7-5 <a class="header-anchor" href="#_7-5" aria-label="Permalink to &quot;7-5&quot;"></a></h2>
<h3 id="如何让-var-a-b-a-1-b-2-解构赋值成功" tabindex="-1">如何让 var [a, b] = {a: 1, b: 2} 解构赋值成功？ <a class="header-anchor" href="#如何让-var-a-b-a-1-b-2-解构赋值成功" aria-label="Permalink to &quot;如何让 var [a, b] = {a: 1, b: 2} 解构赋值成功？&quot;"></a></h3>
<blockquote>
<p>如果直接运行:</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{a:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'1'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,b:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'2'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">obj</span></span></code></pre>
</div><p><strong>运行结果：</strong> 报错！<code>Uncaught TypeError: obj is not iterable at .....</code></p>
<p>obj这个对象是不可迭代的</p>
</blockquote>
<h4 id="_1、可迭代协议" tabindex="-1">1、可迭代协议 <a class="header-anchor" href="#_1、可迭代协议" aria-label="Permalink to &quot;1、可迭代协议&quot;"></a></h4>
<p>可迭代协议允许 JavaScript 对象定义或定制它们的迭代行为，例如，在一个 <code>for..of</code> 结构中，哪些值可以被遍历到。一些内置类型同时是<strong>内置的可迭代对象</strong>，并且有默认的迭代行为，比如 <code>Array</code> 或者 <code>Map</code>，而其他内置类型则不是（比如 <code>Object</code>）。</p>
<p>要成为可迭代对象，该对象必须实现 <code>@@iterator</code> 方法，这意味着对象（或者它原型链上的某个对象）必须有一个键为 <code>@@iterator</code> 的属性，可通过常量 <code>Symbol.iterator</code> 访问该属性：</p>
<p>[Symbol.iterator]</p>
<p>一个无参数的函数，其返回值为一个符合迭代器协议的对象。</p>
<p>当一个对象需要被迭代的时候（比如被置入一个 <code>for...of</code> 循环时），首先，会不带参数调用它的 <code>@@iterator</code> 方法，然后使用此方法返回的迭代器获得要迭代的值。</p>
<blockquote>
<p>简而言之就是让obj成为一个可迭代的对象需要它实现 <code>@@iterator</code> 方法，具体表现为对象身上要有一个名为<code>[Symbol.iterator]</code> 的方法。而数组和Map则是一开始就有这个方法，所以它们是可迭代的。</p>
</blockquote>
<h5 id="数组解构的本质" tabindex="-1">数组解构的本质 <a class="header-anchor" href="#数组解构的本质" aria-label="Permalink to &quot;数组解构的本质&quot;"></a></h5>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> array</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [a,b,c] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> array</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 本质上是</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> iterator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> array[Symbol.iterator]()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> iterator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">().value</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> iterator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">().value</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> iterator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">().value</span></span></code></pre>
</div><h4 id="_2、解决方案" tabindex="-1">2、解决方案 <a class="header-anchor" href="#_2、解决方案" aria-label="Permalink to &quot;2、解决方案&quot;"></a></h4>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    a: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'1'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    b: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'2'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    [Symbol.iterator]() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> keys</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">keys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">            next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">                if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> keys.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">                    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                        done: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                        value: obj[keys[index</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">                return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {done:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,value:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> obj</span></span></code></pre>
</div><h2 id="_7-4" tabindex="-1">7-4 <a class="header-anchor" href="#_7-4" aria-label="Permalink to &quot;7-4&quot;"></a></h2>
<h3 id="proxy-能够监听到对象中的对象的引用吗" tabindex="-1">Proxy 能够监听到对象中的对象的引用吗？ <a class="header-anchor" href="#proxy-能够监听到对象中的对象的引用吗" aria-label="Permalink to &quot;Proxy 能够监听到对象中的对象的引用吗？&quot;"></a></h3>
<p><code>Proxy</code>可以监听到对象中的对象的引用。</p>
<p>当使用<code>Proxy</code>包装一个对象时，可以为该对象的任何属性创建一个拦截器，包括属性值为对象的情况。</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  nestedObj: { foo: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'bar'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> handler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">prop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">receiver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Reflect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(target, prop, receiver)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'object'</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> &#x26;&#x26;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">!==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">      return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(value, handler)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'get'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, prop, target[prop])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    target[property] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">`Setting property '${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">property</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">}' to '${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">value</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">}'`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> proxyObj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(obj, handler)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">proxyObj.nestedObj.foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 'baz'</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // 输出: Setting property 'foo' to 'baz'</span></span></code></pre>
</div><h2 id="_7-3" tabindex="-1">7-3 <a class="header-anchor" href="#_7-3" aria-label="Permalink to &quot;7-3&quot;"></a></h2>
<h3 id="messagechannel-是什么-有什么使用场景" tabindex="-1">MessageChannel 是什么，有什么使用场景？ <a class="header-anchor" href="#messagechannel-是什么-有什么使用场景" aria-label="Permalink to &quot;MessageChannel 是什么，有什么使用场景？&quot;"></a></h3>
<p><code>MessageChannel</code> 是一个 JavaScript API，用于在两个独立的执行环境（如 Web Workers 或者不同的 browsing contexts）之间建立双向通信的通道。</p>
<p><code>MessageChannel</code> 提供了两个通信端点（<code>port1</code> 和 <code>port2</code>），可以在两个不同的执行环境之间传递消息，并通过事件监听的方式来处理这些消息。</p>
<p>使用场景包括但不限于：</p>
<ol>
<li><strong>Web Workers 通信</strong>：在 Web 开发中，<code>MessageChannel</code> 通常用于在主线程和 Web Worker 之间建立通信通道，以便主线程与 Worker 之间传递消息和数据。</li>
<li><strong>不同浏览上下文（browsing context）之间的通信</strong>：在现代浏览器中，多个标签页、iframe 或者其他类型的 browsing context 可以通过 <code>MessageChannel</code> 实现通信。</li>
<li><strong>SharedWorker 通信</strong>：<code>MessageChannel</code> 可以用于在主线程和 Shared Worker 之间建立通信通道。</li>
<li><strong>服务端和客户端之间的通信</strong>：<code>MessageChannel</code> 可以用于客户端（如浏览器）与服务端（如 WebSocket 服务器）之间的通信，特别是在与 WebSocket 或其他类似技术结合使用时。</li>
<li><strong>异步任务处理</strong>：在某些场景中，使用 <code>MessageChannel</code> 可以更方便地处理异步任务，因为它提供了独立于主线程的通信通道。</li>
</ol>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 创建 MessageChannel</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> channel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MessageChannel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> port1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> channel.port1;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> port2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> channel.port2;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 在主线程中</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> worker</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Worker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'worker.js'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">worker.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">postMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({ port: port2 }, [port2]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">port1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">onmessage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'Received message from worker:'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, event.data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 发送消息给 worker</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">port1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">postMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'Hello, Worker!'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span></code></pre>
</div><h2 id="_7-2" tabindex="-1">7-2 <a class="header-anchor" href="#_7-2" aria-label="Permalink to &quot;7-2&quot;"></a></h2>
<h3 id="mouseenter-和-mouseover-有什么区别" tabindex="-1">mouseEnter 和 mouseOver 有什么区别？ <a class="header-anchor" href="#mouseenter-和-mouseover-有什么区别" aria-label="Permalink to &quot;mouseEnter 和 mouseOver 有什么区别？&quot;"></a></h3>
<p><code>mouseenter</code> 和 <code>mouseover</code> 是两个用于处理鼠标进入元素时的事件，但它们在一些关键点上有所不同：</p>
<ol>
<li><strong>事件冒泡</strong>：
<ul>
<li><code>mouseenter</code>：这个事件在鼠标指针首次进入特定元素（或其子元素）时触发。当鼠标进入元素时，会触发该元素的 <code>mouseenter</code> 事件，但不会在元素的子元素上冒泡。因此，该事件通常用于检测鼠标首次进入元素时的动作。</li>
<li><code>mouseover</code>：这个事件在鼠标指针移动到某个元素上时触发，不论它是直接在这个元素上触发还是在其子元素上触发。当鼠标进入一个元素时，它会在该元素上触发 <code>mouseover</code> 事件，然后冒泡到父元素。</li>
</ul>
</li>
<li><strong>事件触发范围</strong>：
<ul>
<li><code>mouseenter</code>：当鼠标进入元素自身时触发，只在目标元素上触发，不会因为鼠标移动到其子元素上而再次触发。</li>
<li><code>mouseover</code>：不仅在目标元素上触发，也在其子元素上触发。所以，如果鼠标从一个子元素移动到另一个子元素，这些元素的父元素会触发多个 <code>mouseover</code> 事件。</li>
</ul>
</li>
<li><strong>事件对象的属性</strong>：
<ul>
<li><code>mouseenter</code>：事件对象通常会有 <code>relatedTarget</code> 属性，它指向鼠标移动前的那个元素。如果 <code>relatedTarget</code> 指向目标元素或为 <code>null</code>，那么事件就不会触发。</li>
<li><code>mouseover</code>：事件对象也会有 <code>relatedTarget</code> 属性，通常指向从中离开的那个元素。</li>
</ul>
</li>
</ol>
<h4 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;"></a></h4>
<ul>
<li><code>mouseenter</code> 更适合用来检测鼠标首次进入某个元素时的行为。</li>
<li><code>mouseover</code> 更适合用来检测鼠标在元素或其子元素之间移动时的行为，因为它冒泡。</li>
</ul>
<blockquote>
<p>在实际使用时，如果你只想在鼠标首次进入元素时触发某些行为（比如显示一个提示），可以使用 <code>mouseenter</code>；如果你希望在鼠标移动到某个元素或其子元素上时都触发某些行为（比如动态改变样式），可以使用 <code>mouseover</code>。</p>
</blockquote>
<h2 id="_7-1" tabindex="-1">7-1 <a class="header-anchor" href="#_7-1" aria-label="Permalink to &quot;7-1&quot;"></a></h2>
<h3 id="js的基础类型-typeof和instanceof的区别" tabindex="-1">Js的基础类型，typeof和instanceof的区别？ <a class="header-anchor" href="#js的基础类型-typeof和instanceof的区别" aria-label="Permalink to &quot;Js的基础类型，typeof和instanceof的区别？&quot;"></a></h3>
<p>基础类型有：<code>boolean、string、number、bigint、undefined、symbol、null</code>。</p>
<p><code>typeof</code>能识别所有的值类型，识别函数，能区分是否是引用类型。</p>
<p><code>instanceof</code>用于检测构造函数的 <code>prototype</code> 属性是否出现在某个实例对象的原型链上。</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "str"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"typeof a :>> "</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> a); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// typeof a :>>  string</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 999</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"typeof b :>> "</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> b); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// typeof b :>>  number</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> BigInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">9007199254740991</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"typeof c :>> "</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> c); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// typeof c :>>  bigint</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"typeof d :>> "</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> d); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// typeof d :>>  boolean</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"typeof e :>> "</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> e); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// typeof e :>>  undefined</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> f</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"f"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"typeof f :>> "</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> f); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// typeof f :>>  symbol</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> g</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"typeof g :>> "</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> g); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// typeof g :>>  object</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"typeof h :>> "</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> h); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// typeof h :>>  function</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> [];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"typeof i :>> "</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> i); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// typeof i :>>  object</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[第一步 编译安装httpd服务器]]></title>
            <link>https://www.imufeng.cn/training/linux/linux-lamp/first.html</link>
            <guid>https://www.imufeng.cn/training/linux/linux-lamp/first.html</guid>
            <pubDate>Sat, 05 Oct 2024 12:44:16 GMT</pubDate>
            <description><![CDATA[第一步 编译安装httpd服务器
 1、安装前准备
解压apr apr-util pcre httpd expat包
```
[root@localhost app] tar -xvf apr-1.6]]></description>
            <content:encoded><![CDATA[<h1 id="第一步-编译安装httpd服务器" tabindex="-1">第一步 编译安装httpd服务器 <a class="header-anchor" href="#第一步-编译安装httpd服务器" aria-label="Permalink to &quot;第一步 编译安装httpd服务器&quot;"></a></h1>
<h2 id="_1、安装前准备" tabindex="-1">1、安装前准备 <a class="header-anchor" href="#_1、安装前准备" aria-label="Permalink to &quot;1、安装前准备&quot;"></a></h2>
<p>解压apr apr-util pcre httpd expat包</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>[root@localhost app]# tar -xvf apr-1.6.5.tar.xz -C /app/</span></span>
<span class="line"><span>[root@localhost app]# tar -xvf apr-util-1.6.1.tar.xz -C /app/</span></span>
<span class="line"><span>[root@localhost app]# tar -xvf pcre-8.42.tar.xz -C /app/</span></span>
<span class="line"><span>[root@localhost app]# tar -xvf httpd-2.4.46.tar.xz -C /app/</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[root@localhost app]# ls</span></span>
<span class="line"><span>apr-1.6.5  apr-util-1.6.1  httpd-2.4.46  packages  pcre-8.42</span></span></code></pre>
</div><p>安装软件支持</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>[root@localhost apr-1.6.5]# dnf -y install gcc gcc-c++ make cmake gdb libstdc++*</span></span></code></pre>
</div><h2 id="_2、编译安装apr" tabindex="-1">2、编译安装apr <a class="header-anchor" href="#_2、编译安装apr" aria-label="Permalink to &quot;2、编译安装apr&quot;"></a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>[root@localhost apr-1.6.5]# pwd</span></span>
<span class="line"><span>/app/apr-1.6.5</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[root@localhost apr-1.6.5]# ./configure --prefix=/usr/local/apr</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[root@localhost apr-1.6.5]# make &#x26;&#x26; make install</span></span></code></pre>
</div><p>这里运行编译文件时可能会报错</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>rm: cannot remove 'libtoolT': No such file or directory</span></span></code></pre>
</div><p>解决：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>[root@localhost apr-1.6.5]# vim configure</span></span>
<span class="line"><span>#把RM='$RM'改为RM='$RM  -f'</span></span></code></pre>
</div><h2 id="_3、编译安装expat" tabindex="-1">3、编译安装expat <a class="header-anchor" href="#_3、编译安装expat" aria-label="Permalink to &quot;3、编译安装expat&quot;"></a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>[root@localhost expat-2.2.3]# pwd</span></span>
<span class="line"><span>/app/expat-2.2.3</span></span>
<span class="line"><span>[root@localhost expat-2.2.3]# ./configure --prefix=/usr/local/expat</span></span>
<span class="line"><span>make &#x26;&#x26; make install</span></span></code></pre>
</div><h2 id="_4、编译安装apr-util" tabindex="-1">4、编译安装apr-util <a class="header-anchor" href="#_4、编译安装apr-util" aria-label="Permalink to &quot;4、编译安装apr-util&quot;"></a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>[root@localhost apr-util-1.6.1]# pwd</span></span>
<span class="line"><span>/app/apr-util-1.6.1</span></span>
<span class="line"><span>[root@localhost apr-util-1.6.1]# ./configure --prefix=/usr/local/apr-util --with-apr=/usr/local/apr --with-expat=/usr/local/expat</span></span>
<span class="line"><span>make &#x26;&#x26; make install</span></span></code></pre>
</div><h2 id="_5、编译安装pcre" tabindex="-1">5、编译安装pcre <a class="header-anchor" href="#_5、编译安装pcre" aria-label="Permalink to &quot;5、编译安装pcre&quot;"></a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>[root@localhost pcre-8.42]# pwd</span></span>
<span class="line"><span>/app/pcre-8.42</span></span>
<span class="line"><span>[root@localhost pcre-8.42]# ./configure --prefix=/usr/local/pcre</span></span>
<span class="line"><span>[root@localhost pcre-8.42]# make &#x26;&#x26; make install</span></span></code></pre>
</div><h2 id="_6、编译安装httpd" tabindex="-1">6、编译安装httpd <a class="header-anchor" href="#_6、编译安装httpd" aria-label="Permalink to &quot;6、编译安装httpd&quot;"></a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>[root@localhost httpd-2.4.46]# pwd</span></span>
<span class="line"><span>/app/httpd-2.4.46</span></span>
<span class="line"><span>[root@localhost httpd-2.4.46]# ./configure --prefix=/usr/local/apache --with-apr=/usr/local/apr --with-apr-util=/usr/local/apr-util --with-pcre=/usr/local/pcre  --enable-so   --enable-rewrite --enable-ssl  --with-ssl=/usr/lib  --enable-auth-digest --enable-cgi --enable-suexec  --with-suexec-caller=daemon --with-suexec-docroot=/usr/local/apache/htdocs</span></span>
<span class="line"><span>#这里的编译选项应当是需要什么加什么，具体选项见说明文档</span></span></code></pre>
</div><blockquote>
<p>httpd服务的目录结构</p>
<p>服务目录：/usr/local/apache/</p>
<p>主配置文件：/usr/local/apache/conf/httpd.conf</p>
<p>网页目录：/usr/local/apache/htdocs/</p>
<p>服务脚本：/usr/local/apache/bin/apachectl</p>
<p>执行程序：/usr/local/apache/bin/httpd</p>
<p>访问日志： /usr/local/apache/log/access_log</p>
<p>错误日志： /usr/local/apache/log/error_log</p>
</blockquote>
<h2 id="_7、selinux配置" tabindex="-1">7、selinux配置 <a class="header-anchor" href="#_7、selinux配置" aria-label="Permalink to &quot;7、selinux配置&quot;"></a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>[root@localhost httpd-2.4.46]# getsebool -a | grep httpd</span></span>
<span class="line"><span>httpd_anon_write --> off</span></span>
<span class="line"><span>httpd_builtin_scripting --> on</span></span>
<span class="line"><span>httpd_can_check_spam --> off</span></span>
<span class="line"><span>httpd_can_connect_ftp --> off</span></span>
<span class="line"><span>httpd_can_connect_ldap --> off</span></span>
<span class="line"><span>httpd_can_connect_mythtv --> off</span></span>
<span class="line"><span>httpd_can_connect_zabbix --> off</span></span>
<span class="line"><span>httpd_can_network_connect --> off</span></span>
<span class="line"><span>httpd_can_network_connect_cobbler --> off</span></span>
<span class="line"><span>httpd_can_network_connect_db --> off</span></span>
<span class="line"><span>httpd_can_network_memcache --> off</span></span>
<span class="line"><span>httpd_can_network_relay --> off</span></span>
<span class="line"><span>httpd_can_sendmail --> off</span></span>
<span class="line"><span>httpd_dbus_avahi --> off</span></span>
<span class="line"><span>httpd_dbus_sssd --> off</span></span>
<span class="line"><span>httpd_dontaudit_search_dirs --> off</span></span>
<span class="line"><span>httpd_enable_cgi --> on</span></span>
<span class="line"><span>httpd_enable_ftp_server --> off</span></span>
<span class="line"><span>httpd_enable_homedirs --> off</span></span>
<span class="line"><span>httpd_execmem --> off</span></span>
<span class="line"><span>httpd_graceful_shutdown --> off</span></span>
<span class="line"><span>httpd_manage_ipa --> off</span></span>
<span class="line"><span>httpd_mod_auth_ntlm_winbind --> off</span></span>
<span class="line"><span>httpd_mod_auth_pam --> off</span></span>
<span class="line"><span>httpd_read_user_content --> off</span></span>
<span class="line"><span>httpd_run_ipa --> off</span></span>
<span class="line"><span>httpd_run_preupgrade --> off</span></span>
<span class="line"><span>httpd_run_stickshift --> off</span></span>
<span class="line"><span>httpd_serve_cobbler_files --> off</span></span>
<span class="line"><span>httpd_setrlimit --> off</span></span>
<span class="line"><span>httpd_ssi_exec --> off</span></span>
<span class="line"><span>httpd_sys_script_anon_write --> off</span></span>
<span class="line"><span>httpd_tmp_exec --> off</span></span>
<span class="line"><span>httpd_tty_comm --> off</span></span>
<span class="line"><span>httpd_unified --> off</span></span>
<span class="line"><span>httpd_use_cifs --> off</span></span>
<span class="line"><span>httpd_use_fusefs --> off</span></span>
<span class="line"><span>httpd_use_gpg --> off</span></span>
<span class="line"><span>httpd_use_nfs --> off</span></span>
<span class="line"><span>httpd_use_opencryptoki --> off</span></span>
<span class="line"><span>httpd_use_openstack --> off</span></span>
<span class="line"><span>httpd_use_sasl --> off</span></span>
<span class="line"><span>httpd_verify_dns --> off</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[root@localhost httpd-2.4.46]# setsebool -P httpd_anon_write on</span></span>
<span class="line"><span>[root@localhost httpd-2.4.46]# setsebool -P httpd_can_check_spam on</span></span>
<span class="line"><span>[root@localhost httpd-2.4.46]# setsebool -P httpd_can_network_connect on</span></span>
<span class="line"><span>[root@localhost httpd-2.4.46]# setsebool -P httpd_can_network_connect_db on</span></span>
<span class="line"><span>[root@localhost httpd-2.4.46]# setsebool -P httpd_can_network_relay on</span></span>
<span class="line"><span>[root@localhost httpd-2.4.46]# setsebool -P httpd_tmp_exec on</span></span>
<span class="line"><span>[root@localhost httpd-2.4.46]# setsebool -P httpd_ssi_exec  on</span></span>
<span class="line"><span>[root@localhost httpd-2.4.46]# setsebool -P httpd_enable_cgi  on</span></span></code></pre>
</div><h2 id="_8、防火墙配置" tabindex="-1">8、防火墙配置 <a class="header-anchor" href="#_8、防火墙配置" aria-label="Permalink to &quot;8、防火墙配置&quot;"></a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>[root@localhost httpd-2.4.46]# firewall-cmd  --add-port=80/tcp --permanent </span></span>
<span class="line"><span>success</span></span>
<span class="line"><span>[root@localhost httpd-2.4.46]# firewall-cmd  --add-port=443/tcp --permanent </span></span>
<span class="line"><span>success</span></span>
<span class="line"><span>[root@localhost httpd-2.4.46]# firewall-cmd  --add-port=8080/tcp --permanent </span></span>
<span class="line"><span>success</span></span>
<span class="line"><span>[root@localhost httpd-2.4.46]# firewall-cmd  --add-port=8888/tcp --permanent </span></span>
<span class="line"><span>success</span></span>
<span class="line"><span>[root@localhost httpd-2.4.46]# firewall-cmd  --add-service=http  --permanent </span></span>
<span class="line"><span>success</span></span>
<span class="line"><span>[root@localhost httpd-2.4.46]# firewall-cmd  --add-service=https  --permanent </span></span>
<span class="line"><span>success</span></span>
<span class="line"><span>[root@localhost httpd-2.4.46]# firewall-cmd  --reload</span></span>
<span class="line"><span>success</span></span></code></pre>
</div><h2 id="_9、修改主配置文件httpd-conf" tabindex="-1">9、修改主配置文件httpd.conf <a class="header-anchor" href="#_9、修改主配置文件httpd-conf" aria-label="Permalink to &quot;9、修改主配置文件httpd.conf&quot;"></a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>[root@localhost conf]# pwd</span></span>
<span class="line"><span>/usr/local/apache/conf</span></span>
<span class="line"><span>[root@localhost conf]# vim httpd.conf </span></span>
<span class="line"><span></span></span>
<span class="line"><span>ServerAdmin mufeng.yu@qq.com		#管理员邮箱</span></span>
<span class="line"><span>ServerName www.mufeng.com:80	#站点名称</span></span></code></pre>
</div><blockquote>
<p>ServerRoot：服务目录</p>
<p>ServerAdmin：管理员邮箱</p>
<p>User：运行服务的用户身份</p>
<p>Group：运行服务的组身份</p>
<p>ServerName：网站服务器的域名</p>
<p>DocumentRoot：网页文档的根目录</p>
<p>Listen：监听的IP地址、端口号</p>
<p>PidFile：保存httpd进程PID号的文件</p>
<p>DirectoryIndex：默认的索引页文件</p>
<p>ErrorLog：错误日志文件的位置</p>
<p>CustomLog：访问日志文件的位置</p>
<p>LogLevel：记录日志的级别，默认为warn</p>
<p>Timeout：网络连接超时，默认为300秒</p>
<p>KeepAlive：是否保持连接，可选On或Off</p>
<p>MaxKeepAliveRequests：每次连接最多请求文件数</p>
<p>KeepAliveTimeout：保持连接状态时的超时时间</p>
<p>Include：需要包含进来的其他配置文件</p>
</blockquote>
<h2 id="_10、http-conf-语法检查" tabindex="-1">10、http.conf 语法检查 <a class="header-anchor" href="#_10、http-conf-语法检查" aria-label="Permalink to &quot;10、http.conf 语法检查&quot;"></a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>[root@localhost conf]# /usr/local/apache/bin/apachectl  -t</span></span>
<span class="line"><span>Syntax OK</span></span></code></pre>
</div><h2 id="_11、启动httpd服务" tabindex="-1">11、启动httpd服务 <a class="header-anchor" href="#_11、启动httpd服务" aria-label="Permalink to &quot;11、启动httpd服务&quot;"></a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>[root@localhost conf]# /usr/local/apache/bin/apachectl start</span></span></code></pre>
</div><h2 id="_12、测试" tabindex="-1">12、测试 <a class="header-anchor" href="#_12、测试" aria-label="Permalink to &quot;12、测试&quot;"></a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>[root@localhost conf]# wget www.mufeng.com</span></span>
<span class="line"><span>--2020-12-01 08:41:48--  http://www.mufeng.com/</span></span>
<span class="line"><span>Resolving www.mufeng.com (www.mufeng.com)... 192.35.35.1</span></span>
<span class="line"><span>Connecting to www.mufeng.com (www.mufeng.com)|192.35.35.1|:80... connected.</span></span>
<span class="line"><span>HTTP request sent, awaiting response... 200 OK</span></span>
<span class="line"><span>Length: 45 [text/html]</span></span>
<span class="line"><span>Saving to: ‘index.html’</span></span>
<span class="line"><span></span></span>
<span class="line"><span>index.html                        100%[==========================================================>]      45  --.-KB/s    in 0s      </span></span>
<span class="line"><span></span></span>
<span class="line"><span>2020-12-01 08:41:48 (7.99 MB/s) - ‘index.html’ saved [45/45]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[root@localhost conf]# vim index.html </span></span>
<span class="line"><span>&#x3C;html>&#x3C;body>&#x3C;h1>It works!&#x3C;/h1>&#x3C;/body>&#x3C;/html></span></span></code></pre>
</div><blockquote>
<p>这个测试完全可以通过ip地址来实现，如果想通过域名访问，需要配置自己的DNS域名服务器bind</p>
</blockquote>
<h2 id="_13、测试本机httpd服务器的性能" tabindex="-1">13、测试本机httpd服务器的性能 <a class="header-anchor" href="#_13、测试本机httpd服务器的性能" aria-label="Permalink to &quot;13、测试本机httpd服务器的性能&quot;"></a></h2>
<p>ab命令格式说明</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>ab [-q] -c 并发请求数 -n 总的请求数 [http://]域名[:端口]/路径</span></span></code></pre>
</div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>[root@localhost conf]# ulimit -n 3600</span></span>
<span class="line"><span>[root@localhost bin]# pwd</span></span>
<span class="line"><span>/usr/local/apache/bin</span></span>
<span class="line"><span>[root@localhost bin]# ./ab -q -c 2000 -n 4000 http://www.mufeng.com/ </span></span>
<span class="line"><span>This is ApacheBench, Version 2.3 &#x3C;$Revision: 1879490 $></span></span>
<span class="line"><span>Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span></span>
<span class="line"><span>Licensed to The Apache Software Foundation, http://www.apache.org/</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Benchmarking www.mufeng.com (be patient).....done</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>Server Software:        Apache/2.4.46</span></span>
<span class="line"><span>Server Hostname:        www.mufeng.com</span></span>
<span class="line"><span>Server Port:            80</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Document Path:          /</span></span>
<span class="line"><span>Document Length:        45 bytes</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Concurrency Level:      2000</span></span>
<span class="line"><span>Time taken for tests:   0.519 seconds</span></span>
<span class="line"><span>Complete requests:      4000</span></span>
<span class="line"><span>Failed requests:        0</span></span>
<span class="line"><span>Total transferred:      1156000 bytes</span></span>
<span class="line"><span>HTML transferred:       180000 bytes</span></span>
<span class="line"><span>Requests per second:    7703.79 [#/sec] (mean)</span></span>
<span class="line"><span>Time per request:       259.613 [ms] (mean)</span></span>
<span class="line"><span>Time per request:       0.130 [ms] (mean, across all concurrent requests)</span></span>
<span class="line"><span>Transfer rate:          2174.21 [Kbytes/sec] received</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Connection Times (ms)</span></span>
<span class="line"><span>              min  mean[+/-sd] median   max</span></span>
<span class="line"><span>Connect:        0    9  17.2      4      71</span></span>
<span class="line"><span>Processing:     0   17  46.8      8     428</span></span>
<span class="line"><span>Waiting:        0   16  46.7      7     428</span></span>
<span class="line"><span>Total:          0   26  58.4     12     498</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Percentage of the requests served within a certain time (ms)</span></span>
<span class="line"><span>  50%     12</span></span>
<span class="line"><span>  66%     13</span></span>
<span class="line"><span>  75%     15</span></span>
<span class="line"><span>  80%     16</span></span>
<span class="line"><span>  90%     24</span></span>
<span class="line"><span>  95%     81</span></span>
<span class="line"><span>  98%    283</span></span>
<span class="line"><span>  99%    288</span></span>
<span class="line"><span> 100%    498 (longest request)</span></span></code></pre>
</div><p>注：构建服务所需的包可在<a href="https://download.csdn.net/download/qq_45417634/13208956" target="_blank" rel="noreferrer">server_source_2020.iso </a>请自行下载，您也可以在所需安装包官网下载
本地源配置、防火墙、selinux等是linux较为基础的内容，不再赘述。
本文均为原创，如需与博主交流可email至mufeng.yu@qq.com</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[LAMP 编译安装三部曲]]></title>
            <link>https://www.imufeng.cn/training/linux/linux-lamp/</link>
            <guid>https://www.imufeng.cn/training/linux/linux-lamp/</guid>
            <pubDate>Sat, 05 Oct 2024 12:44:16 GMT</pubDate>
            <description><![CDATA[LAMP 是一种常用于搭建网站和应用程序的服务器架构，它由 Linux、Apache、MySQL（或MariaDB）、PHP 四个开源软件组成，也分别代表了操作系统、Web 服务器、数据库以及服务器端]]></description>
            <content:encoded><![CDATA[<h1 id="lamp-编译安装三部曲" tabindex="-1">LAMP 编译安装三部曲 <a class="header-anchor" href="#lamp-编译安装三部曲" aria-label="Permalink to &quot;LAMP 编译安装三部曲&quot;"></a></h1>
<blockquote>
<p>本博文摘自于2019年博主相关课程笔记，由于相关技术过时，故不再做详细修改，请参阅后续教程。</p>
</blockquote>
<p>LAMP 是一种常用于搭建网站和应用程序的服务器架构，它由 Linux、Apache、MySQL（或MariaDB）、PHP 四个开源软件组成，也分别代表了操作系统、Web 服务器、数据库以及服务器端脚本语言。 与 LNMP 架构类似，区别在于使用的 Web 服务器组件。</p>
<p>本教程将用三步带你完成 LAMP 架构的编译安装。</p>
<ol>
<li><a href="./first.html"> 第一步 编译安装 httpd 服务器 </a></li>
<li><a href="./second.html"> 第二步 编译安装mariadb数据库环境</a></li>
<li><a href="./third.html"> 第三步 编译安装PHP </a></li>
</ol>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[第二步 编译安装mariadb数据库环境]]></title>
            <link>https://www.imufeng.cn/training/linux/linux-lamp/second.html</link>
            <guid>https://www.imufeng.cn/training/linux/linux-lamp/second.html</guid>
            <pubDate>Sat, 05 Oct 2024 12:44:16 GMT</pubDate>
            <description><![CDATA[第二步 编译安装mariadb数据库环境
 1、Mariadb数据库概述
Mariadb是开源的关系型数据库服务器软件
- 目前由SUN公司开发和维护
- 官方站点：https://mariadb.o]]></description>
            <content:encoded><![CDATA[<h1 id="第二步-编译安装mariadb数据库环境" tabindex="-1">第二步 编译安装mariadb数据库环境 <a class="header-anchor" href="#第二步-编译安装mariadb数据库环境" aria-label="Permalink to &quot;第二步 编译安装mariadb数据库环境&quot;"></a></h1>
<h2 id="_1、mariadb数据库概述" tabindex="-1">1、Mariadb数据库概述 <a class="header-anchor" href="#_1、mariadb数据库概述" aria-label="Permalink to &quot;1、Mariadb数据库概述&quot;"></a></h2>
<p>Mariadb是开源的关系型数据库服务器软件</p>
<ul>
<li>
<p>目前由SUN公司开发和维护</p>
</li>
<li>
<p>官方站点：<a href="https://mariadb.org/" target="_blank" rel="noreferrer">https://mariadb.org/</a></p>
</li>
</ul>
<p>Mariadb的特点</p>
<ul>
<li>
<p>多线程、多用户</p>
</li>
<li>
<p>基于客户/服务器架构</p>
</li>
<li>
<p>简单易用</p>
</li>
<li>
<p>查询速度快</p>
</li>
<li>
<p>安全可靠</p>
</li>
</ul>
<h2 id="_2、安装前准备工作" tabindex="-1">2、安装前准备工作 <a class="header-anchor" href="#_2、安装前准备工作" aria-label="Permalink to &quot;2、安装前准备工作&quot;"></a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>[root@localhost packages]# dnf remove -y mariadb mariadb-server		#卸载已安装的mariadb服务</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[root@localhost packages]# yum install -y cmake gcc-c++  libstdc++-*  ncurses-devel libaio* bison ncurses-devel openssl-devel openssl gcc-c++ cmake </span></span>
<span class="line"><span></span></span>
<span class="line"><span>[root@localhost packages]# mkdir -p /usr/local/mysql				#创建需要的文件夹</span></span>
<span class="line"><span>[root@localhost packages]# mkdir -p /var/run/mysqld</span></span>
<span class="line"><span>[root@localhost packages]# mkdir -p /var/lib/mysql</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[root@localhost packages]# which nologin							#创建用户以及用户组</span></span>
<span class="line"><span>/usr/sbin/nologin</span></span>
<span class="line"><span>[root@localhost packages]#  groupadd mysql</span></span>
<span class="line"><span>[root@localhost packages]# useradd -g mysql -d /usr/local/mysql/ -s /usr/sbin/nologin mysql</span></span>
<span class="line"><span>useradd: warning: the home directory already exists.</span></span>
<span class="line"><span>Not copying any file from skel directory into it.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[root@localhost packages]# chmod 777 -R /var/lib/mysql/ /var/run/mysqld/ /usr/local/mysql/	#文件夹读写权限</span></span>
<span class="line"><span>[root@localhost packages]# chown mysql:mysql -R /var/lib/mysql/ /var/run/mysqld/ /usr/local/mysql/</span></span></code></pre>
</div><h2 id="_3、解压mariadb安装包" tabindex="-1">3、解压mariadb安装包 <a class="header-anchor" href="#_3、解压mariadb安装包" aria-label="Permalink to &quot;3、解压mariadb安装包&quot;"></a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>[root@localhost packages]# tar -xvf /app/packages/mariadb-10.5.6.tar.xz -C /app/</span></span></code></pre>
</div><h2 id="_4、编译选项参考" tabindex="-1">4、编译选项参考 <a class="header-anchor" href="#_4、编译选项参考" aria-label="Permalink to &quot;4、编译选项参考&quot;"></a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DMYSQL_DATADIR=/usr/local/mysql/data -DSYSCONFDIR=/etc  -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_ARCHIVE_STORAGE_ENGINE=1 -DWITH_BLACKHOLE_STORAGE_ENGINE=1 -DWITH_READLINE=1 -DWITH_SSL=system -DWITH_ZLIB=system -DWITH_LIBWRAP=0 -DMYSQL_UNIX_ADDR=/var/lib/mysql/mysql.sock -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci -DWITHOUT_TOKUDB=1		#编译选项详见mariadb的说明文档</span></span></code></pre>
</div><h2 id="_5、开始编译安装" tabindex="-1">5、开始编译安装 <a class="header-anchor" href="#_5、开始编译安装" aria-label="Permalink to &quot;5、开始编译安装&quot;"></a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>[root@localhost mariadb-10.5.6]# cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DMYSQL_DATADIR=/usr/local/mysql/data -DSYSCONFDIR=/etc  -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_ARCHIVE_STORAGE_ENGINE=1 -DWITH_BLACKHOLE_STORAGE_ENGINE=1 -DWITH_READLINE=1 -DWITH_SSL=system -DWITH_ZLIB=system -DWITH_LIBWRAP=0 -DMYSQL_UNIX_ADDR=/var/lib/mysql/mysql.sock -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci -DWITHOUT_TOKUDB=1</span></span>
<span class="line"><span>[root@localhost mariadb-10.5.6]# make &#x26;&#x26; make install		#编译安装时间会有点长</span></span></code></pre>
</div><h2 id="_6、安装后的配置" tabindex="-1">6、安装后的配置 <a class="header-anchor" href="#_6、安装后的配置" aria-label="Permalink to &quot;6、安装后的配置&quot;"></a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>[root@localhost mariadb-10.5.6]# export PATH=$PATH:/usr/local/mysql/bin		#环境变量</span></span>
<span class="line"><span>[root@localhost mariadb-10.5.6]# /usr/local/mysql/scripts/mysql_install_db --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data  --defaults-file=/etc/my.cnf --socket=/var/lib/mysql/mysql.sock		#初始化</span></span>
<span class="line"><span>#设置开机启动</span></span>
<span class="line"><span>[root@localhost mysql]# cp -rf support-files/mysql.server /etc/init.d/mysqld </span></span>
<span class="line"><span>[root@localhost mysql]# chmod 777 /etc/init.d/mysqld </span></span>
<span class="line"><span>[root@localhost mysql]# chkconfig --add mysqld</span></span>
<span class="line"><span>[root@localhost mysql]# chkconfig mysqld on  </span></span>
<span class="line"><span>[root@localhost mysql]# vim /etc/init.d/mysqld </span></span>
<span class="line"><span>basedir=/usr/local/mysql</span></span>
<span class="line"><span>datadir=/usr/local/mysql/data</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[root@localhost /]# cd /usr/local/mysql/</span></span>
<span class="line"><span>[root@localhost mysql]# chmod -R 777 data</span></span>
<span class="line"><span>[root@localhost mysql]# mysqld_safe --datadir='/usr/local/mysql/data'</span></span>
<span class="line"><span>201204 02:05:33 mysqld_safe Logging to '/var/log/mariadb/mariadb.log'.</span></span>
<span class="line"><span>201204 02:05:34 mysqld_safe Starting mariadbd daemon with databases from /usr/local/mysql/data</span></span></code></pre>
</div><h2 id="_7、开启服务" tabindex="-1">7、开启服务 <a class="header-anchor" href="#_7、开启服务" aria-label="Permalink to &quot;7、开启服务&quot;"></a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>[root@localhost mysql]# systemctl start mysql</span></span></code></pre>
</div><h2 id="_8、登录以及退出" tabindex="-1">8、登录以及退出 <a class="header-anchor" href="#_8、登录以及退出" aria-label="Permalink to &quot;8、登录以及退出&quot;"></a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>[root@localhost mysql]# mysql -u root</span></span>
<span class="line"><span>Welcome to the MariaDB monitor.  Commands end with ; or \g.</span></span>
<span class="line"><span>Your MariaDB connection id is 4</span></span>
<span class="line"><span>Server version: 10.5.6-MariaDB Source distribution</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>MariaDB [(none)]> quit</span></span>
<span class="line"><span>Bye</span></span></code></pre>
</div><blockquote>
<p>mysql -u root [-p] 未指定-p时表示不需要密码登录</p>
<p>退出可以使用exit quit</p>
</blockquote>
<h2 id="_9、数据库的简单使用" tabindex="-1">9、数据库的简单使用 <a class="header-anchor" href="#_9、数据库的简单使用" aria-label="Permalink to &quot;9、数据库的简单使用&quot;"></a></h2>
<pre><code>查看数据库列表信息
</code></pre>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>SHOW DATABASES</span></span></code></pre>
</div><pre><code>查看数据库中的数据表信息
</code></pre>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>USE 数据库名</span></span>
<span class="line"><span>SHOW TABLES</span></span></code></pre>
</div><pre><code>显示数据表的结构
</code></pre>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>DESCRIBE [数据库名.表名]</span></span></code></pre>
</div><pre><code>创建新的数据库
</code></pre>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>CREATE DATABASE 数据库名</span></span></code></pre>
</div><pre><code>创建数据表
</code></pre>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>CREATE TABLE 表名 (字段定义...)</span></span></code></pre>
</div><pre><code>删除数据表
</code></pre>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>DROP TABLE [数据库名.表名]、</span></span></code></pre>
</div><pre><code>删除数据库
</code></pre>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>DROP DATABASE [数据库名]</span></span></code></pre>
</div><pre><code>向数据表中插入记录
</code></pre>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>INSERT INTO 表名(字段1, 字段2, ……)  VALUES(字段1的值, 字段2的值, ……)</span></span></code></pre>
</div><pre><code>从数据库中查找
</code></pre>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>SELECT 字段名1,字段名2 …… FROM 表名 WHERE 条件表达式</span></span></code></pre>
</div><pre><code>修改、更新数据表中的数据记录
</code></pre>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>UPDATE 表名 SET 字段名1=字段值1[,字段名2=字段值2]  WHERE 条件表达式</span></span></code></pre>
</div><pre><code>在数据表中删除指定的数据记录
</code></pre>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>DELETE FROM 表名 WHERE 条件表达式</span></span></code></pre>
</div><h2 id="_10、数据库维护" tabindex="-1">10、数据库维护 <a class="header-anchor" href="#_10、数据库维护" aria-label="Permalink to &quot;10、数据库维护&quot;"></a></h2>
<p>备份数据库</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>[root@localhost ~]# mysqldump -u root -p auth > mysql-auth.sql				#备份auth库</span></span>
<span class="line"><span>Enter password:</span></span>
<span class="line"><span>[root@localhost ~]# mysqldump -u root -p --all-databases > mysql-all.sql	#备份所有库</span></span>
<span class="line"><span>[root@localhost ~]# ls -l mysql-*.sql</span></span>
<span class="line"><span>-rw-r--r-- 1 root root 292300 09-17 04:55 mysql-all.sql</span></span>
<span class="line"><span>-rw-r--r-- 1 root root   1678 09-17 04:55 mysql-auth.sql</span></span></code></pre>
</div><p>从备份中恢复</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>[root@localhost ~]# mysql -u root -p auth &#x3C; mysql-auth.sql			#恢复auth库 </span></span>
<span class="line"><span>[root@localhost ~]# mysql -u root -p &#x3C; mysql-all.sql 				#恢复所有库</span></span></code></pre>
</div><p>注：构建服务所需的包可在<a href="https://download.csdn.net/download/qq_45417634/13208956" target="_blank" rel="noreferrer">server_source_2020.iso </a>请自行下载，您也可以在所需安装包官网下载
本地源配置、防火墙、selinux等是linux较为基础的内容，不再赘述。
本文均为原创，如需与博主交流可email至mufeng.yu@qq.com</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[第三步 编译安装PHP]]></title>
            <link>https://www.imufeng.cn/training/linux/linux-lamp/third.html</link>
            <guid>https://www.imufeng.cn/training/linux/linux-lamp/third.html</guid>
            <pubDate>Sat, 05 Oct 2024 12:44:16 GMT</pubDate>
            <description><![CDATA[第三步 编译安装PHP
 1、安装前准备
```
编译安装libmcrypt
[root@localhost app] tar -xvf /app/packages/libmcrypt-2.5.8.t]]></description>
            <content:encoded><![CDATA[<h1 id="第三步-编译安装php" tabindex="-1">第三步 编译安装PHP <a class="header-anchor" href="#第三步-编译安装php" aria-label="Permalink to &quot;第三步 编译安装PHP&quot;"></a></h1>
<h2 id="_1、安装前准备" tabindex="-1">1、安装前准备 <a class="header-anchor" href="#_1、安装前准备" aria-label="Permalink to &quot;1、安装前准备&quot;"></a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>#编译安装libmcrypt</span></span>
<span class="line"><span>[root@localhost app]# tar -xvf /app/packages/libmcrypt-2.5.8.tar.xz -C /app/</span></span>
<span class="line"><span>[root@localhost libmcrypt-2.5.8]# ./configure --prefix=/usr/local/libmcrypt</span></span>
<span class="line"><span>[root@localhost libmcrypt-2.5.8]# make &#x26;&#x26; make install</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#编译安装mhash</span></span>
<span class="line"><span>[root@localhost libmcrypt-2.5.8]# tar -xvf /app/packages/mhash-0.9.9.9.tar.xz -C /app/</span></span>
<span class="line"><span>[root@localhost mhash-0.9.9.9]# ./configure --prefix=/usr/local/mhash</span></span>
<span class="line"><span>[root@localhost mhash-0.9.9.9]# make &#x26;&#x26; make install</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#编译安装mcrypt</span></span>
<span class="line"><span>[root@localhost libmcrypt-2.5.8]# tar -xvf /app/packages/mcrypt-2.6.8.tar.xz -C /app/</span></span>
<span class="line"><span>[root@localhost mcrypt-2.6.8]# export LD_LIBRARY_PATH=/usr/local/libmcrypt/lib:/usr/local/mhash/lib </span></span>
<span class="line"><span>[root@localhost mcrypt-2.6.8]# export LDFLAGS="-L/usr/local/mhash/lib -I/usr/local/mhash/include/" </span></span>
<span class="line"><span>[root@localhost mcrypt-2.6.8]# export CFLAGS="-I/usr/local/mhash/include/" </span></span>
<span class="line"><span>[root@localhost mcrypt-2.6.8]# ./configure --prefix=/usr/local/mcrypt --with-libmcrypt-prefix=/usr/local/libmcrypt</span></span>
<span class="line"><span>[root@localhost mcrypt-2.6.8]# make &#x26;&#x26; make install</span></span>
<span class="line"><span>#编译安装oniguruma</span></span>
<span class="line"><span>[root@localhost packages]wget https://github.com/kkos/oniguruma/archive/v6.9.4.tar.gz -O oniguruma-6.9.4.tar.gz </span></span>
<span class="line"><span>[root@localhost ~]# tar -xvf /app/packages/oniguruma-6.9.4.tar.gz -C /app/</span></span>
<span class="line"><span>[root@localhost oniguruma-6.9.4]# pwd</span></span>
<span class="line"><span>/app/oniguruma-6.9.4</span></span>
<span class="line"><span>[root@localhost oniguruma-6.9.4]# ./autogen.sh &#x26;&#x26; ./configure --prefix=/usr #这里安装路径只能指定/usr</span></span>
<span class="line"><span>[root@localhost oniguruma-6.9.4]# make &#x26;&#x26; make install</span></span>
<span class="line"><span>[root@localhost app]# dnf -y install libxml2-devel krb5-devel openssl-devel sqlite-devel libcurl-devel libxslt-devel  libjpeg-devel libzip-devel bzip2-devel libpng-devel  freetype-devel</span></span></code></pre>
</div><h2 id="_2、php编译选项参考" tabindex="-1">2、php编译选项参考 <a class="header-anchor" href="#_2、php编译选项参考" aria-label="Permalink to &quot;2、php编译选项参考&quot;"></a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>./configure --prefix=/usr/local/php --with-apxs2=/usr/local/apache/bin/apxs  --with-config-file-path=/usr/local/php/etc  --with-mysql --with-mysqli  --with-pdo-mysql --with-mysql-sock=/var/lib/mysql/mysql.sock  --enable-mbstring --enable-session --enable-fpm --enable-opcache --enable-fastcgi --with-fpm-user=daemon  --with-curl  --with-openssl --with-zlib --with-fpm-group=daemon  --enable-gd  --with-libmcrypt=/usr/local/libmcrypt --with-mcrypt=/usr/local/mcrypt  --with-freetype --with-jpeg --with-gettext  --enable-sockets --enable-xml --with-zip --with-libdir=lib64  --with-libxml --with-openssl --with-pear   -with-bz2  --with-session</span></span></code></pre>
</div><h2 id="_3、解压包" tabindex="-1">3、解压包 <a class="header-anchor" href="#_3、解压包" aria-label="Permalink to &quot;3、解压包&quot;"></a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>[root@localhost app]# tar -xvf /app/packages/php-7.4.11.tar.xz -C /app/</span></span></code></pre>
</div><h2 id="_4、编译安装" tabindex="-1">4、编译安装 <a class="header-anchor" href="#_4、编译安装" aria-label="Permalink to &quot;4、编译安装&quot;"></a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>[root@localhost php-7.4.11]# ./configure --prefix=/usr/local/php --with-apxs2=/usr/local/apache/bin/apxs  --with-config-file-path=/usr/local/php/etc  --with-mysql --with-mysqli  --with-pdo-mysql --with-mysql-sock=/var/lib/mysql/mysql.sock  --enable-mbstring --enable-session --enable-fpm --enable-opcache --enable-fastcgi --with-fpm-user=daemon  --with-curl  --with-openssl --with-zlib --with-fpm-group=daemon  --enable-gd  --with-libmcrypt=/usr/local/libmcrypt --with-mcrypt=/usr/local/mcrypt  --with-freetype --with-jpeg --with-gettext  --enable-sockets --enable-xml --with-zip --with-libdir=lib64  --with-libxml --with-openssl --with-pear   -with-bz2  --with-session</span></span>
<span class="line"><span>[root@localhost php-7.4.11]# make &#x26;&#x26; make install</span></span></code></pre>
</div><h2 id="_5、创建配置文件" tabindex="-1">5、创建配置文件 <a class="header-anchor" href="#_5、创建配置文件" aria-label="Permalink to &quot;5、创建配置文件&quot;"></a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>[root@localhost php-7.4.11]# pwd</span></span>
<span class="line"><span>/app/php-7.4.11</span></span>
<span class="line"><span>[root@localhost php-7.4.11]# cp -rf php.ini-production /usr/local/php/etc/php.ini</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[root@localhost php-fpm.d]# pwd</span></span>
<span class="line"><span>/usr/local/php/etc/php-fpm.d</span></span>
<span class="line"><span>[root@localhost php-fpm.d]# cp -rf www.conf.default www.conf</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[root@localhost etc]# pwd</span></span>
<span class="line"><span>/usr/local/php/etc</span></span>
<span class="line"><span>[root@localhost etc]# cp -rf php-fpm.conf.default php-fpm.conf</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[root@localhost php]# pwd</span></span>
<span class="line"><span>/usr/local/php</span></span>
<span class="line"><span>[root@localhost php]# mkdir daemon</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[root@localhost php-7.4.11]# pwd</span></span>
<span class="line"><span>/app/php-7.4.11     </span></span>
<span class="line"><span>[root@localhost php-7.4.11]# cp -rf sapi/fpm/init.d.php-fpm /usr/local/php/daemon/php-fpm</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[root@localhost php]# cd daemon/</span></span>
<span class="line"><span>[root@localhost daemon]# pwd</span></span>
<span class="line"><span>/usr/local/php/daemon</span></span>
<span class="line"><span>[root@localhost daemon]# chmod 777 -R php-fpm</span></span></code></pre>
</div><h2 id="_6、测试启动php-fpm" tabindex="-1">6、测试启动php-fpm <a class="header-anchor" href="#_6、测试启动php-fpm" aria-label="Permalink to &quot;6、测试启动php-fpm&quot;"></a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>[root@localhost daemon]# ./php-fpm start</span></span>
<span class="line"><span>Starting php-fpm  done</span></span>
<span class="line"><span>[root@localhost daemon]# ps auxfww | grep php | grep -v grep</span></span>
<span class="line"><span>root      132055  0.0  0.1 123664 10848 ?        Ss   16:53   0:00 php-fpm: master process (/usr/local/php/etc/php-fpm.conf)</span></span>
<span class="line"><span>daemon    132056  0.0  0.1 149940 10048 ?        S    16:53   0:00  \_ php-fpm: pool www</span></span>
<span class="line"><span>daemon    132057  0.0  0.1 149940 10048 ?        S    16:53   0:00  \_ php-fpm: pool www</span></span></code></pre>
</div><h2 id="_7、配置php支持apache" tabindex="-1">7、配置php支持apache <a class="header-anchor" href="#_7、配置php支持apache" aria-label="Permalink to &quot;7、配置php支持apache&quot;"></a></h2>
<h3 id="_7-1-编辑apache配置文件" tabindex="-1">7.1 编辑Apache配置文件 <a class="header-anchor" href="#_7-1-编辑apache配置文件" aria-label="Permalink to &quot;7.1 编辑Apache配置文件&quot;"></a></h3>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>[root@localhost ~]# vim /usr/local/apache/conf/httpd.conf</span></span>
<span class="line"><span>#找到AddType 添加：</span></span>
<span class="line"><span>    AddType application/x-httpd-php .php</span></span>
<span class="line"><span>    AddType application/x-httpd-php-source .phps </span></span>
<span class="line"><span>#找到</span></span>
<span class="line"><span>&#x3C;IfModule dir_module></span></span>
<span class="line"><span>    DirectoryIndex index.html</span></span>
<span class="line"><span>&#x3C;/IfModule></span></span>
<span class="line"><span>#改为</span></span>
<span class="line"><span>&#x3C;IfModule dir_module></span></span>
<span class="line"><span>    DirectoryIndex index.html index.php</span></span>
<span class="line"><span>&#x3C;/IfModule></span></span></code></pre>
</div><h3 id="_7-2-编辑php-ini" tabindex="-1">7.2 编辑php.ini <a class="header-anchor" href="#_7-2-编辑php-ini" aria-label="Permalink to &quot;7.2 编辑php.ini&quot;"></a></h3>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>[root@localhost ~]# vim /usr/local/php/etc/pht.ini</span></span>
<span class="line"><span>#找到display_startup_errors 和 log_errors</span></span>
<span class="line"><span>#改为：</span></span>
<span class="line"><span>log_errors = On</span></span>
<span class="line"><span>display_startup_errors = On</span></span></code></pre>
</div><h3 id="_7-3-重启php-apache" tabindex="-1">7.3 重启php apache <a class="header-anchor" href="#_7-3-重启php-apache" aria-label="Permalink to &quot;7.3 重启php apache&quot;"></a></h3>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>[root@localhost ~]# /usr/local/php/daemon/php-fpm restart</span></span>
<span class="line"><span>Gracefully shutting down php-fpm . done</span></span>
<span class="line"><span>Starting php-fpm  done</span></span>
<span class="line"><span>[root@localhost ~]# /usr/local/apache/bin/apachectl -k restart</span></span></code></pre>
</div><h3 id="_7-4-验证" tabindex="-1">7.4 验证 <a class="header-anchor" href="#_7-4-验证" aria-label="Permalink to &quot;7.4 验证&quot;"></a></h3>
<p>将一个php页面放到/usr/local/apache/htdocs</p>
<p>浏览器访问虚拟机ip</p>
<p>注：构建服务所需的包可在<a href="https://download.csdn.net/download/qq_45417634/13208956" target="_blank" rel="noreferrer">server_source_2020.iso </a>请自行下载，您也可以在所需安装包官网下载
本地源配置、防火墙、selinux等是linux较为基础的内容，不再赘述。
本文均为原创，如需与博主交流可email至mufeng.yu@qq.com</p>
]]></content:encoded>
        </item>
        <item>
            <link>https://www.imufeng.cn/full-stack/java/design-patterns/creation-mode/factory-pattern.html</link>
            <guid>https://www.imufeng.cn/full-stack/java/design-patterns/creation-mode/factory-pattern.html</guid>
            <pubDate>Sat, 05 Oct 2024 12:44:16 GMT</pubDate>
            <description><![CDATA[设计模式（Design Patterns），是一套被反复使用、多数人知晓的、经过分类的、代码设计经验的总结。使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。]]></description>
            <content:encoded><![CDATA[<h1 id="" tabindex="-1"> <a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;"></a></h1>
]]></content:encoded>
        </item>
        <item>
            <link>https://www.imufeng.cn/full-stack/java/design-patterns/creation-mode/singleton.html</link>
            <guid>https://www.imufeng.cn/full-stack/java/design-patterns/creation-mode/singleton.html</guid>
            <pubDate>Sat, 05 Oct 2024 12:44:16 GMT</pubDate>
            <description><![CDATA[在一个较为复杂的继承链中，祖先类更具有一般性，作为派生其他类的基类而不糊将其作为用来构造实例。]]></description>
        </item>
        <item>
            <title><![CDATA[Redis 缓存中间件编译安装]]></title>
            <link>https://www.imufeng.cn/training/linux/springboot-app-launch/redis.html</link>
            <guid>https://www.imufeng.cn/training/linux/springboot-app-launch/redis.html</guid>
            <pubDate>Tue, 16 Jul 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Redis 是一个实时数据平台（The Real-time Data Platform.） ，是一个快速、开源、内存中的数据存储结构，在 SpringBoot 项目中，使用最广泛的缓存中间件就是 Redis 了，本文将讨论如何编译安装 Redis 到 Linux 服务器。]]></description>
            <content:encoded><![CDATA[<h1 id="第二步-缓存中间件-redis-编译安装" tabindex="-1">第二步 缓存中间件 Redis 编译安装 <a class="header-anchor" href="#第二步-缓存中间件-redis-编译安装" aria-label="Permalink to &quot;第二步 缓存中间件 Redis 编译安装&quot;"></a></h1>
<h2 id="一、简介" tabindex="-1">一、简介 <a class="header-anchor" href="#一、简介" aria-label="Permalink to &quot;一、简介&quot;"></a></h2>
<p>根据 <a href="https://redis.io" target="_blank" rel="noreferrer">Redis 官网</a> 的信息，Redis 是一个实时数据平台（The Real-time Data Platform.）
，是一个快速、开源、内存中的数据存储结构，也可以用作文档或矢量数据库。</p>
<p>由于内存读写效率高、速度快的特点，Redis 使用<strong>内存数据集</strong>，能够支持每秒数十万次的读写操作。并且Redis
的所有操作都是原子性的，这意味着操作要么完全执行，要么完全不执行。这种特性对于确保数据的一致性和完整性至关重要，尤其是在高并发环境下处理事务时。</p>
<p>在 SpringBoot 项目中，使用最广泛的缓存中间件就是 Redis 了，本教程将源码开始，介绍如何编译安装 Redis 到 Linux 服务器。</p>
<h2 id="二、安装" tabindex="-1">二、安装 <a class="header-anchor" href="#二、安装" aria-label="Permalink to &quot;二、安装&quot;"></a></h2>
<h3 id="_2-1-安装前准备" tabindex="-1">2.1 安装前准备 <a class="header-anchor" href="#_2-1-安装前准备" aria-label="Permalink to &quot;2.1 安装前准备&quot;"></a></h3>
<blockquote>
<p>在此处安装时，需要的 make 、openssl等工具和开发库已在之前教程中安装，如果没有安装，在编译过程中遇到缺少的依赖按照之前教程自行安装即可，此处不再赘述。</p>
</blockquote>
<p>执行以下命令即可下载Redis 源码包：</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">wget</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> https://download.redis.io/redis-stable.tar.gz</span></span></code></pre>
</div><p>解压后目录结构：</p>
<div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>[root@imufeng opt]# tar -zxf redis-stable.tar.gz -C /usr/src/</span></span>
<span class="line"><span>[root@imufeng opt]# cd /usr/src/redis-stable/</span></span>
<span class="line"><span>[root@imufeng redis-stable]# ls</span></span>
<span class="line"><span>00-RELEASENOTES     COPYING   MANIFESTO   runtest-cluster    sentinel.conf  utils</span></span>
<span class="line"><span>BUGS                deps      README.md   runtest-moduleapi  src</span></span>
<span class="line"><span>CODE_OF_CONDUCT.md  INSTALL   redis.conf  runtest-sentinel   tests</span></span>
<span class="line"><span>CONTRIBUTING.md     Makefile  runtest     SECURITY.md        TLS.md</span></span></code></pre>
</div><h3 id="_2-2-开始编译安装" tabindex="-1">2.2 开始编译安装 <a class="header-anchor" href="#_2-2-开始编译安装" aria-label="Permalink to &quot;2.2 开始编译安装&quot;"></a></h3>
<div class="tip custom-block"><p class="custom-block-title">提示</p>
<p>Redis 没有编译安装选项校验的步骤，<strong>PREFIX</strong> 参数需要在 install 时指定。</p>
</div>
<p>执行以下命令，开始编译：</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">make</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -j4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> BUILD_TLS=yes</span></span></code></pre>
</div><p>编译成功后，开始安装：</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> PREFIX=/usr/local/redis</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> install</span></span></code></pre>
</div><p>安装成功后，目录结构如下：</p>
<div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>[root@imufeng bin]# pwd</span></span>
<span class="line"><span>/usr/local/redis/bin</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[root@imufeng bin]# ls</span></span>
<span class="line"><span>redis-benchmark  redis-check-aof  redis-check-rdb  redis-cli  redis-sentinel  redis-server</span></span></code></pre>
</div><h2 id="三、配置" tabindex="-1">三、配置 <a class="header-anchor" href="#三、配置" aria-label="Permalink to &quot;三、配置&quot;"></a></h2>
<h3 id="_3-1-环境变量配置" tabindex="-1">3.1 环境变量配置 <a class="header-anchor" href="#_3-1-环境变量配置" aria-label="Permalink to &quot;3.1 环境变量配置&quot;"></a></h3>
<p>修改 <code>/etc/profile</code> 文件，在 <code>PATH</code> 写入 环境变量即可：</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> PATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">$PATH:/usr/local/redis/bin</span></span></code></pre>
</div><p>执行如下命令加载修改：</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> /etc/profile</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 或</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> .</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> /etc/profile</span></span></code></pre>
</div><p>环境变量生效。</p>
<h3 id="_3-2-redis-conf-配置文件" tabindex="-1">3.2 Redis.conf 配置文件 <a class="header-anchor" href="#_3-2-redis-conf-配置文件" aria-label="Permalink to &quot;3.2 Redis.conf 配置文件&quot;"></a></h3>
<p><code>redis.conf</code>  配置文件需要在启动 Redis 时指定，其详细示例在源码包根目录下，可以将其拷贝到合适的地方，在启动时指定：</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> /usr/local/redis/etc/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> /usr/src/redis-stable/redis.conf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> /usr/local/redis/etc/</span></span></code></pre>
</div><p>也可只保留部分配置（未指定则为默认）</p>
<div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">bind 0.0.0.0			</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"># 监听地址</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">requirepass root		</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"># 访问密码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">protected-mode yes		</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"># 安全模式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">port 6379				</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"># 监听端口</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">daemonize yes			</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"># 开启守护线程</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">pidfile /var/run/redis_6379.pid		</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"># PID文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">loglevel notice			</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"># 日志等级</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">logfile </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">""</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">				# 日志文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">databases 16			</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"># 初始化数据库</span></span></code></pre>
</div><h3 id="_3-3-redis-service-配置" tabindex="-1">3.3 Redis.service 配置 <a class="header-anchor" href="#_3-3-redis-service-配置" aria-label="Permalink to &quot;3.3 Redis.service 配置&quot;"></a></h3>
<p>源码包 <code>utils/systemd-redis_server.service</code> 文件提供了 systemed 服务文件，根据提示配置 redis.conf 的位置后，大致如下：</p>
<div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">[Unit]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=Redis data structure server</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Documentation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=https://redis.io/documentation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Wants</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=network-online.target</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">After</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=network-online.target</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">[Service]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">ExecStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=/usr/local/bin/redis-server /usr/local/redis/etc/ </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">LimitNOFILE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=10032</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">NoNewPrivileges</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=yes</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=notify</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">TimeoutStartSec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=infinity</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">TimeoutStopSec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=infinity</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">UMask</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=0077</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">[Install]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">WantedBy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=multi-user.target</span></span></code></pre>
</div><p>由于我们选用的 AlmaLinux9 基于 RHCE 9，其 service 文件在 <code>/lib/systemd/system/</code> 目录下，需要将 service
文件重命名为 <code>redis.service</code>  并拷贝到该目录下：</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> /usr/src/redis-stable/utils/systemd-redis_server.service</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> /lib/systemd/system/redis.service</span></span></code></pre>
</div><p>然后执行 <code>systemctl daemon-reload</code> 命令，即可加载更新。</p>
<h2 id="四、启动执行" tabindex="-1">四、启动执行 <a class="header-anchor" href="#四、启动执行" aria-label="Permalink to &quot;四、启动执行&quot;"></a></h2>
<p>Redis 启动命令 <code>redis-server /path/to/conf</code>，即直接执行 redis-server 并指定配置文件即可，如果 <code>protected-mode</code> 配置为
yes，即后端运行，如果为 no，则会将日志打印到控制台。</p>
<p>我们已经配置了 Redis.service 服务，所以执行 <code>systemctl start redis</code> 即可启动服务：</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[root@imufeng system]# systemctl start redis</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[root@imufeng system]# systemctl status redis</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">●</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> redis.service</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> Redis</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> data</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> structure</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> server</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">     Loaded:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> loaded</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (/usr/lib/systemd/system/redis.service; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">disabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">preset:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> disabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">     Active:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> active</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (running) since Tue 2024-07-16 13:19:13 ACST; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">3h</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 14min</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> ago</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">       Docs:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> https://redis.io/documentation</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    Process:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 38149</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> ExecStart=/usr/local/redis/bin/redis-server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> /usr/local/redis/etc/redis.conf</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> --</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">   Main</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> PID:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 38150</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (redis-server)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">      Tasks:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (limit: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">48598</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">     Memory:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 8.3M</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">        CPU:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 15.082s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">     CGroup:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> /system.slice/redis.service</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">             └─38150</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "/usr/local/redis/bin/redis-server 0.0.0.0:6379"</span></span></code></pre>
</div><p>如果看到上方内容，即代表 redis 服务启动成功。</p>
<p>我们可以使用 redis-cli 命令或 RedisInsight、AnotherRedisDesktop等工具连接Redis，这里以 redis-cli 举例：</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[root@imufeng system]# redis-cli</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">127.0.0.1:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">> </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">ping</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">NOAUTH</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> Authentication</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> required.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">127.0.0.1:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">> </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">auth</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> root</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">OK</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">127.0.0.1:6379</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">> </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">ping</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">PONG</span></span></code></pre>
</div><p>由于配置文件指定了密码，所以需要认证才可以访问。</p>
<p>至此，Redis 的编译安装已完成。</p>
<div class="tip custom-block"><p class="custom-block-title">提示</p>
<p>本文仅讨论Redis 的编译安装，Redis 命令、集群操作、Redis Stack、Redis Insight 工具，等其他内容，详见博客后续更新。</p>
</div>
]]></content:encoded>
            <enclosure url="https://cdn.imufeng.cn/mblog/a7f0085a6b4aed958311b3edc4b98cc7.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[CSS 复习]]></title>
            <link>https://www.imufeng.cn/full-stack/front-end/review/css.html</link>
            <guid>https://www.imufeng.cn/full-stack/front-end/review/css.html</guid>
            <pubDate>Mon, 17 Jun 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[CSS对于设计者来说是一种非常灵活的工具，它必再把烦杂的样式定义编写在文档中，可以将所有有关文档的样式指定内容全部脱离出来，在行定义、在标题中定义，甚至作为外部样式文件供HTML调用。本文主要是对css在开发过程中较为常用以及易混淆的知识的复习。]]></description>
            <content:encoded><![CDATA[<h1 id="css复习" tabindex="-1">css复习 <a class="header-anchor" href="#css复习" aria-label="Permalink to &quot;css复习&quot;"></a></h1>
<h2 id="_1、选择器" tabindex="-1">1、选择器 <a class="header-anchor" href="#_1、选择器" aria-label="Permalink to &quot;1、选择器&quot;"></a></h2>
<p><code>优先级</code>:</p>
<p>1、!important；</p>
<p>2、行内样式；</p>
<p>3、ID选择器；</p>
<p>4、类选择器；</p>
<p>5、标签选择器；</p>
<p>6、通配符选择器；</p>
<p>7、浏览器的自定义属性和继承。</p>
<blockquote>
<p>用到多个后代样式时，优先级的情况：</p>
<p>1、 id个数多的优先级高；</p>
<p>2、id和class个数相等看元素个数；</p>
<p>3、优先级相同看选择器类型和个数。</p>
</blockquote>
<p><strong>后代选择器</strong>： （后代包括子、孙、重孙...）选择器与选择器之间用空格隔开</p>
<p><strong>子代选择器</strong>：父选择器与子选择器之前用&gt;隔开</p>
<p><strong>并集选择器</strong>：每组选择器之间通过逗号隔开</p>
<p><strong>交集选择器</strong>：选择器之间是紧挨着的，没有东西分隔；如果有标签选择器，<code>标签选择器必须写在最前面</code></p>
<p css=""><strong>伪类选择器</strong>：选择器：hover</p>
<div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">p</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"highlight"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>这是一个段落。&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>这是另一个段落。&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>这是div内的段落。&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>这是div内的另一个段落。&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"text"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"文本输入框"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">p</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"unique"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>这是一个唯一的段落。&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"#"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>链接&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">h2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>标题&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">h2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>这是一个与标题相邻的段落。&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>这是另一个与标题同级的段落。&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>这是一个span元素。&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/* 类型选择器 */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  </span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">blue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/* 类选择器 */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.highlight</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">   background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">yellow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/* ID 选择器 */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">#unique</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">   font-size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">20</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/* 属性选择器 */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  </span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"text"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">] {  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">   border</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> solid</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> green</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/* 后代选择器 */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  </span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D"> p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">   text-decoration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">underline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/* 子代选择器 */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  </span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> ></span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D"> p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">   font-style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">italic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/* 伪类选择器 */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  </span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">:hover</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">   color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/* 伪元素选择器 */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  </span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">p</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">::first-line</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    font-weight</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">bold</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/* 组合选择器 (多个选择器用逗号分隔) */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  </span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">     margin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/* 相邻兄弟选择器 */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  </span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">h2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> +</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D"> p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">   color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">purple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/* 通用兄弟选择器 */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  </span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">h2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> ~</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D"> p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">   text-indent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">em</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><h2 id="_2、背景" tabindex="-1">2、背景 <a class="header-anchor" href="#_2、背景" aria-label="Permalink to &quot;2、背景&quot;"></a></h2>
<p><code>background-color：rgb/rgba/十六进制/关键字</code>：背景颜色</p>
<p><code>background-image：url(图片路径)</code>：背景图片</p>
<blockquote>
<p>背景图片默认是在水平和垂直方向平铺；</p>
<p>背景图片仅仅是指给盒子起到装饰效果，类似于背景颜色，是不能撑开盒子的</p>
</blockquote>
<p><code>background-repeat: repeat/no-repeat/repeat-x/repeat-y</code>：背景平铺</p>
<blockquote>
<p>repeat：（默认值）水平和垂直方向平铺</p>
<p>no-repeat：不平铺</p>
<p>repeat-x：沿水平方向平铺</p>
<p>repeat-y：沿重置方向平铺</p>
</blockquote>
<p><code>background-position：属性值</code>：背景位置</p>
<blockquote>
<p>属性值：</p>
<p><strong>一个值</strong>：center、top、left、bottom、right、数值或百分比（指定相对于左边界的 x 坐标，y 坐标被设置成 相应的像素值或者百分比）</p>
<p><strong>两个值</strong>：第一个值是水平方向，第二个是垂直方向</p>
<p>如果第一个值是left或者right，第二个值是数值或者百分比，则该属性的表达的是：相对于顶部边界的 Y；</p>
<p>如果第一个值是top或者bottom，第二个值是数值或者百分比，则该属性的表达的是：相对于顶部边界的 X；</p>
<p><strong>三个值</strong>：两个值是关键字值，第三个是前面值的偏移量</p>
<p>第一个值只能是关键字；</p>
<p>数值或者百分比在第二个表示是第一个值的偏移量，在第三个表示第二个值的偏移量；</p>
<p>第二个和第三个都是数值或者百分比无效</p>
<p><strong>四个值</strong>：一、三为关键字，二、四为偏移量</p>
</blockquote>
<p>也可以把这些属性写在一起：<code>background:color image repeat position</code></p>
<h2 id="_3、定位position" tabindex="-1">3、定位position <a class="header-anchor" href="#_3、定位position" aria-label="Permalink to &quot;3、定位position&quot;"></a></h2>
<h3 id="绝对定位-position-absolute" tabindex="-1">绝对定位：position:absolute <a class="header-anchor" href="#绝对定位-position-absolute" aria-label="Permalink to &quot;绝对定位：position:absolute&quot;"></a></h3>
<p>需要配合方位属性（left、top、right、bottom）进行移动；</p>
<p>在页面中不占有原来的位置；</p>
<p>先找已经定位的父级，父级相对定位；子级绝对定位，若是没有父级，那就按照浏览器界面作为参照物；</p>
<p>改变标签的显示模式特点；</p>
<h3 id="相对定位-position-relative" tabindex="-1">相对定位：position:relative <a class="header-anchor" href="#相对定位-position-relative" aria-label="Permalink to &quot;相对定位：position:relative&quot;"></a></h3>
<p>需要配合方位属性（left、top、right、bottom）进行移动；</p>
<p><code>在页面中占有原来的位置</code>；</p>
<p>仍然具有标签原有的显示模式特点；</p>
<p>改变位置是参照之前的位置进行改变的；</p>
<h3 id="固定定位-position-fixed" tabindex="-1">固定定位：position:fixed <a class="header-anchor" href="#固定定位-position-fixed" aria-label="Permalink to &quot;固定定位：position:fixed&quot;"></a></h3>
<p>需要配合方位属性（left、top、right、bottom）进行移动；</p>
<p>在页面中不占有原来的位置；</p>
<h2 id="_4、对齐" tabindex="-1">4、对齐 <a class="header-anchor" href="#_4、对齐" aria-label="Permalink to &quot;4、对齐&quot;"></a></h2>
<h3 id="_1-文本对齐" tabindex="-1">1. 文本对齐 <a class="header-anchor" href="#_1-文本对齐" aria-label="Permalink to &quot;1. 文本对齐&quot;"></a></h3>
<ul>
<li><code>text-align</code>：用于设置块级元素中文本的水平对齐方式。
<ul>
<li><code>text-align: left;</code>：左对齐。</li>
<li><code>text-align: right;</code>：右对齐。</li>
<li><code>text-align: center;</code>：居中对齐。</li>
<li><code>text-align: justify;</code>：两端对齐。</li>
</ul>
</li>
</ul>
<h3 id="_2-垂直对齐-内联元素和表格单元格" tabindex="-1">2. 垂直对齐（内联元素和表格单元格） <a class="header-anchor" href="#_2-垂直对齐-内联元素和表格单元格" aria-label="Permalink to &quot;2. 垂直对齐（内联元素和表格单元格）&quot;"></a></h3>
<ul>
<li><code>vertical-align</code>：用于设置内联元素的垂直对齐方式。
<ul>
<li><code>vertical-align: top;</code>：顶部对齐。</li>
<li><code>vertical-align: bottom;</code>：底部对齐。</li>
<li><code>vertical-align: middle;</code>：居中对齐。</li>
<li><code>vertical-align: baseline;</code>：基线对齐（默认值）。</li>
</ul>
</li>
</ul>
<h3 id="_3-块级元素水平居中" tabindex="-1">3. 块级元素水平居中 <a class="header-anchor" href="#_3-块级元素水平居中" aria-label="Permalink to &quot;3. 块级元素水平居中&quot;"></a></h3>
<ul>
<li>
<p><code>margin</code>：</p>
<p>通过设置左右外边距为<code>auto</code>可以实现块级元素在容器中水平居中。</p>
<ul>
<li>
<p><code>margin-left: auto;</code></p>
</li>
<li>
<p><code>margin-right: auto;</code></p>
<blockquote>
<p>注意：块级元素需要有一个指定的宽度。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h3 id="_4-flexbox-对齐" tabindex="-1">4. Flexbox 对齐 <a class="header-anchor" href="#_4-flexbox-对齐" aria-label="Permalink to &quot;4. Flexbox 对齐&quot;"></a></h3>
<p>Flexbox 是一个一维布局模型，适用于在容器内对齐和分布空间，即使容器大小动态变化或者未知。</p>
<ul>
<li>
<p><code>justify-content</code></p>
<p>：用于设置主轴（默认是水平方向）上的对齐方式。</p>
<ul>
<li><code>justify-content: flex-start;</code></li>
<li><code>justify-content: flex-end;</code></li>
<li><code>justify-content: center;</code></li>
<li><code>justify-content: space-between;</code></li>
<li><code>justify-content: space-around;</code></li>
<li><code>justify-content: space-evenly;</code></li>
</ul>
</li>
<li>
<p><code>align-items</code></p>
<p>：用于设置交叉轴（默认是垂直方向）上的对齐方式。</p>
<ul>
<li><code>align-items: stretch;</code></li>
<li><code>align-items: flex-start;</code></li>
<li><code>align-items: flex-end;</code></li>
<li><code>align-items: center;</code></li>
<li><code>align-items: baseline;</code></li>
</ul>
</li>
<li>
<p><strong><code>align-self</code></strong>：允许单个 flex 项目有不同于其他项目的对齐方式。</p>
</li>
</ul>
<h3 id="_5-grid-对齐" tabindex="-1">5. Grid 对齐 <a class="header-anchor" href="#_5-grid-对齐" aria-label="Permalink to &quot;5. Grid 对齐&quot;"></a></h3>
<p>Grid 是一个二维布局系统，适用于网页上的复杂布局设计。</p>
<ul>
<li><strong><code>justify-items</code></strong>、<strong><code>align-items</code></strong>：分别控制网格内所有单元格在行轴和列轴上的对齐方式。</li>
<li><strong><code>justify-self</code></strong>、<strong><code>align-self</code></strong>：分别控制单个网格项目在行轴和列轴上的对齐方式。</li>
<li><strong><code>justify-content</code></strong>、<strong><code>align-content</code></strong>：控制网格容器内的行和列的对齐方式（当有多余空间时）。</li>
</ul>
<h3 id="_6-其他方式" tabindex="-1">6. 其他方式 <a class="header-anchor" href="#_6-其他方式" aria-label="Permalink to &quot;6. 其他方式&quot;"></a></h3>
<ul>
<li><strong><code>line-height</code></strong>：对于单行文本，可以通过设置与容器高度相等的行高来实现文本的垂直居中。</li>
<li><strong><code>display: table-cell;</code></strong>：通过模拟表格单元格的行为，可以使用 <code>vertical-align</code> 属性来垂直对齐元素。</li>
<li><strong><code>position</code> 与 <code>transform</code></strong>：结合使用 <code>position: absolute;</code> 或 <code>position: relative;</code> 以及 <code>transform: translateX(-50%);</code> 和 <code>transform: translateY(-50%);</code> 可以实现元素的水平和垂直居中。</li>
</ul>
<h2 id="_5、隐藏overflow" tabindex="-1">5、隐藏overflow <a class="header-anchor" href="#_5、隐藏overflow" aria-label="Permalink to &quot;5、隐藏overflow&quot;"></a></h2>
<ul>
<li><strong>visible</strong>：默认值。内容不会被修剪，会呈现在元素框之外。</li>
<li><strong>hidden</strong>：内容会被修剪，并且其余内容是不可见的。</li>
<li><strong>scroll</strong>：内容会被修剪，但浏览器会显示滚动条以便查看其余的内容。</li>
<li><strong>auto</strong>：如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。</li>
<li><strong>inherit</strong>：从父元素继承 <code>overflow</code> 的值。</li>
</ul>
<p>常用场景：</p>
<p><strong>文本超出隐藏</strong>：</p>
<div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.ellipsis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  /* 确保容器有一个明确的大小，以便文本可以溢出 */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">200</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">/* 或者其他你需要的宽度 */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  /* 隐藏溢出的文本 */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  overflow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">hidden</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  /* 防止文本换行 */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  white-space</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">nowrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  /* 在文本被裁剪的地方显示省略号 */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  text-overflow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">ellipsis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p><strong>清除浮动：</strong></p>
<div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> class="parent"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> class="child"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> class="child"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.parent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    border</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> solid</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">300</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.child</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    border</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> solid</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> blue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p><strong>内容滚动：</strong></p>
<div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">	background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">#00FFFF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">	width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">150</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">	height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">150</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">   /* 宽度超出150px横向滚动；高度超出150px纵向滚动 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">	overflow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">scroll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="_6、实现loading动画" tabindex="-1">6、实现loading动画 <a class="header-anchor" href="#_6、实现loading动画" aria-label="Permalink to &quot;6、实现loading动画&quot;"></a></h2>
<div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">svg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> class="loading" viewbox="25 25 50 50"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">circle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> cx="50" cy="50" r="25" class="path" fill="none" /</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">svg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.loading</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  animation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: rotate </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">s</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> linear</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">s</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> infinite</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  animation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: dash </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">s</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> ease-in-out</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> infinite</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  stroke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">#00b390</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  stroke-width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  stroke-dasharray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">90</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 150</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  stroke-dashoffset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  stroke-linecap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">round</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">@keyframes</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70"> rotate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">rotate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">deg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">rotate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">360</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">deg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">@keyframes</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70"> dash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  0%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    stroke-dasharray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 150</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    stroke-dashoffset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  50%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    stroke-dasharray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">90</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 150</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    stroke-dashoffset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">-40</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  100%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    stroke-dasharray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">90</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 150</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    stroke-dashoffset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">-120</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="_8、总结" tabindex="-1">8、总结 <a class="header-anchor" href="#_8、总结" aria-label="Permalink to &quot;8、总结&quot;"></a></h2>
<p>首先想到的一个问题就是：<em><strong>你做前端是有多少时间花在写css上？</strong></em></p>
<p>我的回答是非常多，几乎会用掉30%左右的时间去写css。虽然现在开发系统都会搭配使用ui组件库，这些组件库的组件能够使写让我们写css的时间大大的缩减，但是它也有他的弊端：每个组件库都有其自己的风格，它不一定能够满足你当前页面的设计需要。</p>
<p>虽然前端开发不要求我们要像那些大神一样，能够纯用css画出各种图案，但是最常用的一些写法（比如布局、超出隐藏、图片等比缩放、简单常用的动画效果等等）我们还是要熟练使用，这能够大大提高我们开发的效率。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Mysql 数据库编译安装]]></title>
            <link>https://www.imufeng.cn/training/linux/springboot-app-launch/mysql.html</link>
            <guid>https://www.imufeng.cn/training/linux/springboot-app-launch/mysql.html</guid>
            <pubDate>Sun, 05 May 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[MySQL是一款流行的开源关系型数据库管理系统（RDBMS），适用于从小型网站到大型企业级应用的各种场景。它以GNU通用公共许可证发行，实现成本效益。MySQL具备高性能、高可靠性和强大的可伸缩性，支持多线程、跨平台操作，及多种存储引擎，适应不同数据处理需求。其优势在于开源免费、社区活跃、易于学习与使用，且能有效处理大量并发连接，提供丰富的SQL功能及安全性保障，成为Web开发和数据存储领域的首选方案。]]></description>
            <content:encoded><![CDATA[<h1 id="第二步-mysql-数据库编译安装" tabindex="-1">第二步 Mysql 数据库编译安装 <a class="header-anchor" href="#第二步-mysql-数据库编译安装" aria-label="Permalink to &quot;第二步 Mysql 数据库编译安装&quot;"></a></h1>
<h2 id="一、简介" tabindex="-1">一、简介 <a class="header-anchor" href="#一、简介" aria-label="Permalink to &quot;一、简介&quot;"></a></h2>
<p>MySQL是最流行的关系型数据库管理系统之一，由瑞典 MySQL AB 公司开发，目前属于 Oracle 公司。因其性能高、可靠性强和易用性高而在各种应用中得到广泛应用。</p>
<p>MYSQL 的编译安装使用 CMAKE 来完成，它是一款跨平台的开源的构建系统，用于管理软件的编译过程。它可以通过简单的配置文件（CMakeLists.txt）来描述项目的构建过程，生成适合本地平台的原生构建文件。它比传统的编译安装更加灵活和方便。</p>
<p>之前有写过 MYSQL for Windows 直装教程：<a href="https://www.imufeng.cn/training/software/mysql-for-win-install.html" target="_blank" rel="noreferrer">Mysql for Windows 安装及初始化 </a>，但是企业级服务器部署中，为了提高性能并满足自定义配置，基本是要求编译安装。</p>
<h2 id="二、环境准备" tabindex="-1">二、环境准备 <a class="header-anchor" href="#二、环境准备" aria-label="Permalink to &quot;二、环境准备&quot;"></a></h2>
<p>MYSQL 编译安装对系统要求较高，推荐 4C8G 60G 配置。本次演示使用 AlmaLinux9 + mysql 8.0.37，系统配置为 16C 32G。可能好还需要提前配置阿里云 YUM 源等。</p>
<h2 id="三、安装" tabindex="-1">三、安装 <a class="header-anchor" href="#三、安装" aria-label="Permalink to &quot;三、安装&quot;"></a></h2>
<h3 id="_2-1-下载" tabindex="-1">2.1 下载 <a class="header-anchor" href="#_2-1-下载" aria-label="Permalink to &quot;2.1 下载&quot;"></a></h3>
<p>安装包下载页面：<a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noreferrer">MySQL :: Download MySQL Community Server</a> ，本文章以 MYSQL-8.0.37 举例，下载文件带boost的源码包：<code>mysql-boost-8.0.37.tar.gz</code> ，推荐解压到 <code>/usr/src</code> ，解压后目录结构如下：</p>
<div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>boost            Doxyfile-ignored     libchangestreams  packaging          sql-common</span></span>
<span class="line"><span>client           Doxyfile.in          libmysql          plugin             storage</span></span>
<span class="line"><span>cmake            doxygen_resources    libservices       README             strings</span></span>
<span class="line"><span>CMakeLists.txt   extra                LICENSE           router             support-files</span></span>
<span class="line"><span>components       include              man               run_doxygen.cmake  testclients</span></span>
<span class="line"><span>config.h.cmake   INSTALL              mysql-test        scripts            unittest</span></span>
<span class="line"><span>configure.cmake  libbinlogevents      MYSQL_VERSION     share              utilities</span></span>
<span class="line"><span>Docs             libbinlogstandalone  mysys             sql                vio</span></span></code></pre>
</div><h3 id="_2-2-编译检查" tabindex="-1">2.2 编译检查 <a class="header-anchor" href="#_2-2-编译检查" aria-label="Permalink to &quot;2.2 编译检查&quot;"></a></h3>
<p>Mysql 编译安装使用 CMAKE 构建工具，CMAKE 是依赖于c语言的，所以我们首先必须安装 CMAKE 及其依赖：</p>
<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> yum</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> cmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> gcc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> g++</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> gcc-toolset-12</span></span></code></pre>
</div><p>CMAKE 安装之后，即可开始编译安装，编译安装选项不是固定的，你完全可以按照阅读官方文档<a href="https://dev.mysql.com/doc/mysqld-version-reference/en/build-options.html" target="_blank" rel="noreferrer">MySQL 8 Build Options</a> 并自行增删，这就是编译安装最大的魅力所在。以下是我的编译安装选项</p>
<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">cmake3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -DCMAKE_INSTALL_PREFIX=/usr/local/mysql/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> \</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">-DMYSQL_DATADIR=/usr/local/mysql/data </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">-DDEFAULT_CHARSET=utf8mb4 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">-DDEFAULT_COLLATION=utf8mb4_general_ci </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">-DWITH_EXTRA_CHARSETS=all </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">-DWITH_MYISAM_STORAGE_ENGINE=1 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">-DWITH_INNOBASE_STORAGE_ENGINE=1 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">-DWITH_MEMORY_STORAGE_ENGINE=1 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">-DWITH_READLINE=1 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">-DWITH_INNODB_MEMCACHED=1 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">-DWITH_DEBUG=OFF </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">-DWITH_ZLIB=bundled </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">-DENABLED_LOCAL_INFILE=1 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">-DENABLED_PROFILING=ON </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">-DMYSQL_MAINTAINER_MODE=OFF </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">-DMYSQL_TCP_PORT=3306 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">-DDOWNLOAD_BOOST=1 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">-DWITH_BOOST=/usr/src/mysql-8.0.37/boost  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">-DFORCE_INSOURCE_BUILD=1</span></span></code></pre>
</div><p>其他教程可能会给出一堆的 yum 安装，但是其中可能会有一些不需要的依赖，所以一般都是在执行 CMAKE 编译检查命令时，遇到报错缺少依赖再去安装，如下图：</p>
<p><img src="https://cdn.imufeng.cn/mblog/ad341fa229ccf953b20b7b77c41131dd.png" alt="image-20240612162753836"></p>
<p>根据图片我们可以发现，系统缺少 <code>libtirpc-devel</code>  软件包，此时即可按照提示安装该软件包后重新执行 CMAKE 命令。经过我的测试，以下依赖需要安装：</p>
<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> yum</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> openssl-devel</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> ncurse-devel</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> libtirpc-devel</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> rpcgen</span></span></code></pre>
</div><p>只要看到如下内容，即可证明通过了编译安装检查，接下来你就可以开始安装了。</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>-- Configuring done (2.3s)</span></span>
<span class="line"><span>-- Generating done (2.7s)</span></span>
<span class="line"><span>-- Build files have been written to: /usr/src/mysql-8.0.37</span></span></code></pre>
</div><h3 id="_2-3-开始安装" tabindex="-1">2.3 开始安装 <a class="header-anchor" href="#_2-3-开始安装" aria-label="Permalink to &quot;2.3 开始安装&quot;"></a></h3>
<p>编译安装是个很久很漫长的过程，一定要注意留足60G左右的存储空间，否则可能会编译一个小时提示空间不足。如果你的配置足够高，可以为 make 添加 -j 选项来开启多线程，这里选择使用16线程来编译。</p>
<p>执行命令：<code>make -j16 &amp;&amp; make install</code></p>
<p>然后就是漫长的等待了。</p>
<h2 id="四、启动" tabindex="-1">四、启动 <a class="header-anchor" href="#四、启动" aria-label="Permalink to &quot;四、启动&quot;"></a></h2>
<h3 id="_4-1-配置文件" tabindex="-1">4.1 配置文件 <a class="header-anchor" href="#_4-1-配置文件" aria-label="Permalink to &quot;4.1 配置文件&quot;"></a></h3>
<p>配置文件：<code>/etc/my.cnf</code></p>
<div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">[mysqld]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> = mysql</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">basedir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> = /usr/local/mysql</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">datadir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=/data/mysql_dev </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"># 不指定就在 $basedir/data 下</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">lower_case_table_names</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=1 </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"># 忽略大小写</span></span></code></pre>
</div><p>这么多就够了。</p>
<h3 id="_4-2-用户和用户组" tabindex="-1">4.2 用户和用户组 <a class="header-anchor" href="#_4-2-用户和用户组" aria-label="Permalink to &quot;4.2 用户和用户组&quot;"></a></h3>
<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">groupadd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> mysql</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"># 不创建HOME目录，并不允许登录</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">useradd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -M</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> mysql</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> /sbin/nologin</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> /usr/local/mysql</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> mysql</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">chown</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -R</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> mysql.mysql</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> /usr/local/mysql</span></span></code></pre>
</div><h3 id="_4-3-环境变量" tabindex="-1">4.3 环境变量 <a class="header-anchor" href="#_4-3-环境变量" aria-label="Permalink to &quot;4.3 环境变量&quot;"></a></h3>
<p>推荐为 MYSQL 添加一个系统环境变量，编辑<code>/etc/profile</code>，并写入如下内容：</p>
<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> PATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">$PATH:/usr/local/mysql/bin/</span></span></code></pre>
</div><h3 id="_4-4-初始化" tabindex="-1">4.4 初始化 <a class="header-anchor" href="#_4-4-初始化" aria-label="Permalink to &quot;4.4 初始化&quot;"></a></h3>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>cd /usr/local/mysql/</span></span>
<span class="line"><span></span></span>
<span class="line"><span>./bin/mysqld --user=mysql --initialize -defaults-file=/etc/my.cnf</span></span></code></pre>
</div><p>执行命令后，会获得一个临时密码，此密码强制要求登录后修改。</p>
<h3 id="_4-5-启动" tabindex="-1">4.5 启动 <a class="header-anchor" href="#_4-5-启动" aria-label="Permalink to &quot;4.5 启动&quot;"></a></h3>
<p>启动命令：<code>mysqld &amp;</code></p>
<h2 id="五、连接测试" tabindex="-1">五、连接测试 <a class="header-anchor" href="#五、连接测试" aria-label="Permalink to &quot;五、连接测试&quot;"></a></h2>
<p>Mysql 服务启动后，即可进行连接：<code>./mysql -uroot -ppassWord</code></p>
<p>以下命令修改密码：</p>
<div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'PASSWORD';</span></span></code></pre>
</div><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;"></a></h2>
<ul>
<li><a href="https://www.runoob.com/mysql/mysql-tutorial.html" target="_blank" rel="noreferrer">MySQL 教程 | 菜鸟教程 (runoob.com)</a></li>
<li><a href="https://dev.mysql.com/doc/mysqld-version-reference/en/build-options.html" target="_blank" rel="noreferrer">MySQL 8 Build Options</a></li>
</ul>
]]></content:encoded>
            <enclosure url="https://cdn.imufeng.cn/mblog/de6d10ef17dcb6f1d9902dc612375980.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Nginx 服务器编译安装]]></title>
            <link>https://www.imufeng.cn/training/linux/springboot-app-launch/nginx.html</link>
            <guid>https://www.imufeng.cn/training/linux/springboot-app-launch/nginx.html</guid>
            <pubDate>Sat, 20 Apr 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Nginx 作为当下最强大的正向/反向代理服务器，以及应用最广泛的轻量级Web服务器，能够适用于多种场景，本文将描述 Nginx WEB 服务器从源码编译安装的流程。]]></description>
            <content:encoded><![CDATA[<h1 id="第一步-web-服务器-nginx-编译安装" tabindex="-1">第一步 WEB 服务器 Nginx 编译安装 <a class="header-anchor" href="#第一步-web-服务器-nginx-编译安装" aria-label="Permalink to &quot;第一步 WEB 服务器 Nginx 编译安装&quot;"></a></h1>
<h2 id="一、简介" tabindex="-1">一、简介 <a class="header-anchor" href="#一、简介" aria-label="Permalink to &quot;一、简介&quot;"></a></h2>
<p>根据 <a href="https://nginx.org/" target="_blank" rel="noreferrer">Nginx官网</a>介绍。Nginx 是 an HTTP and reverse proxy server, a mail proxy server, and a generic TCP/UDP proxy server（HTTP和反向代理服务器，邮件代理服务器和通用TCP/UDP代理服务器）。它还是应用最广泛的轻量级Web服务器。在性能上，Nginx占用很少的系统资源，能支持更多的并发连接，达到更高的访问效率；在功能上，Nginx是优秀的代理服务器和负载均衡服务器；在安装配置上，Nginx安装简单、配置灵活。</p>
<h2 id="二、安装" tabindex="-1">二、安装 <a class="header-anchor" href="#二、安装" aria-label="Permalink to &quot;二、安装&quot;"></a></h2>
<h3 id="_2-1-下载" tabindex="-1">2.1 下载 <a class="header-anchor" href="#_2-1-下载" aria-label="Permalink to &quot;2.1 下载&quot;"></a></h3>
<p>下载地址：<a href="https://nginx.org/en/download.html" target="_blank" rel="noreferrer">nginx: download</a> 选择 Stable version 最新的稳定版即可。下载后，解压到 <code>/usr/src</code> 目录下，目录结构如下：</p>
<div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>auto     CHANGES.ru  configure  html     Makefile  objs    src</span></span>
<span class="line"><span>CHANGES  conf        contrib    LICENSE  man       README</span></span></code></pre>
</div><h3 id="_2-2-安装前准备" tabindex="-1">2.2 安装前准备 <a class="header-anchor" href="#_2-2-安装前准备" aria-label="Permalink to &quot;2.2 安装前准备&quot;"></a></h3>
<p>编译安装需要 C 语言及 make 工具的支持，先安装这两个，其他依赖根据编译检查的提示再逐一安装。</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">yum</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> gcc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> g++</span></span></code></pre>
</div><h3 id="_2-3-编译选项" tabindex="-1">2.3 编译选项 <a class="header-anchor" href="#_2-3-编译选项" aria-label="Permalink to &quot;2.3 编译选项&quot;"></a></h3>
<p>我是用的编译安装选项如下，可以根据具体业务调整，详见官方文档 <a href="https://nginx.org/en/docs/configure.html" target="_blank" rel="noreferrer">Building nginx from Sources</a>。</p>
<p>进入源码包所在目录执行以下命令做编译安装检查：</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">./configure</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> \</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">--prefix=/data/software/nginx</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">--user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">nginx</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> \</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">--group=nginx </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">--with-pcre </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">--with-http_ssl_module </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">--with-http_v2_module </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">--with-http_realip_module </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">--with-http_addition_module </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">--with-http_sub_module </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">--with-http_dav_module </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">--with-http_flv_module </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">--with-http_mp4_module </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">--with-http_gunzip_module </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">--with-http_gzip_static_module </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">--with-http_random_index_module </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">--with-http_secure_link_module </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">--with-http_stub_status_module </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">--with-http_auth_request_module </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">--with-http_image_filter_module </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">--with-http_slice_module </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">--with-mail </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">--with-threads </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">--with-file-aio </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">--with-stream </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">--with-mail_ssl_module </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">--with-stream_ssl_module</span></span></code></pre>
</div><p>检查过程中，会遇到一些报错，如下：</p>
<p><img src="https://cdn.imufeng.cn/mblog/9921b40beeb127a45f05102faffdbbd0.png" alt="image-20240409103432796"></p>
<p><img src="https://cdn.imufeng.cn/mblog/c5ef3f38fc2e7d31ab1de26901af20d0.png" alt="image-20240409103429712"></p>
<p>从报错中，我们可以清晰的看到缺少 XXX 模块，一般都是安装 XXX-devel 包含依赖库的包即可，我安装了如下软件包：<code>pcre-devel</code>、<code>openssl-devel</code>、<code>gd-devel</code>。</p>
<h3 id="_2-4-编译安装" tabindex="-1">2.4 编译安装 <a class="header-anchor" href="#_2-4-编译安装" aria-label="Permalink to &quot;2.4 编译安装&quot;"></a></h3>
<p>使用 <code>make</code> 命令编译，使用 <code>make install</code> 命令安装。编译时可以使用 <code>make -j[n]</code> 参数指定多线程，一般为机器核心数。</p>
<p><img src="https://cdn.imufeng.cn/mblog/6d7a88c02227819d393cdc7b78ec36c6.png" alt="image-20240409103602629"></p>
<p>编译安装成功之后，即可在指定的路径看到 nginx 了：</p>
<p><img src="https://cdn.imufeng.cn/mblog/bd2b17443881488fe9b780e5cc777ad2.png" alt="image-20240409113645980"></p>
<h3 id="_2-5-启动" tabindex="-1">2.5 启动 <a class="header-anchor" href="#_2-5-启动" aria-label="Permalink to &quot;2.5 启动&quot;"></a></h3>
<p>运行 <code>sbin</code> 里边的 <code>nginx</code> 文件即可启动 nginx：</p>
<p><img src="https://cdn.imufeng.cn/mblog/c53087206ab2eea0f8f9a158190106e6.png" alt="image-20240409113830916"></p>
<p>可以看到 80 端口已经被占用了，curl 访问一下，可以看到 html 页面结构，浏览器也可以直接访问，证明 nginx 启动没问题了。</p>
<p><img src="https://cdn.imufeng.cn/mblog/5a6fa4a463b270f83af04c2963e1a097.png" alt="image-20240409103825846"></p>
<p><img src="https://cdn.imufeng.cn/mblog/2b46410a1d937a58a0ee5d1d24827e5b.png" alt="image-20240409104522844"></p>
<h2 id="三、配置" tabindex="-1">三、配置 <a class="header-anchor" href="#三、配置" aria-label="Permalink to &quot;三、配置&quot;"></a></h2>
<p>Nginx 的配置推荐 <a href="https://www.digitalocean.com/community/tools/nginx" target="_blank" rel="noreferrer">Nginx 配置工具</a>，这个网站可以使用可视化页面带你进行 Nginx 的配置，非常适合小白。</p>
<h3 id="_3-1-使用-systemd-管理" tabindex="-1">3.1 使用 systemd 管理 <a class="header-anchor" href="#_3-1-使用-systemd-管理" aria-label="Permalink to &quot;3.1 使用 systemd 管理&quot;"></a></h3>
<p>要将 nginx 配置为服务交给 systemd 管理，需要新增一个 service 文件：</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> /usr/lib/systemd/system/nginx.service</span></span></code></pre>
</div><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">[Unit]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=nginx web server</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Documentation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=http://nginx.org/en/docs/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">After</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=network.target remote-fs.target nss-lookup.target</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">[Service]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=forking</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">PIDFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=/data/service/nginx/logs/nginx.pid</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">ExecStartPre</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=/data/service/nginx/sbin/nginx -t -c /data/service/nginx/conf/nginx.conf</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">ExecStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=/data/service/nginx/sbin/nginx -c /data/service/nginx/conf/nginx.conf</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">ExecReload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">= /data/service/nginx/sbin/nginx -s reload</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">ExecStop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">= /data/service/nginx/sbin/nginx -s stop</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">PrivateTmp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">[Install]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">WantedBy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=multi-user.target</span></span></code></pre>
</div><p>通过 systemctl 命令启动 nginx：</p>
<p>启动前一定要使用 <code>nginx -s stop</code> 命令或 <code>kill</code> 命令停止 nginx，否则会报端口占用。</p>
<p><img src="https://cdn.imufeng.cn/mblog/cf1ff822fe98d64c3f71c7625bac00f2.png" alt="image-20240409114356091"></p>
<p>开机自启：</p>
<div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>systemctl enable nginx</span></span>
<span class="line"><span>Created symlink /etc/systemd/system/multi-user.target.wants/nginx.service → /usr/lib/systemd/system/nginx.service.</span></span></code></pre>
</div><h3 id="_3-2-基础配置" tabindex="-1">3.2 基础配置 <a class="header-anchor" href="#_3-2-基础配置" aria-label="Permalink to &quot;3.2 基础配置&quot;"></a></h3>
<p>Nginx 只有一个配置文件就是 <code>nginx.conf</code> ，能看到的配置文件都是通过 <code>include</code> 引入的，方便管理。</p>
<p>nginx.conf  配置结构如下：</p>
<div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span>...              #全局配置</span></span>
<span class="line"><span></span></span>
<span class="line"><span>events {         #events块</span></span>
<span class="line"><span>   ...</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>http      #http块</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    ...   #http全局块</span></span>
<span class="line"><span>    server        #server块</span></span>
<span class="line"><span>    { </span></span>
<span class="line"><span>        ...       #server全局块</span></span>
<span class="line"><span>        location [PATTERN]   #location块</span></span>
<span class="line"><span>        {</span></span>
<span class="line"><span>            ...</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        location [PATTERN] </span></span>
<span class="line"><span>        {</span></span>
<span class="line"><span>            ...</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    server</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>      ...</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    ...     #http全局块</span></span>
<span class="line"><span>}</span></span></code></pre>
</div><ul>
<li>全局配置包括用户、进程 PID、日志等的配置。</li>
<li>events 配置 nginx 的访问、网络连接。</li>
<li>http 块配置包括多个 server 块，一个个的服务。</li>
<li>server 可以配置多个，专有名词叫虚拟主机。</li>
<li>localtion 配置匹配的路径，可以用正则表达式。</li>
</ul>
<p>下面是我服务器 <code>imufeng.cn</code> blog 服务的 nginx 配置：</p>
<p><code>nginx.conf</code></p>
<div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">user </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                nginx;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">pid </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                 logs/nginx.pid;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">worker_processes </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    auto;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">worker_rlimit_nofile </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">65535</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"># Load modules</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">include </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">             /etc/nginx/modules-enabled/*.conf;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">events</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    multi_accept </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">      on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    worker_connections </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">65535</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">http</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    charset </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">               utf-8;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    sendfile </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">              on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    tcp_nopush </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">            on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    tcp_nodelay </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">           on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    server_tokens </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">         off</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    log_not_found </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">         off</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    types_hash_max_size </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">   2048</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    types_hash_bucket_size </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    client_max_body_size </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  16M</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    # MIME</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    include </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">               mime.types;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    default_type </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">          application/octet-stream;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    # Logging</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    access_log </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">            off</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    error_log </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">             /dev/null;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    # SSL</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    ssl_session_timeout </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">   1d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    ssl_session_cache </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">     shared:SSL:10m;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    ssl_session_tickets </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">   off</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    # Diffie-Hellman parameter for DHE ciphersuites</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    ssl_dhparam </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">           cert/dhparam.pem;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    # Mozilla Intermediate configuration</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    ssl_protocols </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">         TLSv1.2 TLSv1.3;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    ssl_ciphers </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">           ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    # OCSP Stapling</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    ssl_stapling </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">          on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    ssl_stapling_verify </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">   on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    resolver </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">              1.1.1.1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1.0.0.1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 8.8.8.8</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 8.8.4.4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 208.67.222.222</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 208.67.220.220</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> valid=60s;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    resolver_timeout </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">      2s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    # Load configs</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    include </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">               imufeng.cn/*.conf;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p><code>imufeng.cn/blog.conf</code></p>
<div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    listen </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">             443</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ssl http2;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    listen </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">             [::]:443 ssl http2;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    server_name </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        blog.imufeng.cn;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    root </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">               /home/mblog-vitepress-web;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    # SSL</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    ssl_certificate </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    cert/imufeng.cn.cer;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    ssl_certificate_key </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">cert/imufeng.cn.key;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    # security</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    include </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            conf/global.conf/security.conf;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    # logging</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    access_log </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">         logs/blog.imufeng.cn.log combined buffer=512k flush=5m;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    error_log </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">          logs/blog.imufeng.cn.error.log </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    # index.html fallback</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> / </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        add_header </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Content-Security-Policy </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"default-src 'self' 'unsafe-eval'  http: https: ws: wss: data: blob: 'unsafe-inline' 'unsafe-eval';"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        try_files </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">$uri $uri/ $uri.html /404.html;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>其中证书及 dhparam 配置详见我的博客 <a href="https://www.imufeng.cn/training/linux/acme-sh.html" target="_blank" rel="noreferrer">泛域名证书申请以及部署 | MBlog (imufeng.cn)</a></p>
<h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;"></a></h2>
<ul>
<li><a href="https://nginx.org/en/docs/configure.html" target="_blank" rel="noreferrer">Building nginx from Sources</a></li>
<li><a href="https://www.runoob.com/w3cnote/nginx-setup-intro.html" target="_blank" rel="noreferrer">Nginx 配置详解 | 菜鸟教程 (runoob.com)</a></li>
</ul>
]]></content:encoded>
            <enclosure url="https://cdn.imufeng.cn/mblog/006125ea4376a1e135b8a601c2418948.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[SpringBoot 企业级部署上线流程]]></title>
            <link>https://www.imufeng.cn/training/linux/springboot-app-launch/</link>
            <guid>https://www.imufeng.cn/training/linux/springboot-app-launch/</guid>
            <pubDate>Mon, 15 Apr 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[本系列将从 Linux 企业级运维的角度出发，详细介绍 Linux 操作系统下 Nginx + JAVA + MYSQL + Redis + Minio 的安装部署，主要使用编译安装。]]></description>
            <content:encoded><![CDATA[<h1 id="linux-企业级运维-springboot项目上线五部曲" tabindex="-1">Linux 企业级运维 - SpringBoot项目上线五部曲 <a class="header-anchor" href="#linux-企业级运维-springboot项目上线五部曲" aria-label="Permalink to &quot;Linux 企业级运维 - SpringBoot项目上线五部曲&quot;"></a></h1>
<div class="tip custom-block"><p class="custom-block-title">观前提示</p>
<p>本文将不会阐述 Linux 安装、基本配置等相关操作。阅读本教程前，你需要：</p>
<ol>
<li>Linux 基本操作知识储备</li>
<li>前后端分离系统的基础及打包操作（maven、pnpm等）</li>
<li>Linux 网络配置（nmcli、NetworkManager等）</li>
<li>自行安装操作系统、更新系统，你可能还需要切换镜像源</li>
</ol>
</div>
<p>Linux 服务器，其重要性不言而喻，本系列将从各个服务的安装、部署、配置等，系统性的讲解 SpringBoot 前后端分离项目的上线流程，
本系列将区别于类似某些 Linux 面板的自动化部署，也避免使用容器等工具，所有的服务部署将尽量使用最新版本，并从源码进行编译安装。
除 JAVA 使用 jdk17 外，本教程版本选择都为最新的稳定版，不推荐使用任何第三方站点下载。无法访问请自行科学。
由于原生编译安装对于硬件资源的要求较高，轻量级的云 ECS 服务器可能不太满足，所以更推荐本地虚拟机操作。</p>
<p>各服务版本及官网地址如下：</p>
<table tabindex="0">
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:center">版本</th>
<th style="text-align:center">地址</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Nginx 代理服务器</td>
<td style="text-align:center">1.25.3</td>
<td style="text-align:center"><a href="https://nginx.org/" target="_blank" rel="noreferrer">nginx news</a></td>
<td style="text-align:center">源码编译安装</td>
</tr>
<tr>
<td style="text-align:center">Mysql 数据库</td>
<td style="text-align:center">8.0.37</td>
<td style="text-align:center"><a href="https://www.mysql.com/cn/" target="_blank" rel="noreferrer">MySQL</a></td>
<td style="text-align:center">源码编译安装</td>
</tr>
<tr>
<td style="text-align:center">Redis 缓存中间件</td>
<td style="text-align:center">7.2</td>
<td style="text-align:center"><a href="https://redis.io/" target="_blank" rel="noreferrer">Redis</a></td>
<td style="text-align:center">源码编译安装</td>
</tr>
<tr>
<td style="text-align:center">MinIO</td>
<td style="text-align:center">latest</td>
<td style="text-align:center"><a href="https://www.minio.org.cn/" target="_blank" rel="noreferrer">MINIO</a></td>
<td style="text-align:center">可执行文件</td>
</tr>
<tr>
<td style="text-align:center">JDK 运行环境</td>
<td style="text-align:center">17</td>
<td style="text-align:center"><a href="https://www.oracle.com/cn/java/technologies/downloads/#java17" target="_blank" rel="noreferrer">JDK-17</a></td>
<td style="text-align:center">可执行文件</td>
</tr>
</tbody>
</table>
<blockquote>
<p>本博客不推荐从任何除官网外的第三方平台下载服务或源码包。</p>
</blockquote>
<h3 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;"></a></h3>
<ol>
<li><a href="./nginx.html">WEB 服务器 Nginx 编译安装</a></li>
<li><a href="./mysql.html">Mysql 数据库编译安装</a></li>
<li><a href="./redis.html">Redis 缓存中间件编译安装</a></li>
</ol>
]]></content:encoded>
            <enclosure url="https://cdn.imufeng.cn/mblog/eace45811a4b7ff825f1495aab72a2b0.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[重学 JAVA 设计模式]]></title>
            <link>https://www.imufeng.cn/full-stack/java/design-patterns/</link>
            <guid>https://www.imufeng.cn/full-stack/java/design-patterns/</guid>
            <pubDate>Tue, 26 Mar 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[设计模式（Design Patterns），是一套被反复使用、多数人知晓的、经过分类的、代码设计经验的总结。使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。]]></description>
            <content:encoded><![CDATA[<h1 id="重学-java-设计模式" tabindex="-1">重学 JAVA 设计模式 <a class="header-anchor" href="#重学-java-设计模式" aria-label="Permalink to &quot;重学 JAVA 设计模式&quot;"></a></h1>
<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;"></a></h2>
<p>为了尽量复用代码，降低代码的耦合度，基于面向对象编程（OOP）的设计模式应运而生。</p>
<p>设计模式（Design Patterns）代表了最佳的实践，是一套被反复使用、多数人知晓的、经过分类的、代码设计经验的总结。使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。</p>
<h2 id="设计模式的原则" tabindex="-1">设计模式的原则 <a class="header-anchor" href="#设计模式的原则" aria-label="Permalink to &quot;设计模式的原则&quot;"></a></h2>
<p>设计模式主要有以下原则：</p>
<ul>
<li><strong>开闭原则</strong></li>
<li><strong>里氏替换原则</strong></li>
<li><strong>依赖倒置原则</strong></li>
<li><strong>接口隔离原则</strong></li>
<li><strong>迪米特法则</strong></li>
<li><strong>合成复用原则</strong></li>
<li><strong>单一职责原则</strong></li>
</ul>
<p>设计模式的七大原则及实例详见： <a href="./principle.html">设计模式七大原则</a></p>
<h2 id="设计模式的分类" tabindex="-1">设计模式的分类 <a class="header-anchor" href="#设计模式的分类" aria-label="Permalink to &quot;设计模式的分类&quot;"></a></h2>
<p>设计模式主要分为三大类：<strong>创建型模式</strong>、<strong>结构型模式</strong>、<strong>行为型模式</strong>。受到<a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1264742167474528" target="_blank" rel="noreferrer">廖雪峰老师的教程</a>启发，
这一系列的博客将从这三个方面来学习设计模式，并做以记录。</p>
<h3 id="创建型模式" tabindex="-1">创建型模式 <a class="header-anchor" href="#创建型模式" aria-label="Permalink to &quot;创建型模式&quot;"></a></h3>
<ul>
<li><a href="./creation-mode/factory-pattern.html">工厂模式</a></li>
</ul>
<h3 id="结构型模式" tabindex="-1">结构型模式 <a class="header-anchor" href="#结构型模式" aria-label="Permalink to &quot;结构型模式&quot;"></a></h3>
<h3 id="行为型模式" tabindex="-1">行为型模式 <a class="header-anchor" href="#行为型模式" aria-label="Permalink to &quot;行为型模式&quot;"></a></h3>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[每日一题 - 2024]]></title>
            <link>https://www.imufeng.cn/interview/question-by-day/2024/</link>
            <guid>https://www.imufeng.cn/interview/question-by-day/2024/</guid>
            <pubDate>Wed, 27 Sep 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[每天至少一道面试题，范围不限，欢迎留言监督。]]></description>
            <content:encoded><![CDATA[<blockquote>
<p>每日一题从 <code>2023年09月27日</code> 开始记录，2024年的在这里，之前的请<a href="./../">点击查看</a>。</p>
</blockquote>
<h3 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;"></a></h3>
<table tabindex="0">
<thead>
<tr>
<th>时间</th>
<th>问题</th>
</tr>
</thead>
<tbody>
<tr>
<td>07/19</td>
<td><a href="./7.html#_7-19"> VUEX 和单纯的全局对象有什么区别？ </a></td>
</tr>
<tr>
<td>07/18</td>
<td><a href="./7.html#_7-18"> Vue3.0 为什么要用 proxy？ </a></td>
</tr>
<tr>
<td>07/17</td>
<td><a href="./7.html#_7-17"> 多线程的优势   </a></td>
</tr>
<tr>
<td>07/16</td>
<td><a href="./7.html#_7-16"> 如何优化接口性能？   </a></td>
</tr>
<tr>
<td>07/15</td>
<td><a href="./7.html#_7-15"> JAVA 实例化的顺序   </a></td>
</tr>
<tr>
<td>07/14</td>
<td><a href="./7.html#_7-14"> String s = new String(&quot;mufeng&quot;); 创建了几个对象？   </a></td>
</tr>
<tr>
<td>07/13</td>
<td><a href="./7.html#_7-13"> 什么是字符串常量池？   </a></td>
</tr>
<tr>
<td>07/12</td>
<td><a href="./7.html#_7-12"> 什么是 StringJoiner ？</a></td>
</tr>
<tr>
<td>07/11</td>
<td><a href="./7.html#_7-11"> 为何 JDK9 要将 String 的底层实现由 char[] 改成 byte[]?   </a></td>
</tr>
<tr>
<td>07/10</td>
<td><a href="./7.html#_7-10"> 什么是自动拆装箱？   </a></td>
</tr>
<tr>
<td>07/09</td>
<td><a href="./7.html#_7-9"> 怎么实现图片懒加载？</a></td>
</tr>
<tr>
<td>07/08</td>
<td><a href="./7.html#_7-8"> 什么是事件代理，以及它的应用场景有哪些？</a></td>
</tr>
<tr>
<td>07/07</td>
<td><a href="./7.html#_7-7"> JavaScript 中内存泄漏有哪几种情况？</a></td>
</tr>
<tr>
<td>07/06</td>
<td><a href="./7.html#_7-6"> RESTful 接口规范是什么？</a></td>
</tr>
<tr>
<td>07/05</td>
<td><a href="./7.html#_7-5"> 如何让 var [a, b] = {a: 1, b: 2} 解构赋值成功？</a></td>
</tr>
<tr>
<td>07/04</td>
<td><a href="./7.html#_7-4"> Proxy 能够监听到对象中的对象的引用吗？</a></td>
</tr>
<tr>
<td>07/03</td>
<td><a href="./7.html#_7-3"> MessageChannel 是什么，有什么使用场景？</a></td>
</tr>
<tr>
<td>07/02</td>
<td><a href="./7.html#_7-2"> mouseEnter 和 mouseOver 有什么区别？</a></td>
</tr>
<tr>
<td>07/01</td>
<td><a href="./7.html#_7-1"> Js的基础类型，typeof和instanceof的区别？</a></td>
</tr>
<tr>
<td>06/30</td>
<td><a href="./6.html#_6-30"> 十万内数字转中文 </a></td>
</tr>
<tr>
<td>06/29</td>
<td><a href="./6.html#_6-29"> 无序不相等数组中，选取 N 个数，使其和为 M </a></td>
</tr>
<tr>
<td>06/28</td>
<td><a href="./6.html#_6-28"> 拍平数组 </a></td>
</tr>
<tr>
<td>06/27</td>
<td><a href="./6.html#_6-27"> 剪枝叶 </a></td>
</tr>
<tr>
<td>06/26</td>
<td><a href="./6.html#_6-26"> 大数相加 </a></td>
</tr>
<tr>
<td>06/25</td>
<td><a href="./6.html#_6-25"> 日期格式化</a></td>
</tr>
<tr>
<td>06/24</td>
<td><a href="./6.html#_6-24"> 什么是限流？常见的限流算法有哪些？</a></td>
</tr>
<tr>
<td>06/23</td>
<td><a href="./6.html#_6-23"> JS 常用的十个高阶函数</a></td>
</tr>
<tr>
<td>06/22</td>
<td><a href="./6.html#_6-22"> 如何解决vue初始化页面闪动问题 </a></td>
</tr>
<tr>
<td>06/21</td>
<td><a href="./6.html#_6-21"> 求正序增长的正整数数组中，其和为N的两个数</a></td>
</tr>
<tr>
<td>06/20</td>
<td><a href="./6.html#_6-20"> 实现二进制 与十进制的互相转化的两个函数</a></td>
</tr>
<tr>
<td>06/19</td>
<td><a href="./6.html#_6-19"> 请输出 100 以内的菲波那切数列</a></td>
</tr>
<tr>
<td>06/18</td>
<td><a href="./6.html#_6-18"> 统计字符串中出现次数最多的字符及次数</a></td>
</tr>
<tr>
<td>06/17</td>
<td><a href="./6.html#_6-17"> Vue 如何实现按需加载</a></td>
</tr>
<tr>
<td>06/16</td>
<td><a href="./6.html#_6-16"> Vue 模板渲染的原理</a></td>
</tr>
<tr>
<td>06/15</td>
<td><a href="./6.html#_6-15"> Vue 插槽 slot 是什么？作用？原理？</a></td>
</tr>
<tr>
<td>06/14</td>
<td><a href="./6.html#_6-14"> Vue-Router 中使用 active-class</a></td>
</tr>
<tr>
<td>06/13</td>
<td><a href="./6.html#_6-13"> Vuex 的属性及其作用</a></td>
</tr>
<tr>
<td>06/12</td>
<td><a href="./6.html#_6-12"> Vuex 是什么？使用场景？</a></td>
</tr>
<tr>
<td>06/11</td>
<td><a href="./6.html#_6-11"> JS 脚本加载问题</a></td>
</tr>
<tr>
<td>06/10</td>
<td><a href="./6.html#_6-10"> AOT 编译模式和 JIT 编译模式异同？</a></td>
</tr>
<tr>
<td>06/09</td>
<td><a href="./6.html#_6-9"> 什么是 AOT 编译模式？</a></td>
</tr>
<tr>
<td>06/08</td>
<td><a href="./6.html#_6-8"> 为什么说 JAVA 语言解释与编译并存？</a></td>
</tr>
<tr>
<td>06/07</td>
<td><a href="./6.html#_6-7"> JAVA 采用字节码的好处？</a></td>
</tr>
<tr>
<td>06/06</td>
<td><a href="./6.html#_6-6"> 什么是僵尸进程？</a></td>
</tr>
<tr>
<td>06/05</td>
<td><a href="./6.html#_6-5"> 什么是孤儿进程？</a></td>
</tr>
<tr>
<td>06/04</td>
<td><a href="./6.html#_6-4"> http 常见的状态码</a></td>
</tr>
<tr>
<td>06/03</td>
<td><a href="./6.html#_6-3"> 简述 http 的缓存机制</a></td>
</tr>
<tr>
<td>06/02</td>
<td><a href="./6.html#_6-2"> http 常见的状态码</a></td>
</tr>
<tr>
<td>06/01</td>
<td><a href="./6.html#_6-1">浏览器中如何实现剪切板复制内容的功能</a></td>
</tr>
<tr>
<td>05/31</td>
<td><a href="./5.html#_5-31">如何压缩前端项目中JS的体积</a></td>
</tr>
<tr>
<td>05/30</td>
<td><a href="./5.html#_5-30"> prefetch 与 preload 的区别是什么</a></td>
</tr>
<tr>
<td>05/29</td>
<td><a href="./5.html#_5-29">简述 node/v8 中的垃圾回收机制</a></td>
</tr>
<tr>
<td>05/28</td>
<td><a href="./5.html#_5-28">JS 如何在url中传递数组</a></td>
</tr>
<tr>
<td>05/27</td>
<td><a href="./5.html#_5-27">Vue3 中的ref、toRef和toRefs</a></td>
</tr>
<tr>
<td>05/26</td>
<td><a href="./5.html#_5-26">TypeScript中any、unknown、never</a></td>
</tr>
<tr>
<td>05/25</td>
<td><a href="./5.html#_5-25">浏览器的事件循环机制</a></td>
</tr>
<tr>
<td>05/24</td>
<td><a href="./5.html#_5-24">箭头函数和普通函数的区别</a></td>
</tr>
<tr>
<td>05/23</td>
<td><a href="./5.html#_5-23">实现一个类似关键字new功能的函数</a></td>
</tr>
<tr>
<td>05/22</td>
<td><a href="./5.html#_5-22">数组的forEach和map方法的区别</a></td>
</tr>
<tr>
<td>05/21</td>
<td><a href="./5.html#_5-21">TS 中 type 和 interface 的区别</a></td>
</tr>
<tr>
<td>05/20</td>
<td><a href="./5.html#_5-20">理解 provide 与 inject</a></td>
</tr>
<tr>
<td>05/19</td>
<td><a href="./5.html#_5-19">js-tool-big-box 工具包</a></td>
</tr>
<tr>
<td>05/18</td>
<td><a href="./5.html#_5-18">Flutter 状态管理</a></td>
</tr>
<tr>
<td>05/17</td>
<td><a href="./5.html#_5-17">了解 Flutter</a></td>
</tr>
<tr>
<td>05/16</td>
<td><a href="./5.html#_5-16">理解 keep-alive</a></td>
</tr>
<tr>
<td>05/15</td>
<td><a href="./5.html#_5-15">Vue 的父组件和子组件生命周期钩子函数执行顺序</a></td>
</tr>
<tr>
<td>05/14</td>
<td><a href="./5.html#_5-14">Vue 生命周期</a></td>
</tr>
<tr>
<td>05/13</td>
<td><a href="./5.html#_5-13">JS 双色球机选一注</a></td>
</tr>
<tr>
<td>05/12</td>
<td><a href="./5.html#_5-12">JS 购物车</a></td>
</tr>
<tr>
<td>05/11</td>
<td><a href="./5.html#_5-11">JS 数组排序</a></td>
</tr>
<tr>
<td>05/10</td>
<td><a href="./5.html#_5-10">JS 模块编程题</a></td>
</tr>
<tr>
<td>05/09</td>
<td><a href="./5.html#_5-9"> computed和watch的区别？</a></td>
</tr>
<tr>
<td>05/08</td>
<td><a href="./5.html#_5-8">webpack 的构建流程？</a></td>
</tr>
<tr>
<td>05/07</td>
<td><a href="./5.html#_5-7">bind 、 call 、 apply 区别？</a></td>
</tr>
<tr>
<td>05/06</td>
<td><a href="./5.html#_5-6">如何理解this对象 ？</a></td>
</tr>
<tr>
<td>05/05</td>
<td><a href="./5.html#_5-5">如何理解闭包？</a></td>
</tr>
<tr>
<td>05/04</td>
<td><a href="./5.html#_5-4">深拷贝浅拷贝的区别 ？</a></td>
</tr>
<tr>
<td>05/03</td>
<td><a href="./5.html#_5-3">Vue3中Treeshaking特性？</a></td>
</tr>
<tr>
<td>05/02</td>
<td><a href="./5.html#_5-2">SSR 解决了什么问题？</a></td>
</tr>
<tr>
<td>05/01</td>
<td><a href="./5.html#_5-1">SSR 是什么？</a></td>
</tr>
<tr>
<td>04/30</td>
<td><a href="./4.html#_4-30">如何理解 ES6 的 Reflect 对象？</a></td>
</tr>
<tr>
<td>04/29</td>
<td><a href="./4.html#_4-29">如何理解 ES6 的 Proxy 对象？</a></td>
</tr>
<tr>
<td>04/28</td>
<td><a href="./4.html#_4-28">如何理解 ES6 的 Promise 对象？</a></td>
</tr>
<tr>
<td>04/27</td>
<td><a href="./4.html#_4-27">什么是 SPA？</a></td>
</tr>
<tr>
<td>04/26</td>
<td><a href="./4.html#_4-26">常用的 跨域 解决方案有哪些</a></td>
</tr>
<tr>
<td>04/25</td>
<td><a href="./4.html#_4-25">vue 中的 spa 引用如何优化首屏加载速度</a></td>
</tr>
<tr>
<td>04/24</td>
<td><a href="./4.html#_4-24">如何实现 vue 项目中的性能优化</a></td>
</tr>
<tr>
<td>04/23</td>
<td><a href="./4.html#_4-23">vue 修饰符</a></td>
</tr>
<tr>
<td>04/22</td>
<td><a href="./4.html#_4-22">nextTick 的作用</a></td>
</tr>
<tr>
<td>04/21</td>
<td><a href="./4.html#_4-21">v-if 和 v-show 的区别</a></td>
</tr>
<tr>
<td>04/20</td>
<td><a href="./4.html#_4-20">vue 组件的通信方式</a></td>
</tr>
<tr>
<td>04/19</td>
<td><a href="./4.html#_4-19">vue 的响应式原理</a></td>
</tr>
<tr>
<td>04/18</td>
<td><a href="./4.html#_4-18">HashMap 和 Hashtable 的区别</a></td>
</tr>
<tr>
<td>04/17</td>
<td><a href="./4.html#_4-17">力扣题库-1410 HTML 实体解析器</a></td>
</tr>
<tr>
<td>04/16</td>
<td><a href="./4.html#_4-16">什么是单调栈？</a></td>
</tr>
<tr>
<td>04/15</td>
<td><a href="./4.html#_4-15">力扣题库-121 买卖股票的最佳时机</a></td>
</tr>
<tr>
<td>04/14</td>
<td><a href="./4.html#_4-14">HashMap get 方法的执行过程？</a></td>
</tr>
<tr>
<td>04/13</td>
<td><a href="./4.html#_4-13">HashMap put 方法的执行过程？</a></td>
</tr>
<tr>
<td>04/12</td>
<td><a href="./4.html#_4-12">什么是 CDN？</a></td>
</tr>
<tr>
<td>04/11</td>
<td><a href="./4.html#_4-11">力扣题库-27 移除元素</a></td>
</tr>
<tr>
<td>04/10</td>
<td><a href="./4.html#_4-10">合并和变基有什么区别？</a></td>
</tr>
<tr>
<td>04/09</td>
<td><a href="./4.html#_4-9">力扣题库-1 两数之和</a></td>
</tr>
<tr>
<td>04/08</td>
<td><a href="./4.html#_4-8">为什么推荐使用 isEmpty() 方法判空？</a></td>
</tr>
<tr>
<td>04/07</td>
<td><a href="./4.html#_4-7">力扣题库-88 合并两个有序数组</a></td>
</tr>
<tr>
<td>04/06</td>
<td><a href="./4.html#_4-6">BigDecimal 类有哪些常见方法？</a></td>
</tr>
<tr>
<td>04/05</td>
<td><a href="./4.html#_4-5">什么是 BigDecimal 类？</a></td>
</tr>
<tr>
<td>04/04</td>
<td><a href="./4.html#_4-4">JAVA 如何做序列化？</a></td>
</tr>
<tr>
<td>04/03</td>
<td><a href="./4.html#_4-3">什么是序列化和反序列化？</a></td>
</tr>
<tr>
<td>04/02</td>
<td><a href="./4.html#_4-2">JAVA 中有没有引用传递？</a></td>
</tr>
<tr>
<td>04/01</td>
<td><a href="./4.html#_4-1">值传递&amp;引用传递</a></td>
</tr>
<tr>
<td>03/31</td>
<td><a href="./3.html#_3-31">获取 class 对象有哪些方式？</a></td>
</tr>
<tr>
<td>03/30</td>
<td><a href="./3.html#_3-30">反射的应用场景有哪些？</a></td>
</tr>
<tr>
<td>03/29</td>
<td><a href="./3.html#_3-29">什么是通配符？</a></td>
</tr>
<tr>
<td>03/28</td>
<td><a href="./3.html#_3-28">什么是泛型擦除机制？</a></td>
</tr>
<tr>
<td>03/27</td>
<td><a href="./3.html#_3-27">泛型的使用方式有哪些？</a></td>
</tr>
<tr>
<td>03/26</td>
<td><a href="./3.html#_3-26">什么是 AIO？</a></td>
</tr>
<tr>
<td>03/25</td>
<td><a href="./3.html#_3-25">什么是 NIO？</a></td>
</tr>
<tr>
<td>03/24</td>
<td><a href="./3.html#_3-24">什么是 BIO？</a></td>
</tr>
<tr>
<td>03/23</td>
<td><a href="./3.html#_3-23">JAVA 中有哪些流？</a></td>
</tr>
<tr>
<td>03/22</td>
<td><a href="./3.html#_3-22">什么是动态代理？</a></td>
</tr>
<tr>
<td>03/21</td>
<td><a href="./3.html#_3-21">什么是静态代理？</a></td>
</tr>
<tr>
<td>03/20</td>
<td><a href="./3.html#_3-20">代理模式的分类？</a></td>
</tr>
<tr>
<td>03/19</td>
<td><a href="./3.html#_3-19">什么是代理模式？</a></td>
</tr>
<tr>
<td>03/18</td>
<td><a href="./3.html#_3-18">什么是工厂模式？</a></td>
</tr>
<tr>
<td>03/17</td>
<td><a href="./3.html#_3-17">单例模式有哪些创建方式？</a></td>
</tr>
<tr>
<td>03/16</td>
<td><a href="./3.html#_3-16">什么是合成复用原则？</a></td>
</tr>
<tr>
<td>03/15</td>
<td><a href="./3.html#_3-15">什么是迪米特法则？</a></td>
</tr>
<tr>
<td>03/14</td>
<td><a href="./3.html#_3-14">什么是接口隔离原则？</a></td>
</tr>
<tr>
<td>03/13</td>
<td><a href="./3.html#_3-13">什么是依赖倒置原则？</a></td>
</tr>
<tr>
<td>03/12</td>
<td><a href="./3.html#_3-12">什么是里氏替换原则？</a></td>
</tr>
<tr>
<td>03/11</td>
<td><a href="./3.html#_3-11">什么是开放封闭原则？</a></td>
</tr>
<tr>
<td>03/10</td>
<td><a href="./3.html#_3-10">设计模式的六大原则？</a></td>
</tr>
<tr>
<td>03/09</td>
<td><a href="./3.html#_3-9">设计模式有哪些？</a></td>
</tr>
<tr>
<td>03/08</td>
<td><a href="./3.html#_3-8">设计模式有哪些类别？</a></td>
</tr>
<tr>
<td>03/07</td>
<td><a href="./3.html#_3-7">什么是设计模式?</a></td>
</tr>
<tr>
<td>03/06</td>
<td><a href="./3.html#_3-6">Mybatis Plus 有哪些主要的 API？</a></td>
</tr>
<tr>
<td>03/05</td>
<td><a href="./3.html#_3-5">什么是 Mybatis Plus？</a></td>
</tr>
<tr>
<td>03/04</td>
<td><a href="./3.html#_3-4">Mybatis 的动态 SQL 是什么？</a></td>
</tr>
<tr>
<td>03/03</td>
<td><a href="./3.html#_3-3">请描述 Mybatis 的动态 SQL。</a></td>
</tr>
<tr>
<td>03/02</td>
<td><a href="./3.html#_3-2">请描述 Mybatis 的缓存机制。</a></td>
</tr>
<tr>
<td>03/01</td>
<td><a href="./3.html#_3-1">MyBatis 实现一对一有几种方式?</a></td>
</tr>
<tr>
<td>02/29</td>
<td><a href="./2.html#_2-29">Mybatis 如何将查询结果封装为对象？</a></td>
</tr>
<tr>
<td>02/28</td>
<td><a href="./2.html#_2-28">Dao 接口的工作原理是什么</a></td>
</tr>
<tr>
<td>02/27</td>
<td><a href="./2.html#_2-27">Mybatis 查询时当实体类中的属性名和表中的字段名不一样，怎么办？</a></td>
</tr>
<tr>
<td>02/26</td>
<td><a href="./2.html#_2-26">Mybatis 中 <code>#{}</code> 和 <code>${}</code> 的区别是什么？</a></td>
</tr>
<tr>
<td>02/25</td>
<td><a href="./2.html#_2-25">什么是 ORM？</a></td>
</tr>
<tr>
<td>02/24</td>
<td><a href="./2.html#_2-24">什么是数据持久化？</a></td>
</tr>
<tr>
<td>02/23</td>
<td><a href="./2.html#_2-23">怎么确保一个集合不能被修改？</a></td>
</tr>
<tr>
<td>02/22</td>
<td><a href="./2.html#_2-22">Iterator 是什么？</a></td>
</tr>
<tr>
<td>02/21</td>
<td><a href="./2.html#_2-21">什么是散列表？</a></td>
</tr>
<tr>
<td>02/20</td>
<td><a href="./2.html#_2-20">HashMap 是怎么解决 hash 冲突的？</a></td>
</tr>
<tr>
<td>02/19</td>
<td><a href="./2.html#_2-19">简述快速排序的过程。</a></td>
</tr>
<tr>
<td>02/18</td>
<td><a href="./2.html#_2-18">ArrayList 和 LinkedList 的区别是什么？</a></td>
</tr>
<tr>
<td>02/17</td>
<td><a href="./2.html#_2-17">HashMap 的实现原理？</a></td>
</tr>
<tr>
<td>02/16</td>
<td><a href="./2.html#_2-16">HashSet 的实现原理？</a></td>
</tr>
<tr>
<td>02/15</td>
<td><a href="./2.html#_2-15">如何决定使用 HashMap 还是 TreeMap？</a></td>
</tr>
<tr>
<td>02/14</td>
<td><a href="./2.html#_2-14">HashMap 和 HashTable 的区别？</a></td>
</tr>
<tr>
<td>02/13</td>
<td><a href="./2.html#_2-13">HashMap 什么样的类适合作为键？</a></td>
</tr>
<tr>
<td>02/12</td>
<td><a href="./2.html#_2-12">List 和 Map 的区别？</a></td>
</tr>
<tr>
<td>02/11</td>
<td><a href="./2.html#_2-11">（力扣题库）计算数组最大连续 1 的个数。</a></td>
</tr>
<tr>
<td>02/10</td>
<td><a href="./2.html#_2-10">什么是栈，什么是队列？</a></td>
</tr>
<tr>
<td>02/09</td>
<td><a href="./2.html#_2-9">什么是快速失败和安全失败机制？</a></td>
</tr>
<tr>
<td>02/08</td>
<td><a href="./2.html#_2-8">ArrayList 底层是什么？</a></td>
</tr>
<tr>
<td>02/07</td>
<td><a href="./2.html#_2-7">JAVA 集合有哪些类？</a></td>
</tr>
<tr>
<td>02/06</td>
<td><a href="./2.html#_2-6">所有的 final 修饰的字段都是编译期常量吗?</a></td>
</tr>
<tr>
<td>02/05</td>
<td><a href="./2.html#_2-5">什么是重复注解？</a></td>
</tr>
<tr>
<td>02/04</td>
<td><a href="./2.html#_2-4">什么是类型注解？</a></td>
</tr>
<tr>
<td>02/03</td>
<td><a href="./2.html#_2-3">Optional 要解决什么问题？</a></td>
</tr>
<tr>
<td>02/02</td>
<td><a href="./2.html#_2-2">什么是 FunctionalInterface？</a></td>
</tr>
<tr>
<td>02/01</td>
<td><a href="./2.html#_2-1">类加载的生命周期？</a></td>
</tr>
<tr>
<td>01/31</td>
<td><a href="./1.html#_1-31">什么是同步？</a></td>
</tr>
<tr>
<td>01/30</td>
<td><a href="./1.html#_1-30">什么是阻塞？</a></td>
</tr>
<tr>
<td>01/29</td>
<td><a href="./1.html#_1-29">如何理解 IO 流？</a></td>
</tr>
<tr>
<td>01/28</td>
<td><a href="./1.html#_1-28">描述异常的底层？</a></td>
</tr>
<tr>
<td>01/27</td>
<td><a href="./1.html#_1-27">Java 7 的 try-with-resource?</a></td>
</tr>
<tr>
<td>01/26</td>
<td><a href="./1.html#_1-26">JAVA throw 和 throws 的区别？</a></td>
</tr>
<tr>
<td>01/25</td>
<td><a href="./1.html#_1-25">getName、getCanonicalName 与 getSimpleName 的区别?</a></td>
</tr>
<tr>
<td>01/24</td>
<td><a href="./1.html#_1-24">什么是反射？</a></td>
</tr>
<tr>
<td>01/23</td>
<td><a href="./1.html#_1-23">Quartz 是做什么用的？</a></td>
</tr>
<tr>
<td>01/22</td>
<td><a href="./1.html#_1-22">如何限制规定泛型的范围？</a></td>
</tr>
<tr>
<td>01/21</td>
<td><a href="./1.html#_1-21">泛型类如何定义使用？</a></td>
</tr>
<tr>
<td>01/20</td>
<td><a href="./1.html#_1-20">this() &amp; super() 在构造方法中的区别？</a></td>
</tr>
<tr>
<td>01/19</td>
<td><a href="./1.html#_1-19">什么是 Java 移位运算符？</a></td>
</tr>
<tr>
<td>01/18</td>
<td><a href="./1.html#_1-18">JAVA 能在 Switch 中使用 String 吗?</a></td>
</tr>
<tr>
<td>01/17</td>
<td><a href="./1.html#_1-17">为什么 DNS 通常基于 UDP？</a></td>
</tr>
<tr>
<td>01/16</td>
<td><a href="./1.html#_1-16">TCP 三次握手中，最后一次回复丢失，会发生什么？</a></td>
</tr>
<tr>
<td>01/15</td>
<td><a href="./1.html#_1-15">什么是 TCP 三次握手？</a></td>
</tr>
<tr>
<td>01/14</td>
<td><a href="./1.html#_1-14">什么是754层网络模型？</a></td>
</tr>
<tr>
<td>01/13</td>
<td><a href="./1.html#_1-13">什么是日志系统和日志门面？</a></td>
</tr>
<tr>
<td>01/12</td>
<td><a href="./1.html#_1-12">什么是 JWT？</a></td>
</tr>
<tr>
<td>01/11</td>
<td><a href="./1.html#_1-11">Spring Security 的原理？</a></td>
</tr>
<tr>
<td>01/10</td>
<td><a href="./1.html#_1-10">什么是 Spring Security？</a></td>
</tr>
<tr>
<td>01/09</td>
<td><a href="./1.html#_1-9">谈谈你对 CGLib 的理解？</a></td>
</tr>
<tr>
<td>01/08</td>
<td><a href="./1.html#_1-8">有哪些AOP Advice通知的类型？</a></td>
</tr>
<tr>
<td>01/07</td>
<td><a href="./1.html#_1-7">AOP 包含的几个概念?</a></td>
</tr>
<tr>
<td>01/06</td>
<td><a href="./1.html#_1-6">列举一些重要的Spring模块。</a></td>
</tr>
<tr>
<td>01/05</td>
<td><a href="./1.html#_1-5">什么是监听器？</a></td>
</tr>
<tr>
<td>01/04</td>
<td><a href="./1.html#_1-4">什么是拦截器？</a></td>
</tr>
<tr>
<td>01/03</td>
<td><a href="./1.html#_1-3">Spring Boot 的默认编码是？</a></td>
</tr>
<tr>
<td>01/02</td>
<td><a href="./1.html#_1-2">Spring Boot 应用如何优雅关闭？</a></td>
</tr>
<tr>
<td>01/01</td>
<td><a href="./1.html#_1-1">Spring Boot 怎么注册事件监听器？</a></td>
</tr>
</tbody>
</table>
]]></content:encoded>
        </item>
    </channel>
</rss>